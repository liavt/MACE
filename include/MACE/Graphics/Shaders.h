/*
The MIT License (MIT)

Copyright (c) 2016 Liav Turkia

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/
#pragma once
#ifndef MACE_GRAPHICS_SHADERS_H
#define MACE_GRAPHICS_SHADERS_H

#include <MACE/Utility/Matrix.h>
#include <unordered_map>
#include <GL/glew.h>


namespace mc {
	namespace gfx {

		/**
		@todo make a shader class
		*/
		class ShaderProgram {
		public:
			ShaderProgram() noexcept;
			~ShaderProgram() noexcept = default;

			void init();
			void destroy();

			void bind() const;
			void unbind() const;

			void createFragment(const char shader[]);
			void createFragment(const std::string& shader);
			void createVertex(const char shader[]);
			void createVertex(const std::string& shader);

			void createUniform(const std::string& name);
			void createUniform(const char* name);

			int getUniformLocation(const std::string& name);
			int getUniformLocation(const char* name);

			int getProgramID() const;
			int getVertexID() const;
			int getFragmentID() const;

			//Up next are a bunch of autogenerated overloaded functions
			//setUniform with float matrices
			void setUniform(char * name, const bool transpose, const mc::Matrix<float, 2, 2>& m);
			void setUniform(char * name, const mc::Matrix<float, 2, 2>& m);
			void setUniform(char * name, const bool transpose, const mc::Matrix<float, 3, 3>& m);
			void setUniform(char * name, const mc::Matrix<float, 3, 3>& m);
			void setUniform(char * name, const bool transpose, const mc::Matrix<float, 4, 4>& m);
			void setUniform(char * name, const mc::Matrix<float, 4, 4>& m);
			void setUniform(char * name, const bool transpose, const mc::Matrix<float, 2, 3>& m);
			void setUniform(char * name, const mc::Matrix<float, 2, 3>& m);
			void setUniform(char * name, const bool transpose, const mc::Matrix<float, 3, 2>& m);
			void setUniform(char * name, const mc::Matrix<float, 3, 2>& m);
			void setUniform(char * name, const bool transpose, const mc::Matrix<float, 2, 4>& m);
			void setUniform(char * name, const mc::Matrix<float, 2, 4>& m);
			void setUniform(char * name, const bool transpose, const mc::Matrix<float, 3, 4>& m);
			void setUniform(char * name, const mc::Matrix<float, 3, 4>& m);
			void setUniform(char * name, const bool transpose, const mc::Matrix<float, 4, 3>& m);
			void setUniform(char * name, const mc::Matrix<float, 4, 3>& m);
			//setUniform with double matrices
			void setUniform(char * name, const bool transpose, const mc::Matrix<double, 2, 2>& m);
			void setUniform(char * name, const mc::Matrix<double, 2, 2>& m);
			void setUniform(char * name, const bool transpose, const mc::Matrix<double, 3, 3>& m);
			void setUniform(char * name, const mc::Matrix<double, 3, 3>& m);
			void setUniform(char * name, const bool transpose, const mc::Matrix<double, 4, 4>& m);
			void setUniform(char * name, const mc::Matrix<double, 4, 4>& m);
			void setUniform(char * name, const bool transpose, const mc::Matrix<double, 2, 3>& m);
			void setUniform(char * name, const mc::Matrix<double, 2, 3>& m);
			void setUniform(char * name, const bool transpose, const mc::Matrix<double, 3, 2>& m);
			void setUniform(char * name, const mc::Matrix<double, 3, 2>& m);
			void setUniform(char * name, const bool transpose, const mc::Matrix<double, 2, 4>& m);
			void setUniform(char * name, const mc::Matrix<double, 2, 4>& m);
			void setUniform(char * name, const bool transpose, const mc::Matrix<double, 3, 4>& m);
			void setUniform(char * name, const mc::Matrix<double, 3, 4>& m);
			void setUniform(char * name, const bool transpose, const mc::Matrix<double, 4, 3>& m);
			void setUniform(char * name, const mc::Matrix<double, 4, 3>& m);

			//setUniform with float
			void setUniform(char * name, const float a);
			void setUniform(char * name, const float a, const float b);
			void setUniform(char * name, const float a, const float b, const float c);
			void setUniform(char * name, const float a, const float b, const float c, const float d);
			void setUniform(char * name, const Size arraySize, const float* a);
			void setUniform(char * name, const Size componentSize, const Size arraySize, const float* a);
			void setUniform(char * name, const mc::Vector<float, 1> v);
			void setUniform(char * name, const mc::Vector<float, 2> v);
			void setUniform(char * name, const mc::Vector<float, 3> v);
			void setUniform(char * name, const mc::Vector<float, 4> v);
			//setUniform with double
			void setUniform(char * name, const double a);
			void setUniform(char * name, const double a, const double b);
			void setUniform(char * name, const double a, const double b, const double c);
			void setUniform(char * name, const double a, const double b, const double c, const double d);;
			void setUniform(char * name, const Size arraySize, const double* a);
			void setUniform(char * name, const Size componentSize, const Size arraySize, const double* a);
			void setUniform(char * name, const mc::Vector<double, 1> v);
			void setUniform(char * name, const mc::Vector<double, 2> v);
			void setUniform(char * name, const mc::Vector<double, 3> v);
			void setUniform(char * name, const mc::Vector<double, 4> v);
			//setUniform with int
			void setUniform(char * name, const int a);
			void setUniform(char * name, const int a, const int b);
			void setUniform(char * name, const int a, const int b, const int c);
			void setUniform(char * name, const int a, const int b, const int c, const int d);
			void setUniform(char * name, const Size arraySize, const int* a);
			void setUniform(char * name, const Size componentSize, const Size arraySize, const int* a);
			void setUniform(char * name, const mc::Vector<int, 1> v);
			void setUniform(char * name, const mc::Vector<int, 2> v);
			void setUniform(char * name, const mc::Vector<int, 3> v);
			void setUniform(char * name, const mc::Vector<int, 4> v);
			//setUniform with unsigned int
			void setUniform(char * name, const unsigned int a);
			void setUniform(char * name, const unsigned int a, const unsigned int b);
			void setUniform(char * name, const unsigned int a, const unsigned int b, const unsigned int c);
			void setUniform(char * name, const unsigned int a, const unsigned int b, const unsigned int c, const unsigned int d);;
			void setUniform(char * name, const Size arraySize, const unsigned int* a);
			void setUniform(char * name, const Size componentSize, const Size arraySize, const unsigned int* a);
			void setUniform(char * name, const mc::Vector<unsigned int, 1> v);
			void setUniform(char * name, const mc::Vector<unsigned int, 2> v);
			void setUniform(char * name, const mc::Vector<unsigned int, 3> v);
			void setUniform(char * name, const mc::Vector<unsigned int, 4> v);

		private:
			int id = -1;
			int fragId = -1, vertId = -1;

			std::unordered_map<std::string, int> uniforms = std::unordered_map<std::string, int>();

			int createShader(const char code[], const GLenum& type);

			void createProgram();

		};//ShaderProgram

	}//gfx
}//mc

#endif