<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="de/d8c/a00036" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::VertexArray</compoundname>
    <basecompoundref refid="dc/de2/a00024" prot="public" virt="non-virtual">mc::gfx::Object</basecompoundref>
    <includes refid="d8/d41/a00038" local="no">Buffer.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="de/d8c/a00036_adb5e75902d33d713ffa56a6d8af4d8c9_1adb5e75902d33d713ffa56a6d8af4d8c9" prot="public" static="no" mutable="no">
        <type><ref refid="d6/d2c/a00072_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        <definition>Size mc::gfx::VertexArray::vertexNumber</definition>
        <argsstring></argsstring>
        <name>vertexNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="323" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d8c/a00036_ae3f8bd0a9fabf70173d798b121d4bce6_1ae3f8bd0a9fabf70173d798b121d4bce6" prot="public" static="no" mutable="no">
        <type><ref refid="d6/d2c/a00072_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        <definition>Size mc::gfx::VertexArray::indiceNumber</definition>
        <argsstring></argsstring>
        <name>indiceNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="323" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="de/d8c/a00036_a29849c712c9ba15237c606c0f37f9000_1a29849c712c9ba15237c606c0f37f9000" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::VertexArray::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <reimplements refid="dc/de2/a00024_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914">init</reimplements>
        <briefdescription>
<para>Calls the corresponding glCreate* function and assigns an ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dc/de2/a00024_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80" kindref="member">Object::destroy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/de2/a00024_a9a59b47f57c7a7e83ee9d268f692cc4d_1a9a59b47f57c7a7e83ee9d268f692cc4d" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/de2/a00024_af36391f915aeed8452b6f21e926932f2_1af36391f915aeed8452b6f21e926932f2" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/de2/a00024_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76" kindref="member">Object::isCreated() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d8c/a00036_a1f554270bb87473ae91fc29c28739680_1a1f554270bb87473ae91fc29c28739680" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::VertexArray::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <reimplements refid="dc/de2/a00024_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80">destroy</reimplements>
        <briefdescription>
<para>Calls the corresponding glDestroy* function and deletes the ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dc/de2/a00024_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/de2/a00024_a9a59b47f57c7a7e83ee9d268f692cc4d_1a9a59b47f57c7a7e83ee9d268f692cc4d" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/de2/a00024_af36391f915aeed8452b6f21e926932f2_1af36391f915aeed8452b6f21e926932f2" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/de2/a00024_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76" kindref="member">Object::isCreated() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="dc/de2/a00024" kindref="compound">Object</ref></computeroutput> has not been created yet </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d8c/a00036_a269ec0a5559befdcc36c8f31a044859a_1a269ec0a5559befdcc36c8f31a044859a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mc::gfx::VertexArray::isCreated</definition>
        <argsstring>() const </argsstring>
        <name>isCreated</name>
        <reimplements refid="dc/de2/a00024_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76">isCreated</reimplements>
        <briefdescription>
<para>Queries OpenGL whether this <ref refid="dc/de2/a00024" kindref="compound">Object</ref>&apos;s ID is a valid object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether this <computeroutput><ref refid="dc/de2/a00024" kindref="compound">Object</ref></computeroutput> represents memory </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/de2/a00024_a9a59b47f57c7a7e83ee9d268f692cc4d_1a9a59b47f57c7a7e83ee9d268f692cc4d" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/de2/a00024_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="note"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d8c/a00036_ad408ad5e716ae92b3c00bea9fe316ba1_1ad408ad5e716ae92b3c00bea9fe316ba1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::VertexArray::draw</definition>
        <argsstring>(const GLenum type=GL_TRIANGLES) const </argsstring>
        <name>draw</name>
        <param>
          <type>const GLenum</type>
          <declname>type</declname>
          <defval>GL_TRIANGLES</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glDrawElements">https://www.opengl.org/wiki/GLAPI/glDrawElements</ulink> </para></simplesect>
<simplesect kind="note"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d8c/a00036_ace12bc77e046bc67f8079312495072d1_1ace12bc77e046bc67f8079312495072d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::VertexArray::loadVertices</definition>
        <argsstring>(const Size &amp;&amp;verticeSize, const GLfloat vertices[], const Index &amp;&amp;location=15, const Size &amp;&amp;attributeSize=3)</argsstring>
        <name>loadVertices</name>
        <param>
          <type>const <ref refid="d6/d2c/a00072_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref> &amp;&amp;</type>
          <declname>verticeSize</declname>
        </param>
        <param>
          <type>const GLfloat</type>
          <declname>vertices</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const <ref refid="d6/d2c/a00072_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;&amp;</type>
          <declname>location</declname>
          <defval>15</defval>
        </param>
        <param>
          <type>const <ref refid="d6/d2c/a00072_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref> &amp;&amp;</type>
          <declname>attributeSize</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d8c/a00036_aa6f40dda3f77ffc4ab7066cc7fc57c83_1aa6f40dda3f77ffc4ab7066cc7fc57c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::VertexArray::loadIndices</definition>
        <argsstring>(const Size &amp;&amp;indiceNum, const GLuint indices[], const GLenum &amp;&amp;drawType=GL_DYNAMIC_DRAW)</argsstring>
        <name>loadIndices</name>
        <param>
          <type>const <ref refid="d6/d2c/a00072_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref> &amp;&amp;</type>
          <declname>indiceNum</declname>
        </param>
        <param>
          <type>const GLuint</type>
          <declname>indices</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const GLenum &amp;&amp;</type>
          <declname>drawType</declname>
          <defval>GL_DYNAMIC_DRAW</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d8c/a00036_ab8a6547ad57458817add902eafa9a01c_1ab8a6547ad57458817add902eafa9a01c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::VertexArray::storeDataInAttributeList</definition>
        <argsstring>(const Size &amp;&amp;dataSize, const GLvoid *data, const Index &amp;&amp;location=0, const Size &amp;&amp;attributeSize=3)</argsstring>
        <name>storeDataInAttributeList</name>
        <param>
          <type>const <ref refid="d6/d2c/a00072_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref> &amp;&amp;</type>
          <declname>dataSize</declname>
        </param>
        <param>
          <type>const GLvoid *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d2c/a00072_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;&amp;</type>
          <declname>location</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="d6/d2c/a00072_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref> &amp;&amp;</type>
          <declname>attributeSize</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d8c/a00036_a291b95f99b42fdb0e36011f4bf2ea8d6_1a291b95f99b42fdb0e36011f4bf2ea8d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::VertexArray::operator==</definition>
        <argsstring>(const VertexArray &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="de/d8c/a00036" kindref="compound">VertexArray</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d8c/a00036_a6eb1617ac03722773c4e23ca6cadaf37_1a6eb1617ac03722773c4e23ca6cadaf37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::VertexArray::operator!=</definition>
        <argsstring>(const VertexArray &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="de/d8c/a00036" kindref="compound">VertexArray</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/de2/a00024_a9a59b47f57c7a7e83ee9d268f692cc4d_1a9a59b47f57c7a7e83ee9d268f692cc4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::Object::bind</definition>
        <argsstring>() const </argsstring>
        <name>bind</name>
        <briefdescription>
<para>Binds this <computeroutput><ref refid="dc/de2/a00024" kindref="compound">Object</ref></computeroutput> to be used in an OpenGL function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dc/de2/a00024_af36391f915aeed8452b6f21e926932f2_1af36391f915aeed8452b6f21e926932f2" kindref="member">Object::unbind() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="dc/de2/a00024" kindref="compound">Object</ref></computeroutput> has not been created yet </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/de2/a00024_af36391f915aeed8452b6f21e926932f2_1af36391f915aeed8452b6f21e926932f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::Object::unbind</definition>
        <argsstring>() const </argsstring>
        <name>unbind</name>
        <briefdescription>
<para>Unbinds this <computeroutput><ref refid="dc/de2/a00024" kindref="compound">Object</ref></computeroutput> which is equivalent to binding ID 0. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dc/de2/a00024_a9a59b47f57c7a7e83ee9d268f692cc4d_1a9a59b47f57c7a7e83ee9d268f692cc4d" kindref="member">Object::bind() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/de2/a00024_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d2c/a00072_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::Object::getID</definition>
        <argsstring>() const </argsstring>
        <name>getID</name>
        <briefdescription>
<para>Retrieves the current ID that this <computeroutput><ref refid="dc/de2/a00024" kindref="compound">Object</ref></computeroutput> represents. </para>        </briefdescription>
        <detaileddescription>
<para>The ID is an unsigned number that acts like a pointer to OpenGL memory. It is assigned when <ref refid="dc/de2/a00024_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> is called. </para><para>If it is 0, the <computeroutput><ref refid="dc/de2/a00024" kindref="compound">Object</ref></computeroutput> is considered uncreated. </para><para>When using <ref refid="dc/de2/a00024_a9a59b47f57c7a7e83ee9d268f692cc4d_1a9a59b47f57c7a7e83ee9d268f692cc4d" kindref="member">Object::bind() const </ref>it will bind to this ID. <ref refid="dc/de2/a00024_af36391f915aeed8452b6f21e926932f2_1af36391f915aeed8452b6f21e926932f2" kindref="member">Object::unbind() const </ref>will bind to ID 0, which is the equivelant of a null pointer. <simplesect kind="return"><para>The ID represented by this <computeroutput><ref refid="dc/de2/a00024" kindref="compound">Object</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/de2/a00024_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Object::operator==</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="dc/de2/a00024" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para>Their ID is compared. <simplesect kind="see"><para><ref refid="dc/de2/a00024_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/de2/a00024_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/de2/a00024_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Object::operator!=</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="dc/de2/a00024" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para>Their ID is compared. <simplesect kind="see"><para><ref refid="dc/de2/a00024_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/de2/a00024_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="116" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="de/d8c/a00036_1a5ddabe55794f5233b19c91e303aef45b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::VertexArray::bindIndex</definition>
        <argsstring>(const Index &amp;id) const </argsstring>
        <name>bindIndex</name>
        <reimplements refid="dc/de2/a00024_a45afac15d5bd595db56bad1a096befce_1a45afac15d5bd595db56bad1a096befce">bindIndex</reimplements>
        <param>
          <type>const <ref refid="d6/d2c/a00072_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Intended to be overloaded to bind to a certain index. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="dc/de2/a00024_a9a59b47f57c7a7e83ee9d268f692cc4d_1a9a59b47f57c7a7e83ee9d268f692cc4d" kindref="member">Object::bind() const </ref>and <ref refid="dc/de2/a00024_af36391f915aeed8452b6f21e926932f2_1af36391f915aeed8452b6f21e926932f2" kindref="member">Object::unbind() const </ref>both use this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to bind to. If it is 0, it needs to be unbinded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="344" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="dc/de2/a00024_a5c44ad260b3bd8a5825c434037d5f89f_1a5c44ad260b3bd8a5825c434037d5f89f" prot="protected" static="no" mutable="no">
        <type><ref refid="d6/d2c/a00072_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::Object::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The ID of this `Object. </para>        </briefdescription>
        <detaileddescription>
<para>` Should be set in <ref refid="dc/de2/a00024_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> and become 0 in <ref refid="dc/de2/a00024_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80" kindref="member">Object::destroy()</ref> </para><para><ref refid="dc/de2/a00024_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const </ref>returns this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="123" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="d8/d84/a00001_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>Create a VBO class </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <inheritancegraph>
      <node id="419">
        <label>mc::gfx::VertexArray</label>
        <link refid="de/d8c/a00036"/>
        <childnode refid="420" relation="public-inheritance">
        </childnode>
      </node>
      <node id="420">
        <label>mc::gfx::Object</label>
        <link refid="dc/de2/a00024"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="421">
        <label>mc::gfx::VertexArray</label>
        <link refid="de/d8c/a00036"/>
        <childnode refid="422" relation="public-inheritance">
        </childnode>
      </node>
      <node id="422">
        <label>mc::gfx::Object</label>
        <link refid="dc/de2/a00024"/>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/Buffer.h" line="321" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="321" bodyend="345"/>
    <listofallmembers>
      <member refid="dc/de2/a00024_a9a59b47f57c7a7e83ee9d268f692cc4d_1a9a59b47f57c7a7e83ee9d268f692cc4d" prot="public" virt="non-virtual"><scope>mc::gfx::VertexArray</scope><name>bind</name></member>
      <member refid="de/d8c/a00036_1a5ddabe55794f5233b19c91e303aef45b" prot="private" virt="virtual"><scope>mc::gfx::VertexArray</scope><name>bindIndex</name></member>
      <member refid="de/d8c/a00036_a1f554270bb87473ae91fc29c28739680_1a1f554270bb87473ae91fc29c28739680" prot="public" virt="virtual"><scope>mc::gfx::VertexArray</scope><name>destroy</name></member>
      <member refid="de/d8c/a00036_ad408ad5e716ae92b3c00bea9fe316ba1_1ad408ad5e716ae92b3c00bea9fe316ba1" prot="public" virt="non-virtual"><scope>mc::gfx::VertexArray</scope><name>draw</name></member>
      <member refid="dc/de2/a00024_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" prot="public" virt="non-virtual"><scope>mc::gfx::VertexArray</scope><name>getID</name></member>
      <member refid="dc/de2/a00024_a5c44ad260b3bd8a5825c434037d5f89f_1a5c44ad260b3bd8a5825c434037d5f89f" prot="protected" virt="non-virtual"><scope>mc::gfx::VertexArray</scope><name>id</name></member>
      <member refid="de/d8c/a00036_ae3f8bd0a9fabf70173d798b121d4bce6_1ae3f8bd0a9fabf70173d798b121d4bce6" prot="public" virt="non-virtual"><scope>mc::gfx::VertexArray</scope><name>indiceNumber</name></member>
      <member refid="de/d8c/a00036_a29849c712c9ba15237c606c0f37f9000_1a29849c712c9ba15237c606c0f37f9000" prot="public" virt="virtual"><scope>mc::gfx::VertexArray</scope><name>init</name></member>
      <member refid="de/d8c/a00036_a269ec0a5559befdcc36c8f31a044859a_1a269ec0a5559befdcc36c8f31a044859a" prot="public" virt="virtual"><scope>mc::gfx::VertexArray</scope><name>isCreated</name></member>
      <member refid="de/d8c/a00036_aa6f40dda3f77ffc4ab7066cc7fc57c83_1aa6f40dda3f77ffc4ab7066cc7fc57c83" prot="public" virt="non-virtual"><scope>mc::gfx::VertexArray</scope><name>loadIndices</name></member>
      <member refid="de/d8c/a00036_ace12bc77e046bc67f8079312495072d1_1ace12bc77e046bc67f8079312495072d1" prot="public" virt="non-virtual"><scope>mc::gfx::VertexArray</scope><name>loadVertices</name></member>
      <member refid="de/d8c/a00036_a6eb1617ac03722773c4e23ca6cadaf37_1a6eb1617ac03722773c4e23ca6cadaf37" prot="public" virt="non-virtual"><scope>mc::gfx::VertexArray</scope><name>operator!=</name></member>
      <member refid="dc/de2/a00024_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::Object::"><scope>mc::gfx::VertexArray</scope><name>operator!=</name></member>
      <member refid="de/d8c/a00036_a291b95f99b42fdb0e36011f4bf2ea8d6_1a291b95f99b42fdb0e36011f4bf2ea8d6" prot="public" virt="non-virtual"><scope>mc::gfx::VertexArray</scope><name>operator==</name></member>
      <member refid="dc/de2/a00024_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::Object::"><scope>mc::gfx::VertexArray</scope><name>operator==</name></member>
      <member refid="de/d8c/a00036_ab8a6547ad57458817add902eafa9a01c_1ab8a6547ad57458817add902eafa9a01c" prot="public" virt="non-virtual"><scope>mc::gfx::VertexArray</scope><name>storeDataInAttributeList</name></member>
      <member refid="dc/de2/a00024_af36391f915aeed8452b6f21e926932f2_1af36391f915aeed8452b6f21e926932f2" prot="public" virt="non-virtual"><scope>mc::gfx::VertexArray</scope><name>unbind</name></member>
      <member refid="de/d8c/a00036_adb5e75902d33d713ffa56a6d8af4d8c9_1adb5e75902d33d713ffa56a6d8af4d8c9" prot="public" virt="non-virtual"><scope>mc::gfx::VertexArray</scope><name>vertexNumber</name></member>
      <member refid="dc/de2/a00024_a4ea5dacb16804b43f4be8c2567bbd48b_1a4ea5dacb16804b43f4be8c2567bbd48b" prot="public" virt="virtual"><scope>mc::gfx::VertexArray</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
