<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="df/d61/a00031" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::ogl::QueryObject</compoundname>
    <basecompoundref refid="d0/d33/a00027" prot="public" virt="non-virtual">mc::gfx::ogl::Object</basecompoundref>
    <includes refid="d5/de0/a00050" local="no">OGL.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="df/d61/a00031_a6169755853f4d32d4cb2e760a3c4611a_1a6169755853f4d32d4cb2e760a3c4611a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::QueryObject::begin</definition>
        <argsstring>(const Enum &amp;target)</argsstring>
        <name>begin</name>
        <param>
          <type>const <ref refid="d9/da4/a00078_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>This <computeroutput><ref refid="df/d61/a00031" kindref="compound">QueryObject</ref></computeroutput> will begin querying data for a specified target. </para>        </briefdescription>
        <detaileddescription>
<para>Replacement for the <ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>function. </para><para>The results can be queried with one of the <computeroutput><ref refid="df/d61/a00031_ab0a4f8d757337e338d1660ecbd292d89_1ab0a4f8d757337e338d1660ecbd292d89" kindref="member">QueryObject::get</ref></computeroutput> funcitons. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>THe kind of data to query. Can not be GL_TIMESTAMP. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glBeginQuery">https://www.opengl.org/wiki/GLAPI/glBeginQuery</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_af1063187b3eca96559c4e846c9755d90_1af1063187b3eca96559c4e846c9755d90" kindref="member">QueryObject::counter()</ref> </para></simplesect>
<simplesect kind="attention"><para>When you use this function make sure to also call <ref refid="df/d61/a00031_adcdf9a7eddfce7d465a012a5f1762c6e_1adcdf9a7eddfce7d465a012a5f1762c6e" kindref="member">QueryObject::end(const Enum&amp;)</ref> eventually </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_adcdf9a7eddfce7d465a012a5f1762c6e_1adcdf9a7eddfce7d465a012a5f1762c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::QueryObject::end</definition>
        <argsstring>(const Enum &amp;target)</argsstring>
        <name>end</name>
        <param>
          <type>const <ref refid="d9/da4/a00078_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Stops querying data for a certain target. </para>        </briefdescription>
        <detaileddescription>
<para>Replacement for the <ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>function </para><para>The results can be queried with one of the <computeroutput><ref refid="df/d61/a00031_ab0a4f8d757337e338d1660ecbd292d89_1ab0a4f8d757337e338d1660ecbd292d89" kindref="member">QueryObject::get</ref></computeroutput> funcitons. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The kind of data being queried. Can not be GL_TIMESTAMP </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glBeginQuery">https://www.opengl.org/wiki/GLAPI/glBeginQuery</ulink> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If QueryObject::begin(const Enum&amp; was never called) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_ab0a4f8d757337e338d1660ecbd292d89_1ab0a4f8d757337e338d1660ecbd292d89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::QueryObject::get</definition>
        <argsstring>(const Enum &amp;name, int *data) const </argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="d9/da4/a00078_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Retrieves data from a begin/end pair. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the results you want to retrieve. Must be GL_QUERY_RESULT, GL_QUERY_RESULT_NO_WAIT​, or GL_QUERY_RESULT_AVAILABLE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to put the data into. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a6169755853f4d32d4cb2e760a3c4611a_1a6169755853f4d32d4cb2e760a3c4611a" kindref="member">QueryObject::begin(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_adcdf9a7eddfce7d465a012a5f1762c6e_1adcdf9a7eddfce7d465a012a5f1762c6e" kindref="member">QueryObject::end(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_af1063187b3eca96559c4e846c9755d90_1af1063187b3eca96559c4e846c9755d90" kindref="member">QueryObject::counter()</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glGetQueryObject">https://www.opengl.org/wiki/GLAPI/glGetQueryObject</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_a5b5425b4101322760ccb29b5e734f36c_1a5b5425b4101322760ccb29b5e734f36c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::QueryObject::get</definition>
        <argsstring>(const Enum &amp;name, unsigned int *data) const </argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="d9/da4/a00078_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Retrieves data from a begin/end pair. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the results you want to retrieve. Must be GL_QUERY_RESULT, GL_QUERY_RESULT_NO_WAIT​, or GL_QUERY_RESULT_AVAILABLE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to put the data into. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a6169755853f4d32d4cb2e760a3c4611a_1a6169755853f4d32d4cb2e760a3c4611a" kindref="member">QueryObject::begin(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_adcdf9a7eddfce7d465a012a5f1762c6e_1adcdf9a7eddfce7d465a012a5f1762c6e" kindref="member">QueryObject::end(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_af1063187b3eca96559c4e846c9755d90_1af1063187b3eca96559c4e846c9755d90" kindref="member">QueryObject::counter()</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glGetQueryObject">https://www.opengl.org/wiki/GLAPI/glGetQueryObject</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_a642702fa477b31ffaa66216fdb26fe8c_1a642702fa477b31ffaa66216fdb26fe8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::QueryObject::get</definition>
        <argsstring>(const Enum &amp;name, int64_t *data) const </argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="d9/da4/a00078_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Retrieves data from a begin/end pair. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the results you want to retrieve. Must be GL_QUERY_RESULT, GL_QUERY_RESULT_NO_WAIT​, or GL_QUERY_RESULT_AVAILABLE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to put the data into. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a6169755853f4d32d4cb2e760a3c4611a_1a6169755853f4d32d4cb2e760a3c4611a" kindref="member">QueryObject::begin(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_adcdf9a7eddfce7d465a012a5f1762c6e_1adcdf9a7eddfce7d465a012a5f1762c6e" kindref="member">QueryObject::end(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_af1063187b3eca96559c4e846c9755d90_1af1063187b3eca96559c4e846c9755d90" kindref="member">QueryObject::counter()</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glGetQueryObject">https://www.opengl.org/wiki/GLAPI/glGetQueryObject</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_acf6034880bc740760b754c638e9e7e21_1acf6034880bc740760b754c638e9e7e21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::QueryObject::get</definition>
        <argsstring>(const Enum &amp;name, uint64_t *data) const </argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="d9/da4/a00078_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Retrieves data from a begin/end pair. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the results you want to retrieve. Must be GL_QUERY_RESULT, GL_QUERY_RESULT_NO_WAIT​, or GL_QUERY_RESULT_AVAILABLE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to put the data into. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a6169755853f4d32d4cb2e760a3c4611a_1a6169755853f4d32d4cb2e760a3c4611a" kindref="member">QueryObject::begin(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_adcdf9a7eddfce7d465a012a5f1762c6e_1adcdf9a7eddfce7d465a012a5f1762c6e" kindref="member">QueryObject::end(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_af1063187b3eca96559c4e846c9755d90_1af1063187b3eca96559c4e846c9755d90" kindref="member">QueryObject::counter()</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glGetQueryObject">https://www.opengl.org/wiki/GLAPI/glGetQueryObject</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_af1063187b3eca96559c4e846c9755d90_1af1063187b3eca96559c4e846c9755d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::QueryObject::counter</definition>
        <argsstring>()</argsstring>
        <name>counter</name>
        <briefdescription>
<para>Records the current GPU time into this `QueryObject. </para>        </briefdescription>
        <detaileddescription>
<para>` This returns immediately. </para><para>Can be used in conjunction with <ref refid="df/d61/a00031_a6169755853f4d32d4cb2e760a3c4611a_1a6169755853f4d32d4cb2e760a3c4611a" kindref="member">QueryObject::begin(const Enum&amp;)</ref> with a target of <computeroutput>GL_TIME_ELAPSED</computeroutput> <simplesect kind="see"><para><ref refid="df/d61/a00031_adcdf9a7eddfce7d465a012a5f1762c6e_1adcdf9a7eddfce7d465a012a5f1762c6e" kindref="member">QueryObject::end(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_acf6034880bc740760b754c638e9e7e21_1acf6034880bc740760b754c638e9e7e21" kindref="member">QueryObject::get(const Enum&amp;, uint64_t*) const</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glQueryCounter">https://www.opengl.org/wiki/GLAPI/glQueryCounter</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_a4904b54134ba156406775f51d5d84497_1a4904b54134ba156406775f51d5d84497" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::QueryObject::init</definition>
        <argsstring>() final</argsstring>
        <name>init</name>
        <reimplements refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c">init</reimplements>
        <briefdescription>
<para>Calls the corresponding glCreate* function and assigns an ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">Object::destroy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67" kindref="member">Object::isCreated() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_abe32a19bf3c65a1365a5041abd64847e_1abe32a19bf3c65a1365a5041abd64847e" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::QueryObject::destroy</definition>
        <argsstring>() final</argsstring>
        <name>destroy</name>
        <reimplements refid="d0/d33/a00027_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d">destroy</reimplements>
        <briefdescription>
<para>Calls the corresponding glDestroy* function and deletes the ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67" kindref="member">Object::isCreated() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet (<ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> has not been called) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_ad2187aa662f9092f16b2e9d90b422fe8_1ad2187aa662f9092f16b2e9d90b422fe8" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::QueryObject::isCreated</definition>
        <argsstring>() const  final</argsstring>
        <name>isCreated</name>
        <reimplements refid="d0/d33/a00027_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67">isCreated</reimplements>
        <briefdescription>
<para>Queries OpenGL whether this <ref refid="d0/d33/a00027" kindref="compound">Object</ref>&apos;s ID is a valid object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents memory </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::ogl::Object::getID</definition>
        <argsstring>() const </argsstring>
        <name>getID</name>
        <briefdescription>
<para>Retrieves the current ID that this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents. </para>        </briefdescription>
        <detaileddescription>
<para>The ID is an unsigned number that acts like a pointer to OpenGL memory. It is assigned when <ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> is called. </para><para>If it is 0, the <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> is considered uncreated. </para><para>When using <ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>it will bind to this ID. <ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>will bind to ID 0, which is the equivelant of a null pointer. <simplesect kind="return"><para>The ID represented by this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Object::operator==</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Object::operator!=</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="162" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="df/d61/a00031_1aa2aa180de0c314967fef3dc1f506695f" prot="private" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::QueryObject::bind</definition>
        <argsstring>() const  final</argsstring>
        <name>bind</name>
        <reimplements refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1">bind</reimplements>
        <briefdescription>
<para>Binds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> to be used in an OpenGL function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_1ad05128a71051c75e7c6a66bf135f4ce5" prot="private" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::QueryObject::unbind</definition>
        <argsstring>() const  final</argsstring>
        <name>unbind</name>
        <reimplements refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63">unbind</reimplements>
        <briefdescription>
<para>Unbinds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> which is equivalent to binding ID 0. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_1a932416b371291daf75b2c13f8b6714f3" prot="private" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::QueryObject::bindIndex</definition>
        <argsstring>(const Index &amp;id) const  final</argsstring>
        <name>bindIndex</name>
        <reimplements refid="d0/d33/a00027_a969d8bf457ee31a5cbca56c64f054e15_1a969d8bf457ee31a5cbca56c64f054e15">bindIndex</reimplements>
        <param>
          <type>const <ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Intended to be overloaded to bind to a certain index. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>and <ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>both use this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to bind to. If it is 0, it needs to be unbinded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="267" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d0/d33/a00027_aa6f2acefb1ac01ff347ff593738eab46_1aa6f2acefb1ac01ff347ff593738eab46" prot="protected" static="no" mutable="no">
        <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::ogl::Object::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The ID of this `Object. </para>        </briefdescription>
        <detaileddescription>
<para>` Should be set in <ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> and become 0 in <ref refid="d0/d33/a00027_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">Object::destroy()</ref> </para><para><ref refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const </ref>returns this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="169" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Special object that is used for asynchronous queries of information from the GPU. </para>    </briefdescription>
    <detaileddescription>
<para>Even though it extends <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> it does not implement the <ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>or <computeroutput>unbind()</computeroutput> functions. Instead, the <computeroutput><ref refid="df/d61/a00031" kindref="compound">QueryObject</ref></computeroutput> uses the <ref refid="df/d61/a00031_a6169755853f4d32d4cb2e760a3c4611a_1a6169755853f4d32d4cb2e760a3c4611a" kindref="member">QueryObject::begin(const Enum&amp;)</ref> and <ref refid="df/d61/a00031_adcdf9a7eddfce7d465a012a5f1762c6e_1adcdf9a7eddfce7d465a012a5f1762c6e" kindref="member">QueryObject::end(const Enum&amp;)</ref> functions. <simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/Query_Object">https://www.opengl.org/wiki/Query_Object</ulink> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="480">
        <label>mc::gfx::ogl::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
      <node id="479">
        <label>mc::gfx::ogl::QueryObject</label>
        <link refid="df/d61/a00031"/>
        <childnode refid="480" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="482">
        <label>mc::gfx::ogl::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
      <node id="481">
        <label>mc::gfx::ogl::QueryObject</label>
        <link refid="df/d61/a00031"/>
        <childnode refid="482" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/OGL.h" line="188" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="188" bodyend="268"/>
    <listofallmembers>
      <member refid="df/d61/a00031_a6169755853f4d32d4cb2e760a3c4611a_1a6169755853f4d32d4cb2e760a3c4611a" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>begin</name></member>
      <member refid="df/d61/a00031_1aa2aa180de0c314967fef3dc1f506695f" prot="private" virt="virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>bind</name></member>
      <member refid="df/d61/a00031_1a932416b371291daf75b2c13f8b6714f3" prot="private" virt="virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>bindIndex</name></member>
      <member refid="df/d61/a00031_af1063187b3eca96559c4e846c9755d90_1af1063187b3eca96559c4e846c9755d90" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>counter</name></member>
      <member refid="df/d61/a00031_abe32a19bf3c65a1365a5041abd64847e_1abe32a19bf3c65a1365a5041abd64847e" prot="public" virt="virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>destroy</name></member>
      <member refid="df/d61/a00031_adcdf9a7eddfce7d465a012a5f1762c6e_1adcdf9a7eddfce7d465a012a5f1762c6e" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>end</name></member>
      <member refid="df/d61/a00031_ab0a4f8d757337e338d1660ecbd292d89_1ab0a4f8d757337e338d1660ecbd292d89" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>get</name></member>
      <member refid="df/d61/a00031_a5b5425b4101322760ccb29b5e734f36c_1a5b5425b4101322760ccb29b5e734f36c" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>get</name></member>
      <member refid="df/d61/a00031_a642702fa477b31ffaa66216fdb26fe8c_1a642702fa477b31ffaa66216fdb26fe8c" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>get</name></member>
      <member refid="df/d61/a00031_acf6034880bc740760b754c638e9e7e21_1acf6034880bc740760b754c638e9e7e21" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>get</name></member>
      <member refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>getID</name></member>
      <member refid="d0/d33/a00027_aa6f2acefb1ac01ff347ff593738eab46_1aa6f2acefb1ac01ff347ff593738eab46" prot="protected" virt="non-virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>id</name></member>
      <member refid="df/d61/a00031_a4904b54134ba156406775f51d5d84497_1a4904b54134ba156406775f51d5d84497" prot="public" virt="virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>init</name></member>
      <member refid="df/d61/a00031_ad2187aa662f9092f16b2e9d90b422fe8_1ad2187aa662f9092f16b2e9d90b422fe8" prot="public" virt="virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>isCreated</name></member>
      <member refid="d0/d33/a00027_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>operator!=</name></member>
      <member refid="d0/d33/a00027_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>operator==</name></member>
      <member refid="df/d61/a00031_1ad05128a71051c75e7c6a66bf135f4ce5" prot="private" virt="virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>unbind</name></member>
      <member refid="d0/d33/a00027_a4bf5ddbce67658a6dd14bedfa00bcac5_1a4bf5ddbce67658a6dd14bedfa00bcac5" prot="public" virt="virtual"><scope>mc::gfx::ogl::QueryObject</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
