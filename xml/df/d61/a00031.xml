<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="df/d61/a00031" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::QueryObject</compoundname>
    <basecompoundref refid="d0/d33/a00027" prot="public" virt="non-virtual">mc::gfx::Object</basecompoundref>
    <includes refid="d6/d97/a00045" local="no">Buffer.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="df/d61/a00031_a79bdb0a7b5911b0e5088cd742487c77d_1a79bdb0a7b5911b0e5088cd742487c77d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::QueryObject::begin</definition>
        <argsstring>(const Enum &amp;target)</argsstring>
        <name>begin</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>This <computeroutput><ref refid="df/d61/a00031" kindref="compound">QueryObject</ref></computeroutput> will begin querying data for a specified target. </para>        </briefdescription>
        <detaileddescription>
<para>Replacement for the <ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const </ref>function. </para><para>The results can be queried with one of the <computeroutput><ref refid="df/d61/a00031_a5273f375615f4b9ea2d1590e5e47cf62_1a5273f375615f4b9ea2d1590e5e47cf62" kindref="member">QueryObject::get</ref></computeroutput> funcitons. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>THe kind of data to query. Can not be GL_TIMESTAMP. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glBeginQuery">https://www.opengl.org/wiki/GLAPI/glBeginQuery</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a1cab6c1be5cc8b3e3be0bd0d32e15ffb_1a1cab6c1be5cc8b3e3be0bd0d32e15ffb" kindref="member">QueryObject::counter()</ref> </para></simplesect>
<simplesect kind="attention"><para>When you use this function make sure to also call <ref refid="df/d61/a00031_a99ec59a04ffacd80718403a475619d31_1a99ec59a04ffacd80718403a475619d31" kindref="member">QueryObject::end(const Enum&amp;)</ref> eventually </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_a99ec59a04ffacd80718403a475619d31_1a99ec59a04ffacd80718403a475619d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::QueryObject::end</definition>
        <argsstring>(const Enum &amp;target)</argsstring>
        <name>end</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Stops querying data for a certain target. </para>        </briefdescription>
        <detaileddescription>
<para>Replacement for the <ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind() const </ref>function </para><para>The results can be queried with one of the <computeroutput><ref refid="df/d61/a00031_a5273f375615f4b9ea2d1590e5e47cf62_1a5273f375615f4b9ea2d1590e5e47cf62" kindref="member">QueryObject::get</ref></computeroutput> funcitons. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The kind of data being queried. Can not be GL_TIMESTAMP </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glBeginQuery">https://www.opengl.org/wiki/GLAPI/glBeginQuery</ulink> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If QueryObject::begin(const Enum&amp; was never called) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_a5273f375615f4b9ea2d1590e5e47cf62_1a5273f375615f4b9ea2d1590e5e47cf62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::QueryObject::get</definition>
        <argsstring>(const Enum &amp;name, int *data) const </argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Retrieves data from a begin/end pair. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the results you want to retrieve. Must be GL_QUERY_RESULT, GL_QUERY_RESULT_NO_WAIT​, or GL_QUERY_RESULT_AVAILABLE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to put the data into. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a79bdb0a7b5911b0e5088cd742487c77d_1a79bdb0a7b5911b0e5088cd742487c77d" kindref="member">QueryObject::begin(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a99ec59a04ffacd80718403a475619d31_1a99ec59a04ffacd80718403a475619d31" kindref="member">QueryObject::end(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a1cab6c1be5cc8b3e3be0bd0d32e15ffb_1a1cab6c1be5cc8b3e3be0bd0d32e15ffb" kindref="member">QueryObject::counter()</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glGetQueryObject">https://www.opengl.org/wiki/GLAPI/glGetQueryObject</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_a37b6f23b22e9513386e9bb7818090ac4_1a37b6f23b22e9513386e9bb7818090ac4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::QueryObject::get</definition>
        <argsstring>(const Enum &amp;name, unsigned int *data) const </argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Retrieves data from a begin/end pair. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the results you want to retrieve. Must be GL_QUERY_RESULT, GL_QUERY_RESULT_NO_WAIT​, or GL_QUERY_RESULT_AVAILABLE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to put the data into. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a79bdb0a7b5911b0e5088cd742487c77d_1a79bdb0a7b5911b0e5088cd742487c77d" kindref="member">QueryObject::begin(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a99ec59a04ffacd80718403a475619d31_1a99ec59a04ffacd80718403a475619d31" kindref="member">QueryObject::end(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a1cab6c1be5cc8b3e3be0bd0d32e15ffb_1a1cab6c1be5cc8b3e3be0bd0d32e15ffb" kindref="member">QueryObject::counter()</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glGetQueryObject">https://www.opengl.org/wiki/GLAPI/glGetQueryObject</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_ab8c8460e07615c31fd4a450d7634e7d5_1ab8c8460e07615c31fd4a450d7634e7d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::QueryObject::get</definition>
        <argsstring>(const Enum &amp;name, int64_t *data) const </argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Retrieves data from a begin/end pair. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the results you want to retrieve. Must be GL_QUERY_RESULT, GL_QUERY_RESULT_NO_WAIT​, or GL_QUERY_RESULT_AVAILABLE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to put the data into. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a79bdb0a7b5911b0e5088cd742487c77d_1a79bdb0a7b5911b0e5088cd742487c77d" kindref="member">QueryObject::begin(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a99ec59a04ffacd80718403a475619d31_1a99ec59a04ffacd80718403a475619d31" kindref="member">QueryObject::end(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a1cab6c1be5cc8b3e3be0bd0d32e15ffb_1a1cab6c1be5cc8b3e3be0bd0d32e15ffb" kindref="member">QueryObject::counter()</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glGetQueryObject">https://www.opengl.org/wiki/GLAPI/glGetQueryObject</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_ac3077e48f04e3673712f8fe5248c1cfd_1ac3077e48f04e3673712f8fe5248c1cfd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::QueryObject::get</definition>
        <argsstring>(const Enum &amp;name, uint64_t *data) const </argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Retrieves data from a begin/end pair. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the results you want to retrieve. Must be GL_QUERY_RESULT, GL_QUERY_RESULT_NO_WAIT​, or GL_QUERY_RESULT_AVAILABLE </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to put the data into. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a79bdb0a7b5911b0e5088cd742487c77d_1a79bdb0a7b5911b0e5088cd742487c77d" kindref="member">QueryObject::begin(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a99ec59a04ffacd80718403a475619d31_1a99ec59a04ffacd80718403a475619d31" kindref="member">QueryObject::end(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_a1cab6c1be5cc8b3e3be0bd0d32e15ffb_1a1cab6c1be5cc8b3e3be0bd0d32e15ffb" kindref="member">QueryObject::counter()</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glGetQueryObject">https://www.opengl.org/wiki/GLAPI/glGetQueryObject</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_a1cab6c1be5cc8b3e3be0bd0d32e15ffb_1a1cab6c1be5cc8b3e3be0bd0d32e15ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::QueryObject::counter</definition>
        <argsstring>()</argsstring>
        <name>counter</name>
        <briefdescription>
<para>Records the current GPU time into this `QueryObject. </para>        </briefdescription>
        <detaileddescription>
<para>` This returns immediately. </para><para>Can be used in conjunction with <ref refid="df/d61/a00031_a79bdb0a7b5911b0e5088cd742487c77d_1a79bdb0a7b5911b0e5088cd742487c77d" kindref="member">QueryObject::begin(const Enum&amp;)</ref> with a target of <computeroutput>GL_TIME_ELAPSED</computeroutput> <simplesect kind="see"><para><ref refid="df/d61/a00031_a99ec59a04ffacd80718403a475619d31_1a99ec59a04ffacd80718403a475619d31" kindref="member">QueryObject::end(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d61/a00031_ac3077e48f04e3673712f8fe5248c1cfd_1ac3077e48f04e3673712f8fe5248c1cfd" kindref="member">QueryObject::get(const Enum&amp;, uint64_t*) const</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glQueryCounter">https://www.opengl.org/wiki/GLAPI/glQueryCounter</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_a82cd27fe5528545930d516ed60e04e21_1a82cd27fe5528545930d516ed60e04e21" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::QueryObject::init</definition>
        <argsstring>() final</argsstring>
        <name>init</name>
        <reimplements refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914">init</reimplements>
        <briefdescription>
<para>Calls the corresponding glCreate* function and assigns an ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80" kindref="member">Object::destroy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76" kindref="member">Object::isCreated() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_a52094232aec69733ab764e0a30fcc35a_1a52094232aec69733ab764e0a30fcc35a" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::QueryObject::destroy</definition>
        <argsstring>() final</argsstring>
        <name>destroy</name>
        <reimplements refid="d0/d33/a00027_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80">destroy</reimplements>
        <briefdescription>
<para>Calls the corresponding glDestroy* function and deletes the ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76" kindref="member">Object::isCreated() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet (<ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> has not been called) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_affbc309af0cf63f2b3c8a3977b141573_1affbc309af0cf63f2b3c8a3977b141573" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool mc::gfx::QueryObject::isCreated</definition>
        <argsstring>() const  final</argsstring>
        <name>isCreated</name>
        <reimplements refid="d0/d33/a00027_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76">isCreated</reimplements>
        <briefdescription>
<para>Queries OpenGL whether this <ref refid="d0/d33/a00027" kindref="compound">Object</ref>&apos;s ID is a valid object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents memory </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::Object::getID</definition>
        <argsstring>() const </argsstring>
        <name>getID</name>
        <briefdescription>
<para>Retrieves the current ID that this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents. </para>        </briefdescription>
        <detaileddescription>
<para>The ID is an unsigned number that acts like a pointer to OpenGL memory. It is assigned when <ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> is called. </para><para>If it is 0, the <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> is considered uncreated. </para><para>When using <ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const </ref>it will bind to this ID. <ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind() const </ref>will bind to ID 0, which is the equivelant of a null pointer. <simplesect kind="return"><para>The ID represented by this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Object::operator==</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para>Their ID is compared. <simplesect kind="see"><para><ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Object::operator!=</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para>Their ID is compared. <simplesect kind="see"><para><ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="116" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="df/d61/a00031_1a055cd452ca943cb84a4663d5dfca4f61" prot="private" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::QueryObject::bind</definition>
        <argsstring>() const  final</argsstring>
        <name>bind</name>
        <reimplements refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458">bind</reimplements>
        <briefdescription>
<para>Binds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> to be used in an OpenGL function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_1a509b3f1d7b32a0b12060535698889b30" prot="private" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::QueryObject::unbind</definition>
        <argsstring>() const  final</argsstring>
        <name>unbind</name>
        <reimplements refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596">unbind</reimplements>
        <briefdescription>
<para>Unbinds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> which is equivalent to binding ID 0. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="df/d61/a00031_1abf5494d78d1a8533ec31d92adb28dee6" prot="private" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::QueryObject::bindIndex</definition>
        <argsstring>(const Index &amp;id) const  final</argsstring>
        <name>bindIndex</name>
        <reimplements refid="d0/d33/a00027_a45afac15d5bd595db56bad1a096befce_1a45afac15d5bd595db56bad1a096befce">bindIndex</reimplements>
        <param>
          <type>const <ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Intended to be overloaded to bind to a certain index. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const </ref>and <ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind() const </ref>both use this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to bind to. If it is 0, it needs to be unbinded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="218" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d0/d33/a00027_a5c44ad260b3bd8a5825c434037d5f89f_1a5c44ad260b3bd8a5825c434037d5f89f" prot="protected" static="no" mutable="no">
        <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::Object::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The ID of this `Object. </para>        </briefdescription>
        <detaileddescription>
<para>` Should be set in <ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> and become 0 in <ref refid="d0/d33/a00027_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80" kindref="member">Object::destroy()</ref> </para><para><ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const </ref>returns this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="123" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Special object that is used for asynchronous queries of information from the GPU. </para>    </briefdescription>
    <detaileddescription>
<para>Even though it extends <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> it does not implement the <ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const </ref>or <computeroutput>unbind()</computeroutput> functions. Instead, the <computeroutput><ref refid="df/d61/a00031" kindref="compound">QueryObject</ref></computeroutput> uses the <ref refid="df/d61/a00031_a79bdb0a7b5911b0e5088cd742487c77d_1a79bdb0a7b5911b0e5088cd742487c77d" kindref="member">QueryObject::begin(const Enum&amp;)</ref> and <ref refid="df/d61/a00031_a99ec59a04ffacd80718403a475619d31_1a99ec59a04ffacd80718403a475619d31" kindref="member">QueryObject::end(const Enum&amp;)</ref> functions. <simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/Query_Object">https://www.opengl.org/wiki/Query_Object</ulink> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="469">
        <label>mc::gfx::QueryObject</label>
        <link refid="df/d61/a00031"/>
        <childnode refid="470" relation="public-inheritance">
        </childnode>
      </node>
      <node id="470">
        <label>mc::gfx::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="471">
        <label>mc::gfx::QueryObject</label>
        <link refid="df/d61/a00031"/>
        <childnode refid="472" relation="public-inheritance">
        </childnode>
      </node>
      <node id="472">
        <label>mc::gfx::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/Buffer.h" line="142" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="142" bodyend="219"/>
    <listofallmembers>
      <member refid="df/d61/a00031_a79bdb0a7b5911b0e5088cd742487c77d_1a79bdb0a7b5911b0e5088cd742487c77d" prot="public" virt="non-virtual"><scope>mc::gfx::QueryObject</scope><name>begin</name></member>
      <member refid="df/d61/a00031_1a055cd452ca943cb84a4663d5dfca4f61" prot="private" virt="virtual"><scope>mc::gfx::QueryObject</scope><name>bind</name></member>
      <member refid="df/d61/a00031_1abf5494d78d1a8533ec31d92adb28dee6" prot="private" virt="virtual"><scope>mc::gfx::QueryObject</scope><name>bindIndex</name></member>
      <member refid="df/d61/a00031_a1cab6c1be5cc8b3e3be0bd0d32e15ffb_1a1cab6c1be5cc8b3e3be0bd0d32e15ffb" prot="public" virt="non-virtual"><scope>mc::gfx::QueryObject</scope><name>counter</name></member>
      <member refid="df/d61/a00031_a52094232aec69733ab764e0a30fcc35a_1a52094232aec69733ab764e0a30fcc35a" prot="public" virt="virtual"><scope>mc::gfx::QueryObject</scope><name>destroy</name></member>
      <member refid="df/d61/a00031_a99ec59a04ffacd80718403a475619d31_1a99ec59a04ffacd80718403a475619d31" prot="public" virt="non-virtual"><scope>mc::gfx::QueryObject</scope><name>end</name></member>
      <member refid="df/d61/a00031_a5273f375615f4b9ea2d1590e5e47cf62_1a5273f375615f4b9ea2d1590e5e47cf62" prot="public" virt="non-virtual"><scope>mc::gfx::QueryObject</scope><name>get</name></member>
      <member refid="df/d61/a00031_a37b6f23b22e9513386e9bb7818090ac4_1a37b6f23b22e9513386e9bb7818090ac4" prot="public" virt="non-virtual"><scope>mc::gfx::QueryObject</scope><name>get</name></member>
      <member refid="df/d61/a00031_ab8c8460e07615c31fd4a450d7634e7d5_1ab8c8460e07615c31fd4a450d7634e7d5" prot="public" virt="non-virtual"><scope>mc::gfx::QueryObject</scope><name>get</name></member>
      <member refid="df/d61/a00031_ac3077e48f04e3673712f8fe5248c1cfd_1ac3077e48f04e3673712f8fe5248c1cfd" prot="public" virt="non-virtual"><scope>mc::gfx::QueryObject</scope><name>get</name></member>
      <member refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" prot="public" virt="non-virtual"><scope>mc::gfx::QueryObject</scope><name>getID</name></member>
      <member refid="d0/d33/a00027_a5c44ad260b3bd8a5825c434037d5f89f_1a5c44ad260b3bd8a5825c434037d5f89f" prot="protected" virt="non-virtual"><scope>mc::gfx::QueryObject</scope><name>id</name></member>
      <member refid="df/d61/a00031_a82cd27fe5528545930d516ed60e04e21_1a82cd27fe5528545930d516ed60e04e21" prot="public" virt="virtual"><scope>mc::gfx::QueryObject</scope><name>init</name></member>
      <member refid="df/d61/a00031_affbc309af0cf63f2b3c8a3977b141573_1affbc309af0cf63f2b3c8a3977b141573" prot="public" virt="virtual"><scope>mc::gfx::QueryObject</scope><name>isCreated</name></member>
      <member refid="d0/d33/a00027_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" prot="public" virt="non-virtual"><scope>mc::gfx::QueryObject</scope><name>operator!=</name></member>
      <member refid="d0/d33/a00027_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" prot="public" virt="non-virtual"><scope>mc::gfx::QueryObject</scope><name>operator==</name></member>
      <member refid="df/d61/a00031_1a509b3f1d7b32a0b12060535698889b30" prot="private" virt="virtual"><scope>mc::gfx::QueryObject</scope><name>unbind</name></member>
      <member refid="d0/d33/a00027_a4ea5dacb16804b43f4be8c2567bbd48b_1a4ea5dacb16804b43f4be8c2567bbd48b" prot="public" virt="virtual"><scope>mc::gfx::QueryObject</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
