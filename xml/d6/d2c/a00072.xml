<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d6/d2c/a00072" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::ogl::Texture2D</compoundname>
    <basecompoundref refid="d4/d8c/a00035" prot="public" virt="non-virtual">mc::gfx::ogl::Object</basecompoundref>
    <derivedcompoundref refid="d7/dd4/a00013" prot="public" virt="non-virtual">mc::gfx::ColorAttachment</derivedcompoundref>
    <includes refid="d1/d1e/a00087" local="no">OGL.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d6/d2c/a00072_1a82ed12c0730f3af2a303da5d7f7f0e71" prot="private" static="no" mutable="no">
        <type><ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
        <definition>Enum mc::gfx::ogl::Texture2D::target</definition>
        <argsstring></argsstring>
        <name>target</name>
        <initializer>= GL_TEXTURE_2D</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="417" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d6/d2c/a00072_a929ca9ca3cea38576df023a0eec581f6_1a929ca9ca3cea38576df023a0eec581f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mc::gfx::ogl::Texture2D::Texture2D</definition>
        <argsstring>() noexcept</argsstring>
        <name>Texture2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_ac77b359d9898db4998cfba413c673b75_1ac77b359d9898db4998cfba413c673b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture2D::init</definition>
        <argsstring>() override</argsstring>
        <name>init</name>
        <reimplements refid="d4/d8c/a00035_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c">init</reimplements>
        <briefdescription>
<para>Calls the corresponding glCreate* function and assigns an ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">Object::destroy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67" kindref="member">Object::isCreated() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_a26f01cc5599cd297560c1ae23308e5f6_1a26f01cc5599cd297560c1ae23308e5f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture2D::destroy</definition>
        <argsstring>() override</argsstring>
        <name>destroy</name>
        <reimplements refid="d4/d8c/a00035_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d">destroy</reimplements>
        <briefdescription>
<para>Calls the corresponding glDestroy* function and deletes the ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67" kindref="member">Object::isCreated() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> has not been created yet (<ref refid="d4/d8c/a00035_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> has not been called) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_a015584f65a76a171745cd42e5877a785_1a015584f65a76a171745cd42e5877a785" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture2D::bind</definition>
        <argsstring>() const  override</argsstring>
        <name>bind</name>
        <reimplements refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1">bind</reimplements>
        <briefdescription>
<para>Binds this <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> to be used in an OpenGL function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> has not been created yet </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_a190559ffa83858e47581329fbb25debc_1a190559ffa83858e47581329fbb25debc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture2D::bind</definition>
        <argsstring>(const Index location) const </argsstring>
        <name>bind</name>
        <param>
          <type>const <ref refid="da/d72/a00124_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_aa12b4e90e3e89e8e9e0bc4baa46f4abb_1aa12b4e90e3e89e8e9e0bc4baa46f4abb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture2D::setData</definition>
        <argsstring>(const void *data, const Size width, const Size height, const Enum type=GL_FLOAT, const Enum format=GL_RGB, const Enum internalFormat=GL_RGB, const Index mipmapLevel=0)</argsstring>
        <name>setData</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="da/d72/a00124_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type>const <ref refid="da/d72/a00124_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>height</declname>
        </param>
        <param>
          <type>const <ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
          <declname>type</declname>
          <defval>GL_FLOAT</defval>
        </param>
        <param>
          <type>const <ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
          <declname>format</declname>
          <defval>GL_RGB</defval>
        </param>
        <param>
          <type>const <ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
          <declname>internalFormat</declname>
          <defval>GL_RGB</defval>
        </param>
        <param>
          <type>const <ref refid="da/d72/a00124_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>mipmapLevel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glTexImage2D">https://www.opengl.org/wiki/GLAPI/glTexImage2D</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_ad0f0fa67d39b5fa2f3c18cb5c898333f_1ad0f0fa67d39b5fa2f3c18cb5c898333f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture2D::setMultisampledData</definition>
        <argsstring>(const Size samples, const Size width, const Size height, const Enum internalFormat, const bool fixedSamples=true)</argsstring>
        <name>setMultisampledData</name>
        <param>
          <type>const <ref refid="da/d72/a00124_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>samples</declname>
        </param>
        <param>
          <type>const <ref refid="da/d72/a00124_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type>const <ref refid="da/d72/a00124_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>height</declname>
        </param>
        <param>
          <type>const <ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
          <declname>internalFormat</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>fixedSamples</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexImage2DMultisample.xhtml">https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexImage2DMultisample.xhtml</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_a41c0ba6234c679e3e30a84546344866e_1a41c0ba6234c679e3e30a84546344866e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture2D::setPixelStorage</definition>
        <argsstring>(const Enum alignment, const int number)</argsstring>
        <name>setPixelStorage</name>
        <param>
          <type>const <ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glPixelStore.xhtml">https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glPixelStore.xhtml</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_a779802d29b3ea152bcd49b9508e5bd42_1a779802d29b3ea152bcd49b9508e5bd42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture2D::setPixelStorage</definition>
        <argsstring>(const Enum alignment, const float number)</argsstring>
        <name>setPixelStorage</name>
        <param>
          <type>const <ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glPixelStore.xhtml">https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glPixelStore.xhtml</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="374" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_a74fb558f2a208ac8342559a966e239e3_1a74fb558f2a208ac8342559a966e239e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture2D::setPixelStorage</definition>
        <argsstring>(const Enum alignment, const bool value)</argsstring>
        <name>setPixelStorage</name>
        <param>
          <type>const <ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glPixelStore.xhtml">https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glPixelStore.xhtml</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_acfec83a385b0222cb0990b043d4aba7b_1acfec83a385b0222cb0990b043d4aba7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture2D::resetPixelStorage</definition>
        <argsstring>()</argsstring>
        <name>resetPixelStorage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d6/d2c/a00072_a41c0ba6234c679e3e30a84546344866e_1a41c0ba6234c679e3e30a84546344866e" kindref="member">Texture2D::setPixelStorage(const Enum, const int)</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glPixelStore.xhtml">https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glPixelStore.xhtml</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_ae9101da51834d1ca11e4e280d86df3fb_1ae9101da51834d1ca11e4e280d86df3fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture2D::generateMipmap</definition>
        <argsstring>()</argsstring>
        <name>generateMipmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glGenerateMipmap.xhtml">https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glGenerateMipmap.xhtml</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_a63cc3bae42290a289ec55fbc7e03efa0_1a63cc3bae42290a289ec55fbc7e03efa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture2D::setTarget</definition>
        <argsstring>(const Enum target)</argsstring>
        <name>setTarget</name>
        <param>
          <type>const <ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="395" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_a662e68b1a7d3c6ea7dbe8e35b4316dc4_1a662e68b1a7d3c6ea7dbe8e35b4316dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
        <definition>Enum&amp; mc::gfx::ogl::Texture2D::getTarget</definition>
        <argsstring>()</argsstring>
        <name>getTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_af23d01dc910d7d09726f8fbd9a969786_1af23d01dc910d7d09726f8fbd9a969786" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
        <definition>const Enum&amp; mc::gfx::ogl::Texture2D::getTarget</definition>
        <argsstring>() const </argsstring>
        <name>getTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_af6134256bdd34aa4659a2e7c87d4633f_1af6134256bdd34aa4659a2e7c87d4633f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Texture2D::isCreated</definition>
        <argsstring>() const  override</argsstring>
        <name>isCreated</name>
        <reimplements refid="d4/d8c/a00035_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67">isCreated</reimplements>
        <briefdescription>
<para>Queries OpenGL whether this <ref refid="d4/d8c/a00035" kindref="compound">Object</ref>&apos;s ID is a valid object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether this <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> represents memory </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_a1d93a16b3185c463e074496361ded18d_1a1d93a16b3185c463e074496361ded18d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture2D::setParameter</definition>
        <argsstring>(const Enum name, const int value)</argsstring>
        <name>setParameter</name>
        <param>
          <type>const <ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glTexParameter">https://www.opengl.org/wiki/GLAPI/glTexParameter</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="405" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_a541ba24748291d1fc6f10eef96ba9f4c_1a541ba24748291d1fc6f10eef96ba9f4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Texture2D::operator==</definition>
        <argsstring>(const Texture2D &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d6/d2c/a00072" kindref="compound">Texture2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d4/d8c/a00035_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/d2c/a00072_ac7c62851f3f1e494ed1001b1a0ea3e30_1ac7c62851f3f1e494ed1001b1a0ea3e30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Texture2D::operator!=</definition>
        <argsstring>(const Texture2D &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d6/d2c/a00072" kindref="compound">Texture2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d4/d8c/a00035_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="414" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d8c/a00035_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void mc::gfx::ogl::Object::unbind</definition>
        <argsstring>() const </argsstring>
        <name>unbind</name>
        <reimplementedby refid="dd/d32/a00041_1ad05128a71051c75e7c6a66bf135f4ce5">unbind</reimplementedby>
        <reimplementedby refid="d1/d84/a00052_1a91dc153976fbd78b0047c436c12967d6">unbind</reimplementedby>
        <briefdescription>
<para>Unbinds this <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> which is equivalent to binding ID 0. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d8c/a00035_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d72/a00124_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::ogl::Object::getID</definition>
        <argsstring>() const </argsstring>
        <name>getID</name>
        <briefdescription>
<para>Retrieves the current ID that this <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> represents. </para>        </briefdescription>
        <detaileddescription>
<para>The ID is an unsigned number that acts like a pointer to OpenGL memory. It is assigned when <ref refid="d4/d8c/a00035_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> is called. </para><para>If it is 0, the <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> is considered uncreated. </para><para>When using <ref refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>it will bind to this ID. <ref refid="d4/d8c/a00035_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>will bind to ID 0, which is the equivelant of a null pointer. <simplesect kind="return"><para>The ID represented by this <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d8c/a00035_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Object::operator==</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d4/d8c/a00035" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d4/d8c/a00035_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d8c/a00035_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Object::operator!=</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d4/d8c/a00035" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d4/d8c/a00035_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="190" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d6/d2c/a00072_1a53e62509466ef27b780036fd8c4bfb92" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture2D::bindIndex</definition>
        <argsstring>(const Index id) const  override</argsstring>
        <name>bindIndex</name>
        <reimplements refid="d4/d8c/a00035_a5f9f3150ac508ecf142eff4f1bc9f424_1a5f9f3150ac508ecf142eff4f1bc9f424">bindIndex</reimplements>
        <param>
          <type>const <ref refid="da/d72/a00124_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Intended to be overloaded to bind to a certain index. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>and <ref refid="d4/d8c/a00035_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>both use this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to bind to. If it is 0, it needs to be unbinded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="419" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d4/d8c/a00035_aa6f2acefb1ac01ff347ff593738eab46_1aa6f2acefb1ac01ff347ff593738eab46" prot="protected" static="no" mutable="no">
        <type><ref refid="da/d72/a00124_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::ogl::Object::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The ID of this `Object. </para>        </briefdescription>
        <detaileddescription>
<para>` Should be set in <ref refid="d4/d8c/a00035_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> and become 0 in <ref refid="d4/d8c/a00035_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">Object::destroy()</ref> </para><para><ref refid="d4/d8c/a00035_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const </ref>returns this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="197" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/Texture">https://www.opengl.org/wiki/Texture</ulink> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1082">
        <label>mc::gfx::ogl::Object</label>
        <link refid="d4/d8c/a00035"/>
      </node>
      <node id="1081">
        <label>mc::gfx::ogl::Texture2D</label>
        <link refid="d6/d2c/a00072"/>
        <childnode refid="1082" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1083">
        <label>mc::gfx::ColorAttachment</label>
        <link refid="d7/dd4/a00013"/>
        <childnode refid="1081" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1085">
        <label>mc::gfx::ogl::Object</label>
        <link refid="d4/d8c/a00035"/>
      </node>
      <node id="1084">
        <label>mc::gfx::ogl::Texture2D</label>
        <link refid="d6/d2c/a00072"/>
        <childnode refid="1085" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/OGL.h" line="343" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="343" bodyend="420"/>
    <listofallmembers>
      <member refid="d6/d2c/a00072_a015584f65a76a171745cd42e5877a785_1a015584f65a76a171745cd42e5877a785" prot="public" virt="virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>bind</name></member>
      <member refid="d6/d2c/a00072_a190559ffa83858e47581329fbb25debc_1a190559ffa83858e47581329fbb25debc" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>bind</name></member>
      <member refid="d6/d2c/a00072_1a53e62509466ef27b780036fd8c4bfb92" prot="private" virt="virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>bindIndex</name></member>
      <member refid="d6/d2c/a00072_a26f01cc5599cd297560c1ae23308e5f6_1a26f01cc5599cd297560c1ae23308e5f6" prot="public" virt="virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>destroy</name></member>
      <member refid="d6/d2c/a00072_ae9101da51834d1ca11e4e280d86df3fb_1ae9101da51834d1ca11e4e280d86df3fb" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>generateMipmap</name></member>
      <member refid="d4/d8c/a00035_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>getID</name></member>
      <member refid="d6/d2c/a00072_a662e68b1a7d3c6ea7dbe8e35b4316dc4_1a662e68b1a7d3c6ea7dbe8e35b4316dc4" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>getTarget</name></member>
      <member refid="d6/d2c/a00072_af23d01dc910d7d09726f8fbd9a969786_1af23d01dc910d7d09726f8fbd9a969786" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>getTarget</name></member>
      <member refid="d4/d8c/a00035_aa6f2acefb1ac01ff347ff593738eab46_1aa6f2acefb1ac01ff347ff593738eab46" prot="protected" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>id</name></member>
      <member refid="d6/d2c/a00072_ac77b359d9898db4998cfba413c673b75_1ac77b359d9898db4998cfba413c673b75" prot="public" virt="virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>init</name></member>
      <member refid="d6/d2c/a00072_af6134256bdd34aa4659a2e7c87d4633f_1af6134256bdd34aa4659a2e7c87d4633f" prot="public" virt="virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>isCreated</name></member>
      <member refid="d6/d2c/a00072_ac7c62851f3f1e494ed1001b1a0ea3e30_1ac7c62851f3f1e494ed1001b1a0ea3e30" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>operator!=</name></member>
      <member refid="d4/d8c/a00035_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::ogl::Object::"><scope>mc::gfx::ogl::Texture2D</scope><name>operator!=</name></member>
      <member refid="d6/d2c/a00072_a541ba24748291d1fc6f10eef96ba9f4c_1a541ba24748291d1fc6f10eef96ba9f4c" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>operator==</name></member>
      <member refid="d4/d8c/a00035_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::ogl::Object::"><scope>mc::gfx::ogl::Texture2D</scope><name>operator==</name></member>
      <member refid="d6/d2c/a00072_acfec83a385b0222cb0990b043d4aba7b_1acfec83a385b0222cb0990b043d4aba7b" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>resetPixelStorage</name></member>
      <member refid="d6/d2c/a00072_aa12b4e90e3e89e8e9e0bc4baa46f4abb_1aa12b4e90e3e89e8e9e0bc4baa46f4abb" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>setData</name></member>
      <member refid="d6/d2c/a00072_ad0f0fa67d39b5fa2f3c18cb5c898333f_1ad0f0fa67d39b5fa2f3c18cb5c898333f" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>setMultisampledData</name></member>
      <member refid="d6/d2c/a00072_a1d93a16b3185c463e074496361ded18d_1a1d93a16b3185c463e074496361ded18d" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>setParameter</name></member>
      <member refid="d6/d2c/a00072_a41c0ba6234c679e3e30a84546344866e_1a41c0ba6234c679e3e30a84546344866e" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>setPixelStorage</name></member>
      <member refid="d6/d2c/a00072_a779802d29b3ea152bcd49b9508e5bd42_1a779802d29b3ea152bcd49b9508e5bd42" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>setPixelStorage</name></member>
      <member refid="d6/d2c/a00072_a74fb558f2a208ac8342559a966e239e3_1a74fb558f2a208ac8342559a966e239e3" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>setPixelStorage</name></member>
      <member refid="d6/d2c/a00072_a63cc3bae42290a289ec55fbc7e03efa0_1a63cc3bae42290a289ec55fbc7e03efa0" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>setTarget</name></member>
      <member refid="d6/d2c/a00072_1a82ed12c0730f3af2a303da5d7f7f0e71" prot="private" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>target</name></member>
      <member refid="d6/d2c/a00072_a929ca9ca3cea38576df023a0eec581f6_1a929ca9ca3cea38576df023a0eec581f6" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>Texture2D</name></member>
      <member refid="d4/d8c/a00035_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" prot="public" virt="virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>unbind</name></member>
      <member refid="d4/d8c/a00035_a4bf5ddbce67658a6dd14bedfa00bcac5_1a4bf5ddbce67658a6dd14bedfa00bcac5" prot="public" virt="virtual"><scope>mc::gfx::ogl::Texture2D</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
