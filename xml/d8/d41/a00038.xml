<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d8/d41/a00038" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::ogl::ShaderProgram</compoundname>
    <basecompoundref refid="d0/d33/a00027" prot="public" virt="non-virtual">mc::gfx::ogl::Object</basecompoundref>
    <includes refid="d2/d79/a00051" local="no">OGL.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d8/d41/a00038_1ada6908551120f64a668f12fc736feef3" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="da/dec/a00080_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref>, <ref refid="d1/dc6/a00037" kindref="compound">Shader</ref> &gt;</type>
        <definition>std::unordered_map&lt;Enum, Shader&gt; mc::gfx::ogl::ShaderProgram::shaders</definition>
        <argsstring></argsstring>
        <name>shaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1277" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="1277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d41/a00038_1af1a5e0c6dc842ec0f6e78603b3a797bc" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, int &gt;</type>
        <definition>std::unordered_map&lt;std::string, int&gt; mc::gfx::ogl::ShaderProgram::uniforms</definition>
        <argsstring></argsstring>
        <name>uniforms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1278" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="1278" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d8/d41/a00038_a4a7905edf34a864ff6aefca4f181fa09_1a4a7905edf34a864ff6aefca4f181fa09" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::init</definition>
        <argsstring>() override</argsstring>
        <name>init</name>
        <reimplements refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c">init</reimplements>
        <briefdescription>
<para>Calls the corresponding glCreate* function and assigns an ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">Object::destroy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67" kindref="member">Object::isCreated() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1086" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ae81e507d6003156d3751b295a918f8dc_1ae81e507d6003156d3751b295a918f8dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::destroy</definition>
        <argsstring>() override</argsstring>
        <name>destroy</name>
        <reimplements refid="d0/d33/a00027_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d">destroy</reimplements>
        <briefdescription>
<para>Calls the corresponding glDestroy* function and deletes the ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67" kindref="member">Object::isCreated() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet (<ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> has not been called) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1087" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a71b68d7a3ad727fad2ac2e88d097e5d3_1a71b68d7a3ad727fad2ac2e88d097e5d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::link</definition>
        <argsstring>()</argsstring>
        <name>link</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1092" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a66ee2252fc2e2a079324d43af90ab35d_1a66ee2252fc2e2a079324d43af90ab35d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::ShaderProgram::isCreated</definition>
        <argsstring>() const  override</argsstring>
        <name>isCreated</name>
        <reimplements refid="d0/d33/a00027_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67">isCreated</reimplements>
        <briefdescription>
<para>Queries OpenGL whether this <ref refid="d0/d33/a00027" kindref="compound">Object</ref>&apos;s ID is a valid object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents memory </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1094" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a6328f084bb13cfe131387725eb1cf591_1a6328f084bb13cfe131387725eb1cf591" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::gfx::ogl::ShaderProgram::getParameter</definition>
        <argsstring>(const Enum param) const </argsstring>
        <name>getParameter</name>
        <param>
          <type>const <ref refid="da/dec/a00080_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1099" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a9afd895cb5ab503ed33555d8a127e4e2_1a9afd895cb5ab503ed33555d8a127e4e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::gfx::ogl::ShaderProgram::getInfoLogLength</definition>
        <argsstring>() const </argsstring>
        <name>getInfoLogLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_af1432ff6fe7b18a64704767f21244ced_1af1432ff6fe7b18a64704767f21244ced" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::gfx::ogl::ShaderProgram::getAttachedShaders</definition>
        <argsstring>() const </argsstring>
        <name>getAttachedShaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_acdecce111b6c630dd780075c33a6856c_1acdecce111b6c630dd780075c33a6856c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::ShaderProgram::isDeleted</definition>
        <argsstring>() const </argsstring>
        <name>isDeleted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a88b5390bbc25d8d5dcd05d792540151c_1a88b5390bbc25d8d5dcd05d792540151c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::ShaderProgram::isLinked</definition>
        <argsstring>() const </argsstring>
        <name>isLinked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a51af9ca4c33fedd219b23734fa5ab2dd_1a51af9ca4c33fedd219b23734fa5ab2dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::ShaderProgram::isValidated</definition>
        <argsstring>() const </argsstring>
        <name>isValidated</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a5333882918969506e2a3bb6da4741f7b_1a5333882918969506e2a3bb6da4741f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::detachShader</definition>
        <argsstring>(const Index id)</argsstring>
        <name>detachShader</name>
        <param>
          <type>const <ref refid="da/dec/a00080_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_abddf01d2519f5fe4ab03eeb9ab4b2b92_1abddf01d2519f5fe4ab03eeb9ab4b2b92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::detachShader</definition>
        <argsstring>(const Shader &amp;sh)</argsstring>
        <name>detachShader</name>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">Shader</ref> &amp;</type>
          <declname>sh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_af5d92fca20a3dfc2438c672eba6e2214_1af5d92fca20a3dfc2438c672eba6e2214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::validate</definition>
        <argsstring>()</argsstring>
        <name>validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_af56aaf7a7e44ecba5a0dae5c2902a23b_1af56aaf7a7e44ecba5a0dae5c2902a23b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::attachShader</definition>
        <argsstring>(const Shader shader)</argsstring>
        <name>attachShader</name>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">Shader</ref></type>
          <declname>shader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a914aa116883aaa8c3d881b1644a87513_1a914aa116883aaa8c3d881b1644a87513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::createFragment</definition>
        <argsstring>(const char shader[])</argsstring>
        <name>createFragment</name>
        <param>
          <type>const char</type>
          <declname>shader</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a70a8278c94e2865de6b72cd92540199a_1a70a8278c94e2865de6b72cd92540199a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::createFragment</definition>
        <argsstring>(const std::string &amp;shader)</argsstring>
        <name>createFragment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>shader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_afda8852a7b02d665cfd745c11f910ec9_1afda8852a7b02d665cfd745c11f910ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::createVertex</definition>
        <argsstring>(const char shader[])</argsstring>
        <name>createVertex</name>
        <param>
          <type>const char</type>
          <declname>shader</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a566083a27381688c8528cc069edd5fa0_1a566083a27381688c8528cc069edd5fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::createVertex</definition>
        <argsstring>(const std::string &amp;shader)</argsstring>
        <name>createVertex</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>shader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a7b414726545ab0c319360a760ecc72ce_1a7b414726545ab0c319360a760ecc72ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::createUniform</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>createUniform</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_aef486e6e41e7bf6665f27efd09d6b34c_1aef486e6e41e7bf6665f27efd09d6b34c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::createUniform</definition>
        <argsstring>(const char *name)</argsstring>
        <name>createUniform</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a20f7849af0c3b386585009ce048a1fda_1a20f7849af0c3b386585009ce048a1fda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::gfx::ogl::ShaderProgram::getUniformLocation</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>getUniformLocation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a92b2ec0bb02dc858eeafd0535f2f8b12_1a92b2ec0bb02dc858eeafd0535f2f8b12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::gfx::ogl::ShaderProgram::getUniformLocation</definition>
        <argsstring>(const char *name) const </argsstring>
        <name>getUniformLocation</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_aed30d05a6d2633145abb5ac091f51e05_1aed30d05a6d2633145abb5ac091f51e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 2, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 2, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a86b6434d5da9f1811da2bf36e11e5af5_1a86b6434d5da9f1811da2bf36e11e5af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 2, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 2, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a902ef135ed67a23fad9170e0b640c7ac_1a902ef135ed67a23fad9170e0b640c7ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 3, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 3, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a2dd4fa1509a6fbcd4bd04e89f3013619_1a2dd4fa1509a6fbcd4bd04e89f3013619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 3, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 3, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a02079534907f5a8181ec205e29746894_1a02079534907f5a8181ec205e29746894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 4, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 4, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_aee117b251751326f4a3c458385e82ccc_1aee117b251751326f4a3c458385e82ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 4, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 4, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_aa92c29953dc97198562aa426add02663_1aa92c29953dc97198562aa426add02663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 2, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 2, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ab883f0ae3be90bc6ac6c7e9373309426_1ab883f0ae3be90bc6ac6c7e9373309426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 2, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 2, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ac7aec331fb610a74d21381dae48e57dd_1ac7aec331fb610a74d21381dae48e57dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 3, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 3, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_afc5d0b816d62647f548bff5becd2c336_1afc5d0b816d62647f548bff5becd2c336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 3, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 3, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a75f78752e75ff17a0b13838b4775c419_1a75f78752e75ff17a0b13838b4775c419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 2, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 2, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a04ea1b454c827e97941db07d18623c08_1a04ea1b454c827e97941db07d18623c08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 2, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 2, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a3f8aca0a35686b94b8d8ae03b90b61a8_1a3f8aca0a35686b94b8d8ae03b90b61a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 3, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 3, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ace634fb67db6b56bf6466f6e2165ca66_1ace634fb67db6b56bf6466f6e2165ca66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 3, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 3, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a48cb17860a108bb3ce299ac933fa75a0_1a48cb17860a108bb3ce299ac933fa75a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 4, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 4, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ab0467a1e0b4be73505ab7328f649dbf4_1ab0467a1e0b4be73505ab7328f649dbf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 4, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; float, 4, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a0569003cb8f767dbea88e7fbe44d3831_1a0569003cb8f767dbea88e7fbe44d3831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 2, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 2, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a59b165f5e8858f1db4d7b6df8fc33af5_1a59b165f5e8858f1db4d7b6df8fc33af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 2, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 2, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a3de6075584b596f44475eebb0bb72246_1a3de6075584b596f44475eebb0bb72246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 3, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 3, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a7e4e3b64d61fee033d1b9e7bdc75d5f4_1a7e4e3b64d61fee033d1b9e7bdc75d5f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 3, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 3, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a730728e8937cb8758f73633404d3a5f0_1a730728e8937cb8758f73633404d3a5f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 4, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 4, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ae308c2c44929f9754e1422c910cfabf0_1ae308c2c44929f9754e1422c910cfabf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 4, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 4, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_af863c5353ade6ca82afc3e9731a2ea34_1af863c5353ade6ca82afc3e9731a2ea34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 2, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 2, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a2c2da1a31cbb5ab489903d3872e15c87_1a2c2da1a31cbb5ab489903d3872e15c87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 2, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 2, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a4b56c5ff9076501becb05eb9e8405fc5_1a4b56c5ff9076501becb05eb9e8405fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 3, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 3, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a95f988933f51c47ea32803cb8a315e05_1a95f988933f51c47ea32803cb8a315e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 3, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 3, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_af1036c409503c47ce5ef8847dfe57ae4_1af1036c409503c47ce5ef8847dfe57ae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 2, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 2, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_aa4d79c3203d4e2e53ed4bbdd988add3c_1aa4d79c3203d4e2e53ed4bbdd988add3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 2, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 2, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_aae0e7477c2e7b4190ef70f857660c3b7_1aae0e7477c2e7b4190ef70f857660c3b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 3, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 3, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a76543cad6940ebcc92b02cd021346a71_1a76543cad6940ebcc92b02cd021346a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 3, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 3, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a8b0fbbe35cc569ac1fa890ac74e0f61b_1a8b0fbbe35cc569ac1fa890ac74e0f61b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 4, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 4, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a16fa7248c469496185dd6509c1443e31_1a16fa7248c469496185dd6509c1443e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 4, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">mc::Matrix</ref>&lt; double, 4, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a2686782197074400058af6b0fdcd47f7_1a2686782197074400058af6b0fdcd47f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const float a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a56e4b9456cf3dd67962376042d7249e5_1a56e4b9456cf3dd67962376042d7249e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const float a, const float b)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a077d099b6d0ba3f48d9551cf6cdbbf67_1a077d099b6d0ba3f48d9551cf6cdbbf67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const float a, const float b, const float c)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ac42575dfd2b1e5b9a902d43231edf3eb_1ac42575dfd2b1e5b9a902d43231edf3eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const float a, const float b, const float c, const float d)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a08ef2e2adbdcf946d175cc5b82ff3b9a_1a08ef2e2adbdcf946d175cc5b82ff3b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size arraySize, const float *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="da/dec/a00080_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a285590bf1b0418b43b879e50ad957228_1a285590bf1b0418b43b879e50ad957228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size componentSize, const Size arraySize, const float *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="da/dec/a00080_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>componentSize</declname>
        </param>
        <param>
          <type>const <ref refid="da/dec/a00080_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_add8c303fe1fb2b2c5b0a471bf1bf2a58_1add8c303fe1fb2b2c5b0a471bf1bf2a58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; float, 1 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; float, 1 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a7fb76538a7d0bb02c1025b069ff0a46e_1a7fb76538a7d0bb02c1025b069ff0a46e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; float, 2 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; float, 2 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ad7ba230710899a8aafa382a59e5a4293_1ad7ba230710899a8aafa382a59e5a4293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; float, 3 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; float, 3 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_abc77412878210f40130af3a74144b8ec_1abc77412878210f40130af3a74144b8ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; float, 4 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; float, 4 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a4aa2d404c237b4e5a9f165ea151cd113_1a4aa2d404c237b4e5a9f165ea151cd113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const double a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ac5b2bd4bdf545e9206a8d83f85e491e3_1ac5b2bd4bdf545e9206a8d83f85e491e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const double a, const double b)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_aec61e8c57b3374049fa2250a5f55bef3_1aec61e8c57b3374049fa2250a5f55bef3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const double a, const double b, const double c)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a575bab34cd28c567d05a97e095c23e67_1a575bab34cd28c567d05a97e095c23e67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const double a, const double b, const double c, const double d)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a7a0f8d1b98b249c8745c0093b0fec282_1a7a0f8d1b98b249c8745c0093b0fec282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size arraySize, const double *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="da/dec/a00080_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a27efb7fd4b196ec24aa2914c6a34b571_1a27efb7fd4b196ec24aa2914c6a34b571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size componentSize, const Size arraySize, const double *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="da/dec/a00080_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>componentSize</declname>
        </param>
        <param>
          <type>const <ref refid="da/dec/a00080_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a0cd06369082ae7e5e941d5ff18e37820_1a0cd06369082ae7e5e941d5ff18e37820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; double, 1 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; double, 1 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ac638776797c01a1c46183a81d6ca4b78_1ac638776797c01a1c46183a81d6ca4b78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; double, 2 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; double, 2 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a8d209119e425ec8884435d6deaebd92d_1a8d209119e425ec8884435d6deaebd92d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; double, 3 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; double, 3 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a9c2af5df67a00a5429a168aee84882ed_1a9c2af5df67a00a5429a168aee84882ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; double, 4 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; double, 4 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_af8a99807dcbcb0387f4fbb251c74dd36_1af8a99807dcbcb0387f4fbb251c74dd36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const int a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a74a126ca57690f51e44b118fb5bae7b1_1a74a126ca57690f51e44b118fb5bae7b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const int a, const int b)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_aa3ac25c0c7f2b6ceedb7c2e4e9485d88_1aa3ac25c0c7f2b6ceedb7c2e4e9485d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const int a, const int b, const int c)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_af858c2b89c5f80801c6f798c28081d60_1af858c2b89c5f80801c6f798c28081d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const int a, const int b, const int c, const int d)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_afd339dafd34a709b04094b1e85a6771f_1afd339dafd34a709b04094b1e85a6771f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size arraySize, const int *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="da/dec/a00080_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a14251dba9c2dce00eb8d9239c24a0db4_1a14251dba9c2dce00eb8d9239c24a0db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size componentSize, const Size arraySize, const int *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="da/dec/a00080_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>componentSize</declname>
        </param>
        <param>
          <type>const <ref refid="da/dec/a00080_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a1e27b72c0bcf46b65c783c0af8dd7202_1a1e27b72c0bcf46b65c783c0af8dd7202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; int, 1 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; int, 1 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ac3b78d70cbf6a23b143e4a78bb0daff1_1ac3b78d70cbf6a23b143e4a78bb0daff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; int, 2 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; int, 2 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_af417d0326201c2561528c2c041b4fd07_1af417d0326201c2561528c2c041b4fd07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; int, 3 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; int, 3 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ab6c5147bcd64923300a788b8942325aa_1ab6c5147bcd64923300a788b8942325aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; int, 4 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; int, 4 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a71a403816bfd6363801bd22eb0be8705_1a71a403816bfd6363801bd22eb0be8705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const unsigned int a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_af93bd3536f665a839ca7ac95dcb8114a_1af93bd3536f665a839ca7ac95dcb8114a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const unsigned int a, const unsigned int b)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a3a54b823c3a72edade0361da2c950826_1a3a54b823c3a72edade0361da2c950826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const unsigned int a, const unsigned int b, const unsigned int c)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ac592c7f1cc3bcea579c8fb177c35e4b3_1ac592c7f1cc3bcea579c8fb177c35e4b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const unsigned int a, const unsigned int b, const unsigned int c, const unsigned int d)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a1346a9536243b772fca22d4a9719f8de_1a1346a9536243b772fca22d4a9719f8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size arraySize, const unsigned int *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="da/dec/a00080_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a42b90da2a704ee7ca3934230ea5aee71_1a42b90da2a704ee7ca3934230ea5aee71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size componentSize, const Size arraySize, const unsigned int *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="da/dec/a00080_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>componentSize</declname>
        </param>
        <param>
          <type>const <ref refid="da/dec/a00080_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a681334758ca0db43f092a37cfc4c9a87_1a681334758ca0db43f092a37cfc4c9a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; unsigned int, 1 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; unsigned int, 1 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a6b1f4a10ddbace18d0c5935a6dc2838e_1a6b1f4a10ddbace18d0c5935a6dc2838e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; unsigned int, 2 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; unsigned int, 2 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ac8c2ee785a5f937bb933d5e9ef06ef0e_1ac8c2ee785a5f937bb933d5e9ef06ef0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; unsigned int, 3 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; unsigned int, 3 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ab9e384c737aec136ae5b40df46402752_1ab9e384c737aec136ae5b40df46402752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; unsigned int, 4 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d42/a00043" kindref="compound">mc::Vector</ref>&lt; unsigned int, 4 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a288af28f0f50e95b198d56dfea58160f_1a288af28f0f50e95b198d56dfea58160f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setShaders</definition>
        <argsstring>(const std::unordered_map&lt; Enum, Shader &gt; &amp;newShaders)</argsstring>
        <name>setShaders</name>
        <param>
          <type>const std::unordered_map&lt; <ref refid="da/dec/a00080_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref>, <ref refid="d1/dc6/a00037" kindref="compound">Shader</ref> &gt; &amp;</type>
          <declname>newShaders</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ab1626e8ebeb0b44b40a8c06254c1875b_1ab1626e8ebeb0b44b40a8c06254c1875b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::unordered_map&lt; <ref refid="da/dec/a00080_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref>, <ref refid="d1/dc6/a00037" kindref="compound">Shader</ref> &gt; &amp;</type>
        <definition>const std::unordered_map&lt;Enum, Shader&gt;&amp; mc::gfx::ogl::ShaderProgram::getShaders</definition>
        <argsstring>() const </argsstring>
        <name>getShaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a885f05c33bcc645538c783339641b139_1a885f05c33bcc645538c783339641b139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; <ref refid="da/dec/a00080_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref>, <ref refid="d1/dc6/a00037" kindref="compound">Shader</ref> &gt; &amp;</type>
        <definition>std::unordered_map&lt;Enum, Shader&gt;&amp; mc::gfx::ogl::ShaderProgram::getShaders</definition>
        <argsstring>()</argsstring>
        <name>getShaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a43af9202cd605843271290df7cf6a10d_1a43af9202cd605843271290df7cf6a10d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::setUniforms</definition>
        <argsstring>(const std::unordered_map&lt; std::string, int &gt; &amp;newUniforms)</argsstring>
        <name>setUniforms</name>
        <param>
          <type>const std::unordered_map&lt; std::string, int &gt; &amp;</type>
          <declname>newUniforms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a33c596a503aa8d586009a4e5caa22d67_1a33c596a503aa8d586009a4e5caa22d67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::unordered_map&lt; std::string, int &gt; &amp;</type>
        <definition>const std::unordered_map&lt;std::string, int&gt;&amp; mc::gfx::ogl::ShaderProgram::getUniforms</definition>
        <argsstring>() const </argsstring>
        <name>getUniforms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a13e4910b61ab7cdc656aa1bfe1815cf5_1a13e4910b61ab7cdc656aa1bfe1815cf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; std::string, int &gt; &amp;</type>
        <definition>std::unordered_map&lt;std::string, int&gt;&amp; mc::gfx::ogl::ShaderProgram::getUniforms</definition>
        <argsstring>()</argsstring>
        <name>getUniforms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a0e1a2f2fff5c5a65b4466dac1234a918_1a0e1a2f2fff5c5a65b4466dac1234a918" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::ShaderProgram::operator==</definition>
        <argsstring>(const ShaderProgram &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d8/d41/a00038" kindref="compound">ShaderProgram</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a84d566a584d8311c1ccccfa5b8f0727a_1a84d566a584d8311c1ccccfa5b8f0727a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::ShaderProgram::operator!=</definition>
        <argsstring>(const ShaderProgram &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d8/d41/a00038" kindref="compound">ShaderProgram</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void mc::gfx::ogl::Object::bind</definition>
        <argsstring>() const </argsstring>
        <name>bind</name>
        <reimplementedby refid="df/d61/a00031_1aa2aa180de0c314967fef3dc1f506695f">bind</reimplementedby>
        <reimplementedby refid="d1/dc6/a00037_1a0899273f842e1b692da3a08e162ee7f3">bind</reimplementedby>
        <briefdescription>
<para>Binds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> to be used in an OpenGL function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void mc::gfx::ogl::Object::unbind</definition>
        <argsstring>() const </argsstring>
        <name>unbind</name>
        <reimplementedby refid="df/d61/a00031_1ad05128a71051c75e7c6a66bf135f4ce5">unbind</reimplementedby>
        <reimplementedby refid="d1/dc6/a00037_1a91dc153976fbd78b0047c436c12967d6">unbind</reimplementedby>
        <briefdescription>
<para>Unbinds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> which is equivalent to binding ID 0. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/dec/a00080_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::ogl::Object::getID</definition>
        <argsstring>() const </argsstring>
        <name>getID</name>
        <briefdescription>
<para>Retrieves the current ID that this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents. </para>        </briefdescription>
        <detaileddescription>
<para>The ID is an unsigned number that acts like a pointer to OpenGL memory. It is assigned when <ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> is called. </para><para>If it is 0, the <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> is considered uncreated. </para><para>When using <ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>it will bind to this ID. <ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>will bind to ID 0, which is the equivelant of a null pointer. <simplesect kind="return"><para>The ID represented by this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Object::operator==</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Object::operator!=</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="157" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d8/d41/a00038_1a8aaaf654d33579c3705aa045193bfbd7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::ShaderProgram::bindIndex</definition>
        <argsstring>(const Index id) const  override</argsstring>
        <name>bindIndex</name>
        <reimplements refid="d0/d33/a00027_a5f9f3150ac508ecf142eff4f1bc9f424_1a5f9f3150ac508ecf142eff4f1bc9f424">bindIndex</reimplements>
        <param>
          <type>const <ref refid="da/dec/a00080_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Intended to be overloaded to bind to a certain index. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>and <ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>both use this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to bind to. If it is 0, it needs to be unbinded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1280" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d0/d33/a00027_aa6f2acefb1ac01ff347ff593738eab46_1aa6f2acefb1ac01ff347ff593738eab46" prot="protected" static="no" mutable="no">
        <type><ref refid="da/dec/a00080_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::ogl::Object::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The ID of this `Object. </para>        </briefdescription>
        <detaileddescription>
<para>` Should be set in <ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> and become 0 in <ref refid="d0/d33/a00027_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">Object::destroy()</ref> </para><para><ref refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const </ref>returns this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="164" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/Shader">https://www.opengl.org/wiki/Shader</ulink> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLSL_Object#Program_objects">https://www.opengl.org/wiki/GLSL_Object#Program_objects</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="d1/dc6/a00037" kindref="compound">Shader</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="508">
        <label>mc::gfx::ogl::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
      <node id="507">
        <label>mc::gfx::ogl::ShaderProgram</label>
        <link refid="d8/d41/a00038"/>
        <childnode refid="508" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="510">
        <label>mc::gfx::ogl::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
      <node id="509">
        <label>mc::gfx::ogl::ShaderProgram</label>
        <link refid="d8/d41/a00038"/>
        <childnode refid="510" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/OGL.h" line="1084" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="1084" bodyend="1281"/>
    <listofallmembers>
      <member refid="d8/d41/a00038_af56aaf7a7e44ecba5a0dae5c2902a23b_1af56aaf7a7e44ecba5a0dae5c2902a23b" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>attachShader</name></member>
      <member refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" prot="public" virt="virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>bind</name></member>
      <member refid="d8/d41/a00038_1a8aaaf654d33579c3705aa045193bfbd7" prot="private" virt="virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>bindIndex</name></member>
      <member refid="d8/d41/a00038_a914aa116883aaa8c3d881b1644a87513_1a914aa116883aaa8c3d881b1644a87513" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>createFragment</name></member>
      <member refid="d8/d41/a00038_a70a8278c94e2865de6b72cd92540199a_1a70a8278c94e2865de6b72cd92540199a" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>createFragment</name></member>
      <member refid="d8/d41/a00038_a7b414726545ab0c319360a760ecc72ce_1a7b414726545ab0c319360a760ecc72ce" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>createUniform</name></member>
      <member refid="d8/d41/a00038_aef486e6e41e7bf6665f27efd09d6b34c_1aef486e6e41e7bf6665f27efd09d6b34c" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>createUniform</name></member>
      <member refid="d8/d41/a00038_afda8852a7b02d665cfd745c11f910ec9_1afda8852a7b02d665cfd745c11f910ec9" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>createVertex</name></member>
      <member refid="d8/d41/a00038_a566083a27381688c8528cc069edd5fa0_1a566083a27381688c8528cc069edd5fa0" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>createVertex</name></member>
      <member refid="d8/d41/a00038_ae81e507d6003156d3751b295a918f8dc_1ae81e507d6003156d3751b295a918f8dc" prot="public" virt="virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>destroy</name></member>
      <member refid="d8/d41/a00038_a5333882918969506e2a3bb6da4741f7b_1a5333882918969506e2a3bb6da4741f7b" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>detachShader</name></member>
      <member refid="d8/d41/a00038_abddf01d2519f5fe4ab03eeb9ab4b2b92_1abddf01d2519f5fe4ab03eeb9ab4b2b92" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>detachShader</name></member>
      <member refid="d8/d41/a00038_af1432ff6fe7b18a64704767f21244ced_1af1432ff6fe7b18a64704767f21244ced" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>getAttachedShaders</name></member>
      <member refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>getID</name></member>
      <member refid="d8/d41/a00038_a9afd895cb5ab503ed33555d8a127e4e2_1a9afd895cb5ab503ed33555d8a127e4e2" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>getInfoLogLength</name></member>
      <member refid="d8/d41/a00038_a6328f084bb13cfe131387725eb1cf591_1a6328f084bb13cfe131387725eb1cf591" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>getParameter</name></member>
      <member refid="d8/d41/a00038_ab1626e8ebeb0b44b40a8c06254c1875b_1ab1626e8ebeb0b44b40a8c06254c1875b" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>getShaders</name></member>
      <member refid="d8/d41/a00038_a885f05c33bcc645538c783339641b139_1a885f05c33bcc645538c783339641b139" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>getShaders</name></member>
      <member refid="d8/d41/a00038_a20f7849af0c3b386585009ce048a1fda_1a20f7849af0c3b386585009ce048a1fda" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>getUniformLocation</name></member>
      <member refid="d8/d41/a00038_a92b2ec0bb02dc858eeafd0535f2f8b12_1a92b2ec0bb02dc858eeafd0535f2f8b12" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>getUniformLocation</name></member>
      <member refid="d8/d41/a00038_a33c596a503aa8d586009a4e5caa22d67_1a33c596a503aa8d586009a4e5caa22d67" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>getUniforms</name></member>
      <member refid="d8/d41/a00038_a13e4910b61ab7cdc656aa1bfe1815cf5_1a13e4910b61ab7cdc656aa1bfe1815cf5" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>getUniforms</name></member>
      <member refid="d0/d33/a00027_aa6f2acefb1ac01ff347ff593738eab46_1aa6f2acefb1ac01ff347ff593738eab46" prot="protected" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>id</name></member>
      <member refid="d8/d41/a00038_a4a7905edf34a864ff6aefca4f181fa09_1a4a7905edf34a864ff6aefca4f181fa09" prot="public" virt="virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>init</name></member>
      <member refid="d8/d41/a00038_a66ee2252fc2e2a079324d43af90ab35d_1a66ee2252fc2e2a079324d43af90ab35d" prot="public" virt="virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>isCreated</name></member>
      <member refid="d8/d41/a00038_acdecce111b6c630dd780075c33a6856c_1acdecce111b6c630dd780075c33a6856c" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>isDeleted</name></member>
      <member refid="d8/d41/a00038_a88b5390bbc25d8d5dcd05d792540151c_1a88b5390bbc25d8d5dcd05d792540151c" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>isLinked</name></member>
      <member refid="d8/d41/a00038_a51af9ca4c33fedd219b23734fa5ab2dd_1a51af9ca4c33fedd219b23734fa5ab2dd" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>isValidated</name></member>
      <member refid="d8/d41/a00038_a71b68d7a3ad727fad2ac2e88d097e5d3_1a71b68d7a3ad727fad2ac2e88d097e5d3" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>link</name></member>
      <member refid="d8/d41/a00038_a84d566a584d8311c1ccccfa5b8f0727a_1a84d566a584d8311c1ccccfa5b8f0727a" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>operator!=</name></member>
      <member refid="d0/d33/a00027_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::ogl::Object::"><scope>mc::gfx::ogl::ShaderProgram</scope><name>operator!=</name></member>
      <member refid="d8/d41/a00038_a0e1a2f2fff5c5a65b4466dac1234a918_1a0e1a2f2fff5c5a65b4466dac1234a918" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>operator==</name></member>
      <member refid="d0/d33/a00027_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::ogl::Object::"><scope>mc::gfx::ogl::ShaderProgram</scope><name>operator==</name></member>
      <member refid="d8/d41/a00038_a288af28f0f50e95b198d56dfea58160f_1a288af28f0f50e95b198d56dfea58160f" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setShaders</name></member>
      <member refid="d8/d41/a00038_aed30d05a6d2633145abb5ac091f51e05_1aed30d05a6d2633145abb5ac091f51e05" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a86b6434d5da9f1811da2bf36e11e5af5_1a86b6434d5da9f1811da2bf36e11e5af5" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a902ef135ed67a23fad9170e0b640c7ac_1a902ef135ed67a23fad9170e0b640c7ac" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a2dd4fa1509a6fbcd4bd04e89f3013619_1a2dd4fa1509a6fbcd4bd04e89f3013619" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a02079534907f5a8181ec205e29746894_1a02079534907f5a8181ec205e29746894" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_aee117b251751326f4a3c458385e82ccc_1aee117b251751326f4a3c458385e82ccc" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_aa92c29953dc97198562aa426add02663_1aa92c29953dc97198562aa426add02663" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_ab883f0ae3be90bc6ac6c7e9373309426_1ab883f0ae3be90bc6ac6c7e9373309426" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_ac7aec331fb610a74d21381dae48e57dd_1ac7aec331fb610a74d21381dae48e57dd" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_afc5d0b816d62647f548bff5becd2c336_1afc5d0b816d62647f548bff5becd2c336" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a75f78752e75ff17a0b13838b4775c419_1a75f78752e75ff17a0b13838b4775c419" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a04ea1b454c827e97941db07d18623c08_1a04ea1b454c827e97941db07d18623c08" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a3f8aca0a35686b94b8d8ae03b90b61a8_1a3f8aca0a35686b94b8d8ae03b90b61a8" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_ace634fb67db6b56bf6466f6e2165ca66_1ace634fb67db6b56bf6466f6e2165ca66" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a48cb17860a108bb3ce299ac933fa75a0_1a48cb17860a108bb3ce299ac933fa75a0" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_ab0467a1e0b4be73505ab7328f649dbf4_1ab0467a1e0b4be73505ab7328f649dbf4" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a0569003cb8f767dbea88e7fbe44d3831_1a0569003cb8f767dbea88e7fbe44d3831" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a59b165f5e8858f1db4d7b6df8fc33af5_1a59b165f5e8858f1db4d7b6df8fc33af5" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a3de6075584b596f44475eebb0bb72246_1a3de6075584b596f44475eebb0bb72246" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a7e4e3b64d61fee033d1b9e7bdc75d5f4_1a7e4e3b64d61fee033d1b9e7bdc75d5f4" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a730728e8937cb8758f73633404d3a5f0_1a730728e8937cb8758f73633404d3a5f0" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_ae308c2c44929f9754e1422c910cfabf0_1ae308c2c44929f9754e1422c910cfabf0" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_af863c5353ade6ca82afc3e9731a2ea34_1af863c5353ade6ca82afc3e9731a2ea34" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a2c2da1a31cbb5ab489903d3872e15c87_1a2c2da1a31cbb5ab489903d3872e15c87" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a4b56c5ff9076501becb05eb9e8405fc5_1a4b56c5ff9076501becb05eb9e8405fc5" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a95f988933f51c47ea32803cb8a315e05_1a95f988933f51c47ea32803cb8a315e05" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_af1036c409503c47ce5ef8847dfe57ae4_1af1036c409503c47ce5ef8847dfe57ae4" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_aa4d79c3203d4e2e53ed4bbdd988add3c_1aa4d79c3203d4e2e53ed4bbdd988add3c" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_aae0e7477c2e7b4190ef70f857660c3b7_1aae0e7477c2e7b4190ef70f857660c3b7" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a76543cad6940ebcc92b02cd021346a71_1a76543cad6940ebcc92b02cd021346a71" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a8b0fbbe35cc569ac1fa890ac74e0f61b_1a8b0fbbe35cc569ac1fa890ac74e0f61b" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a16fa7248c469496185dd6509c1443e31_1a16fa7248c469496185dd6509c1443e31" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a2686782197074400058af6b0fdcd47f7_1a2686782197074400058af6b0fdcd47f7" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a56e4b9456cf3dd67962376042d7249e5_1a56e4b9456cf3dd67962376042d7249e5" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a077d099b6d0ba3f48d9551cf6cdbbf67_1a077d099b6d0ba3f48d9551cf6cdbbf67" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_ac42575dfd2b1e5b9a902d43231edf3eb_1ac42575dfd2b1e5b9a902d43231edf3eb" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a08ef2e2adbdcf946d175cc5b82ff3b9a_1a08ef2e2adbdcf946d175cc5b82ff3b9a" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a285590bf1b0418b43b879e50ad957228_1a285590bf1b0418b43b879e50ad957228" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_add8c303fe1fb2b2c5b0a471bf1bf2a58_1add8c303fe1fb2b2c5b0a471bf1bf2a58" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a7fb76538a7d0bb02c1025b069ff0a46e_1a7fb76538a7d0bb02c1025b069ff0a46e" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_ad7ba230710899a8aafa382a59e5a4293_1ad7ba230710899a8aafa382a59e5a4293" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_abc77412878210f40130af3a74144b8ec_1abc77412878210f40130af3a74144b8ec" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a4aa2d404c237b4e5a9f165ea151cd113_1a4aa2d404c237b4e5a9f165ea151cd113" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_ac5b2bd4bdf545e9206a8d83f85e491e3_1ac5b2bd4bdf545e9206a8d83f85e491e3" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_aec61e8c57b3374049fa2250a5f55bef3_1aec61e8c57b3374049fa2250a5f55bef3" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a575bab34cd28c567d05a97e095c23e67_1a575bab34cd28c567d05a97e095c23e67" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a7a0f8d1b98b249c8745c0093b0fec282_1a7a0f8d1b98b249c8745c0093b0fec282" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a27efb7fd4b196ec24aa2914c6a34b571_1a27efb7fd4b196ec24aa2914c6a34b571" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a0cd06369082ae7e5e941d5ff18e37820_1a0cd06369082ae7e5e941d5ff18e37820" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_ac638776797c01a1c46183a81d6ca4b78_1ac638776797c01a1c46183a81d6ca4b78" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a8d209119e425ec8884435d6deaebd92d_1a8d209119e425ec8884435d6deaebd92d" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a9c2af5df67a00a5429a168aee84882ed_1a9c2af5df67a00a5429a168aee84882ed" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_af8a99807dcbcb0387f4fbb251c74dd36_1af8a99807dcbcb0387f4fbb251c74dd36" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a74a126ca57690f51e44b118fb5bae7b1_1a74a126ca57690f51e44b118fb5bae7b1" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_aa3ac25c0c7f2b6ceedb7c2e4e9485d88_1aa3ac25c0c7f2b6ceedb7c2e4e9485d88" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_af858c2b89c5f80801c6f798c28081d60_1af858c2b89c5f80801c6f798c28081d60" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_afd339dafd34a709b04094b1e85a6771f_1afd339dafd34a709b04094b1e85a6771f" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a14251dba9c2dce00eb8d9239c24a0db4_1a14251dba9c2dce00eb8d9239c24a0db4" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a1e27b72c0bcf46b65c783c0af8dd7202_1a1e27b72c0bcf46b65c783c0af8dd7202" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_ac3b78d70cbf6a23b143e4a78bb0daff1_1ac3b78d70cbf6a23b143e4a78bb0daff1" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_af417d0326201c2561528c2c041b4fd07_1af417d0326201c2561528c2c041b4fd07" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_ab6c5147bcd64923300a788b8942325aa_1ab6c5147bcd64923300a788b8942325aa" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a71a403816bfd6363801bd22eb0be8705_1a71a403816bfd6363801bd22eb0be8705" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_af93bd3536f665a839ca7ac95dcb8114a_1af93bd3536f665a839ca7ac95dcb8114a" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a3a54b823c3a72edade0361da2c950826_1a3a54b823c3a72edade0361da2c950826" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_ac592c7f1cc3bcea579c8fb177c35e4b3_1ac592c7f1cc3bcea579c8fb177c35e4b3" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a1346a9536243b772fca22d4a9719f8de_1a1346a9536243b772fca22d4a9719f8de" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a42b90da2a704ee7ca3934230ea5aee71_1a42b90da2a704ee7ca3934230ea5aee71" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a681334758ca0db43f092a37cfc4c9a87_1a681334758ca0db43f092a37cfc4c9a87" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a6b1f4a10ddbace18d0c5935a6dc2838e_1a6b1f4a10ddbace18d0c5935a6dc2838e" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_ac8c2ee785a5f937bb933d5e9ef06ef0e_1ac8c2ee785a5f937bb933d5e9ef06ef0e" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_ab9e384c737aec136ae5b40df46402752_1ab9e384c737aec136ae5b40df46402752" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d8/d41/a00038_a43af9202cd605843271290df7cf6a10d_1a43af9202cd605843271290df7cf6a10d" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>setUniforms</name></member>
      <member refid="d8/d41/a00038_1ada6908551120f64a668f12fc736feef3" prot="private" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>shaders</name></member>
      <member refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" prot="public" virt="virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>unbind</name></member>
      <member refid="d8/d41/a00038_1af1a5e0c6dc842ec0f6e78603b3a797bc" prot="private" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>uniforms</name></member>
      <member refid="d8/d41/a00038_af5d92fca20a3dfc2438c672eba6e2214_1af5d92fca20a3dfc2438c672eba6e2214" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>validate</name></member>
      <member refid="d0/d33/a00027_a4bf5ddbce67658a6dd14bedfa00bcac5_1a4bf5ddbce67658a6dd14bedfa00bcac5" prot="public" virt="virtual"><scope>mc::gfx::ogl::ShaderProgram</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
