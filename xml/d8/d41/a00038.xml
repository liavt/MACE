<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d8/d41/a00038" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::Texture</compoundname>
    <basecompoundref refid="d0/d33/a00027" prot="public" virt="non-virtual">mc::gfx::Object</basecompoundref>
    <includes refid="d6/d97/a00045" local="no">Buffer.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d8/d41/a00038_1a49586468450408856fa10aed40ef4bce" prot="private" static="no" mutable="no">
        <type>GLenum</type>
        <definition>GLenum mc::gfx::Texture::target</definition>
        <argsstring></argsstring>
        <name>target</name>
        <initializer>= GL_TEXTURE_2D</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="453" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d41/a00038_1a14a18551970c09664881a37cb96ade3d" prot="private" static="no" mutable="no">
        <type><ref refid="da/da0/a00009" kindref="compound">Color</ref></type>
        <definition>Color mc::gfx::Texture::paint</definition>
        <argsstring></argsstring>
        <name>paint</name>
        <initializer>= <ref refid="da/da0/a00009" kindref="compound">Color</ref>(1.0f, 1.0f, 1.0f, 1.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="455" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d41/a00038_1a7e7bc0b3087bf23ab4bfb494a00f3346" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float mc::gfx::Texture::opacity</definition>
        <argsstring></argsstring>
        <name>opacity</name>
        <initializer>= 1.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="457" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="457" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d8/d41/a00038_aebf5c2464c0e7219f79a776296a19efe_1aebf5c2464c0e7219f79a776296a19efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::Texture::init</definition>
        <argsstring>() override</argsstring>
        <name>init</name>
        <reimplements refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914">init</reimplements>
        <briefdescription>
<para>Calls the corresponding glCreate* function and assigns an ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80" kindref="member">Object::destroy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76" kindref="member">Object::isCreated() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a86ce84fbf111118dbe1cb4ffe50267ff_1a86ce84fbf111118dbe1cb4ffe50267ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::Texture::destroy</definition>
        <argsstring>() override</argsstring>
        <name>destroy</name>
        <reimplements refid="d0/d33/a00027_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80">destroy</reimplements>
        <briefdescription>
<para>Calls the corresponding glDestroy* function and deletes the ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76" kindref="member">Object::isCreated() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet (<ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> has not been called) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a70c25cd28c47f4201388aa1216e3cd2d_1a70c25cd28c47f4201388aa1216e3cd2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::Texture::setData</definition>
        <argsstring>(const void *data, Size width, Size height, GLenum type=GL_FLOAT, GLenum format=GL_RGB, GLenum internalFormat=GL_RGB, Index mipmapLevel=0)</argsstring>
        <name>setData</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="d1/d51/a00079_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="d1/d51/a00079_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>height</declname>
        </param>
        <param>
          <type>GLenum</type>
          <declname>type</declname>
          <defval>GL_FLOAT</defval>
        </param>
        <param>
          <type>GLenum</type>
          <declname>format</declname>
          <defval>GL_RGB</defval>
        </param>
        <param>
          <type>GLenum</type>
          <declname>internalFormat</declname>
          <defval>GL_RGB</defval>
        </param>
        <param>
          <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>mipmapLevel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glTexImage2D">https://www.opengl.org/wiki/GLAPI/glTexImage2D</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a4c619193ee9a4b354bdf5b0382302197_1a4c619193ee9a4b354bdf5b0382302197" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::Texture::loadFile</definition>
        <argsstring>(const char *file)</argsstring>
        <name>loadFile</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="428" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_acf4bc454a146b237fa87756c29eefb90_1acf4bc454a146b237fa87756c29eefb90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::Texture::setTarget</definition>
        <argsstring>(const GLenum target)</argsstring>
        <name>setTarget</name>
        <param>
          <type>const GLenum</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a1974ac906f5e0d5e796dc82c2e05c0ec_1a1974ac906f5e0d5e796dc82c2e05c0ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLenum</type>
        <definition>GLenum mc::gfx::Texture::getTarget</definition>
        <argsstring>()</argsstring>
        <name>getTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="431" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a4abd1d7944c0c80fbd484fad810d8b77_1a4abd1d7944c0c80fbd484fad810d8b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/da0/a00009" kindref="compound">Color</ref> &amp;</type>
        <definition>Color&amp; mc::gfx::Texture::getPaint</definition>
        <argsstring>()</argsstring>
        <name>getPaint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="433" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a89e965418f2da04a68ba9724623e9ae2_1a89e965418f2da04a68ba9724623e9ae2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="da/da0/a00009" kindref="compound">Color</ref> &amp;</type>
        <definition>const Color&amp; mc::gfx::Texture::getPaint</definition>
        <argsstring>() const </argsstring>
        <name>getPaint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a53696fcdbef5ef8dfa6bf9a90c649be7_1a53696fcdbef5ef8dfa6bf9a90c649be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::Texture::setPaint</definition>
        <argsstring>(const Color &amp;c)</argsstring>
        <name>setPaint</name>
        <param>
          <type>const <ref refid="da/da0/a00009" kindref="compound">Color</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a73f099a1c1c226e101c28c70b517e23b_1a73f099a1c1c226e101c28c70b517e23b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float mc::gfx::Texture::getOpacity</definition>
        <argsstring>()</argsstring>
        <name>getOpacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_af59d6a7103ceacc08e707882043eaba8_1af59d6a7103ceacc08e707882043eaba8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const float</type>
        <definition>const float mc::gfx::Texture::getOpacity</definition>
        <argsstring>() const </argsstring>
        <name>getOpacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_aebd0d76cdc2e89864118b4c119cc09da_1aebd0d76cdc2e89864118b4c119cc09da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::Texture::setOpacity</definition>
        <argsstring>(const float f)</argsstring>
        <name>setOpacity</name>
        <param>
          <type>const float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_aa37c4d2135816293164f06c93fd95ace_1aa37c4d2135816293164f06c93fd95ace" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Texture::isCreated</definition>
        <argsstring>() const  override</argsstring>
        <name>isCreated</name>
        <reimplements refid="d0/d33/a00027_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76">isCreated</reimplements>
        <briefdescription>
<para>Queries OpenGL whether this <ref refid="d0/d33/a00027" kindref="compound">Object</ref>&apos;s ID is a valid object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents memory </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a6ec1b99fe4f8eb9f4c9566c1a79c8d15_1a6ec1b99fe4f8eb9f4c9566c1a79c8d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::Texture::setParameter</definition>
        <argsstring>(const GLenum &amp;name, const GLint &amp;value)</argsstring>
        <name>setParameter</name>
        <param>
          <type>const GLenum &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const GLint &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glTexParameter">https://www.opengl.org/wiki/GLAPI/glTexParameter</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="447" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_a7f40e8f1091382117829940678577b55_1a7f40e8f1091382117829940678577b55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Texture::operator==</definition>
        <argsstring>(const Texture &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d8/d41/a00038" kindref="compound">Texture</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d41/a00038_ac43bd1d99904943697d6a76c238f9be0_1ac43bd1d99904943697d6a76c238f9be0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Texture::operator!=</definition>
        <argsstring>(const Texture &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d8/d41/a00038" kindref="compound">Texture</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void mc::gfx::Object::bind</definition>
        <argsstring>() const </argsstring>
        <name>bind</name>
        <reimplementedby refid="df/d61/a00031_1a055cd452ca943cb84a4663d5dfca4f61">bind</reimplementedby>
        <briefdescription>
<para>Binds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> to be used in an OpenGL function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void mc::gfx::Object::unbind</definition>
        <argsstring>() const </argsstring>
        <name>unbind</name>
        <reimplementedby refid="df/d61/a00031_1a509b3f1d7b32a0b12060535698889b30">unbind</reimplementedby>
        <briefdescription>
<para>Unbinds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> which is equivalent to binding ID 0. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::Object::getID</definition>
        <argsstring>() const </argsstring>
        <name>getID</name>
        <briefdescription>
<para>Retrieves the current ID that this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents. </para>        </briefdescription>
        <detaileddescription>
<para>The ID is an unsigned number that acts like a pointer to OpenGL memory. It is assigned when <ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> is called. </para><para>If it is 0, the <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> is considered uncreated. </para><para>When using <ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const </ref>it will bind to this ID. <ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind() const </ref>will bind to ID 0, which is the equivelant of a null pointer. <simplesect kind="return"><para>The ID represented by this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Object::operator==</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para>Their ID is compared. <simplesect kind="see"><para><ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Object::operator!=</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para>Their ID is compared. <simplesect kind="see"><para><ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="116" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d8/d41/a00038_1a0af83083bb92d56422b38df8ac2835ec" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::Texture::bindIndex</definition>
        <argsstring>(const Index &amp;id) const  override</argsstring>
        <name>bindIndex</name>
        <reimplements refid="d0/d33/a00027_a45afac15d5bd595db56bad1a096befce_1a45afac15d5bd595db56bad1a096befce">bindIndex</reimplements>
        <param>
          <type>const <ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Intended to be overloaded to bind to a certain index. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const </ref>and <ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind() const </ref>both use this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to bind to. If it is 0, it needs to be unbinded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="459" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d0/d33/a00027_a5c44ad260b3bd8a5825c434037d5f89f_1a5c44ad260b3bd8a5825c434037d5f89f" prot="protected" static="no" mutable="no">
        <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::Object::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The ID of this `Object. </para>        </briefdescription>
        <detaileddescription>
<para>` Should be set in <ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> and become 0 in <ref refid="d0/d33/a00027_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80" kindref="member">Object::destroy()</ref> </para><para><ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const </ref>returns this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="123" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/Texture">https://www.opengl.org/wiki/Texture</ulink> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="493">
        <label>mc::gfx::Texture</label>
        <link refid="d8/d41/a00038"/>
        <childnode refid="494" relation="public-inheritance">
        </childnode>
      </node>
      <node id="494">
        <label>mc::gfx::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="495">
        <label>mc::gfx::Texture</label>
        <link refid="d8/d41/a00038"/>
        <childnode refid="496" relation="public-inheritance">
        </childnode>
      </node>
      <node id="496">
        <label>mc::gfx::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/Buffer.h" line="414" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="414" bodyend="460"/>
    <listofallmembers>
      <member refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" prot="public" virt="virtual"><scope>mc::gfx::Texture</scope><name>bind</name></member>
      <member refid="d8/d41/a00038_1a0af83083bb92d56422b38df8ac2835ec" prot="private" virt="virtual"><scope>mc::gfx::Texture</scope><name>bindIndex</name></member>
      <member refid="d8/d41/a00038_a86ce84fbf111118dbe1cb4ffe50267ff_1a86ce84fbf111118dbe1cb4ffe50267ff" prot="public" virt="virtual"><scope>mc::gfx::Texture</scope><name>destroy</name></member>
      <member refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" prot="public" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>getID</name></member>
      <member refid="d8/d41/a00038_a73f099a1c1c226e101c28c70b517e23b_1a73f099a1c1c226e101c28c70b517e23b" prot="public" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>getOpacity</name></member>
      <member refid="d8/d41/a00038_af59d6a7103ceacc08e707882043eaba8_1af59d6a7103ceacc08e707882043eaba8" prot="public" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>getOpacity</name></member>
      <member refid="d8/d41/a00038_a4abd1d7944c0c80fbd484fad810d8b77_1a4abd1d7944c0c80fbd484fad810d8b77" prot="public" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>getPaint</name></member>
      <member refid="d8/d41/a00038_a89e965418f2da04a68ba9724623e9ae2_1a89e965418f2da04a68ba9724623e9ae2" prot="public" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>getPaint</name></member>
      <member refid="d8/d41/a00038_a1974ac906f5e0d5e796dc82c2e05c0ec_1a1974ac906f5e0d5e796dc82c2e05c0ec" prot="public" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>getTarget</name></member>
      <member refid="d0/d33/a00027_a5c44ad260b3bd8a5825c434037d5f89f_1a5c44ad260b3bd8a5825c434037d5f89f" prot="protected" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>id</name></member>
      <member refid="d8/d41/a00038_aebf5c2464c0e7219f79a776296a19efe_1aebf5c2464c0e7219f79a776296a19efe" prot="public" virt="virtual"><scope>mc::gfx::Texture</scope><name>init</name></member>
      <member refid="d8/d41/a00038_aa37c4d2135816293164f06c93fd95ace_1aa37c4d2135816293164f06c93fd95ace" prot="public" virt="virtual"><scope>mc::gfx::Texture</scope><name>isCreated</name></member>
      <member refid="d8/d41/a00038_a4c619193ee9a4b354bdf5b0382302197_1a4c619193ee9a4b354bdf5b0382302197" prot="public" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>loadFile</name></member>
      <member refid="d8/d41/a00038_1a7e7bc0b3087bf23ab4bfb494a00f3346" prot="private" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>opacity</name></member>
      <member refid="d8/d41/a00038_ac43bd1d99904943697d6a76c238f9be0_1ac43bd1d99904943697d6a76c238f9be0" prot="public" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>operator!=</name></member>
      <member refid="d0/d33/a00027_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::Object::"><scope>mc::gfx::Texture</scope><name>operator!=</name></member>
      <member refid="d8/d41/a00038_a7f40e8f1091382117829940678577b55_1a7f40e8f1091382117829940678577b55" prot="public" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>operator==</name></member>
      <member refid="d0/d33/a00027_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::Object::"><scope>mc::gfx::Texture</scope><name>operator==</name></member>
      <member refid="d8/d41/a00038_1a14a18551970c09664881a37cb96ade3d" prot="private" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>paint</name></member>
      <member refid="d8/d41/a00038_a70c25cd28c47f4201388aa1216e3cd2d_1a70c25cd28c47f4201388aa1216e3cd2d" prot="public" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>setData</name></member>
      <member refid="d8/d41/a00038_aebd0d76cdc2e89864118b4c119cc09da_1aebd0d76cdc2e89864118b4c119cc09da" prot="public" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>setOpacity</name></member>
      <member refid="d8/d41/a00038_a53696fcdbef5ef8dfa6bf9a90c649be7_1a53696fcdbef5ef8dfa6bf9a90c649be7" prot="public" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>setPaint</name></member>
      <member refid="d8/d41/a00038_a6ec1b99fe4f8eb9f4c9566c1a79c8d15_1a6ec1b99fe4f8eb9f4c9566c1a79c8d15" prot="public" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>setParameter</name></member>
      <member refid="d8/d41/a00038_acf4bc454a146b237fa87756c29eefb90_1acf4bc454a146b237fa87756c29eefb90" prot="public" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>setTarget</name></member>
      <member refid="d8/d41/a00038_1a49586468450408856fa10aed40ef4bce" prot="private" virt="non-virtual"><scope>mc::gfx::Texture</scope><name>target</name></member>
      <member refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" prot="public" virt="virtual"><scope>mc::gfx::Texture</scope><name>unbind</name></member>
      <member refid="d0/d33/a00027_a4ea5dacb16804b43f4be8c2567bbd48b_1a4ea5dacb16804b43f4be8c2567bbd48b" prot="public" virt="virtual"><scope>mc::gfx::Texture</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
