<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d8/d84/a00001" kind="page">
    <compoundname>todo</compoundname>
    <title>Todo List</title>
    <detaileddescription>
<para><variablelist>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000002"/>Class <ref refid="da/d45/a00011" kindref="compound">mc::gfx::Component</ref>  </term></varlistentry>
<listitem><para>unit testing for <ref refid="da/d45/a00011_aca617afee4ec19457718c9cecdbad9fe_1aca617afee4ec19457718c9cecdbad9fe" kindref="member">clean()</ref> <ref refid="da/d45/a00011_a55315efee992bdb1caeaaebd151de49f_1a55315efee992bdb1caeaaebd151de49f" kindref="member">render()</ref> and <ref refid="da/d45/a00011_a832c8255a365af45b49b0d47968824d6_1a832c8255a365af45b49b0d47968824d6" kindref="member">hover()</ref>  </para></listitem>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000003"/>Member <ref refid="d1/d2b/a00018_add718ea20eb20a512e9b47030caff993_1add718ea20eb20a512e9b47030caff993" kindref="member">mc::gfx::Font::getCharacter</ref>  (const wchar_t character, <ref refid="d0/d33/a00027" kindref="compound">Letter</ref> *let) const </term></varlistentry>
<listitem><para>find a way to dynamically allocate letters without passing in a pointer  </para></listitem>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000004"/>Namespace <ref refid="da/d74/a00099" kindref="compound">mc::gfx::ogl</ref>  </term></varlistentry>
<listitem><para>create a ReadableBuffer class with functions like glReadPixels  </para></listitem>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000006"/>Class <ref refid="db/db2/a00020" kindref="compound">mc::gfx::ogl::FrameBuffer</ref>  </term></varlistentry>
<listitem><para>target variable which is GL_FRAMEBUFFER by default. and update documentation accordingly  </para></listitem>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000005"/>Class <ref refid="df/d61/a00031" kindref="compound">mc::gfx::ogl::Object</ref>  </term></varlistentry>
<listitem><para>create an RAII wrapper which calls <ref refid="df/d61/a00031_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">init()</ref> and <ref refid="df/d61/a00031_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">destroy()</ref> automatically </para><para>store what object is currently bound. static <ref refid="df/d61/a00031" kindref="compound">Object</ref> getBoundObject(), bool isBound()  </para></listitem>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000001"/>Namespace <ref refid="d9/dcc/a00102" kindref="compound">mc::os</ref>  </term></varlistentry>
<listitem><para>Add function for pausing the console  </para></listitem>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000007"/>Class <ref refid="db/df3/a00034" kindref="compound">mc::Preprocessor</ref>  </term></varlistentry>
<listitem><para>Digraphs (see 6.4.6 of standard) </para><para>Variable arguments </para><para><ref refid="dc/d3c/a00028" kindref="compound">Macro</ref> concat </para><para><computeroutput>#if and</computeroutput>#elif` </para><para><computeroutput>#pragma</computeroutput> (if STDC follows, do no macro replacement) </para></listitem>
</variablelist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
