<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d8/d84/a00001" kind="page">
    <compoundname>todo</compoundname>
    <title>Todo List</title>
    <detaileddescription>
<para><variablelist>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000001"/>Class <ref refid="d2/de7/a00014" kindref="compound">mc::gfx::Entity</ref>  </term></varlistentry>
<listitem><para>Events for hover for both <ref refid="d2/de7/a00014" kindref="compound">Entity</ref> and <ref refid="d7/dec/a00010" kindref="compound">Component</ref>  </para></listitem>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000002"/>Class <ref refid="db/db2/a00020" kindref="compound">mc::gfx::Image</ref>  </term></varlistentry>
<listitem><para>figure out a way to make the protocol globally accessible  </para></listitem>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000003"/>Namespace <ref refid="d2/d1f/a00083" kindref="compound">mc::gfx::ogl</ref>  </term></varlistentry>
<listitem><para>create a ReadableBuffer class with functions like glReadPixels  </para></listitem>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000005"/>Class <ref refid="d4/d51/a00017" kindref="compound">mc::gfx::ogl::FrameBuffer</ref>  </term></varlistentry>
<listitem><para>target variable which is GL_FRAMEBUFFER by default. and update documentation accordingly  </para></listitem>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000006"/>Member <ref refid="d4/d51/a00017_a434fab868b01413a58d5eabd81384f56_1a434fab868b01413a58d5eabd81384f56" kindref="member">mc::gfx::ogl::FrameBuffer::attachTexture</ref>  (const Enum target, const Enum attachment, const unsigned int textureID, const int level=0)</term></varlistentry>
<listitem><para>Replace this with the actual <ref refid="db/d3a/a00040" kindref="compound">Texture</ref> class  </para></listitem>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000004"/>Class <ref refid="d0/d33/a00027" kindref="compound">mc::gfx::ogl::Object</ref>  </term></varlistentry>
<listitem><para>create an RAII wrapper which calls <ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">init()</ref> and <ref refid="d0/d33/a00027_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">destroy()</ref> automatically </para><para>store what object is currently bound. static <ref refid="d0/d33/a00027" kindref="compound">Object</ref> getBoundObject(), bool isBound()  </para></listitem>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000007"/>Namespace <ref refid="df/d13/a00085" kindref="compound">mc::os</ref>  </term></varlistentry>
<listitem><para>Move this to a seperate header </para><para>Add functions for cross-platform time and pausing the console  </para></listitem>
<varlistentry><term><anchor id="d8/d84/a00001_1_todo000008"/>Class <ref refid="d5/d79/a00030" kindref="compound">mc::Preprocessor</ref>  </term></varlistentry>
<listitem><para>Digraphs (see 6.4.6 of standard) </para><para>Variable arguments </para><para><ref refid="dc/de2/a00024" kindref="compound">Macro</ref> concat </para><para><computeroutput>#if and</computeroutput>#elif` </para><para><computeroutput>#pragma</computeroutput> (if STDC follows, do no macro replacement) </para></listitem>
</variablelist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
