<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d2/d1f/a00083" kind="namespace" language="C++">
    <compoundname>mc::gfx::ogl</compoundname>
    <innerclass refid="de/d5e/a00007" prot="public">mc::gfx::ogl::Buffer</innerclass>
    <innerclass refid="da/d45/a00011" prot="public">mc::gfx::ogl::CopyReadBuffer</innerclass>
    <innerclass refid="df/d86/a00012" prot="public">mc::gfx::ogl::CopyWriteBuffer</innerclass>
    <innerclass refid="d7/dd4/a00013" prot="public">mc::gfx::ogl::ElementBuffer</innerclass>
    <innerclass refid="d4/d51/a00017" prot="public">mc::gfx::ogl::FrameBuffer</innerclass>
    <innerclass refid="d0/d33/a00027" prot="public">mc::gfx::ogl::Object</innerclass>
    <innerclass refid="dc/d3c/a00028" prot="public">mc::gfx::ogl::PixelPackBuffer</innerclass>
    <innerclass refid="d5/d16/a00029" prot="public">mc::gfx::ogl::PixelUnpackBuffer</innerclass>
    <innerclass refid="df/d61/a00031" prot="public">mc::gfx::ogl::QueryObject</innerclass>
    <innerclass refid="dc/d87/a00032" prot="public">mc::gfx::ogl::RenderBuffer</innerclass>
    <innerclass refid="d1/dc6/a00037" prot="public">mc::gfx::ogl::Shader</innerclass>
    <innerclass refid="d8/d41/a00038" prot="public">mc::gfx::ogl::ShaderProgram</innerclass>
    <innerclass refid="db/d3a/a00040" prot="public">mc::gfx::ogl::Texture</innerclass>
    <innerclass refid="d5/db6/a00042" prot="public">mc::gfx::ogl::UniformBuffer</innerclass>
    <innerclass refid="d5/df9/a00044" prot="public">mc::gfx::ogl::VertexArray</innerclass>
    <innerclass refid="d6/d97/a00045" prot="public">mc::gfx::ogl::VertexBuffer</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d2/d1f/a00083_a4d4b1e26db71efde9e70e954c2287a48_1a4d4b1e26db71efde9e70e954c2287a48" prot="public" static="no">
        <type><ref refid="d7/d7a/a00016" kindref="compound">Exception</ref></type>
        <definition>using mc::gfx::ogl::GLError = typedef Exception</definition>
        <argsstring></argsstring>
        <name>GLError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="47" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/d1f/a00083_a25cf22a3952b4106cf8a4c91eda687cf_1a25cf22a3952b4106cf8a4c91eda687cf" prot="public" static="no">
        <type><ref refid="d7/d7a/a00016" kindref="compound">Exception</ref></type>
        <definition>using mc::gfx::ogl::ShaderError = typedef Exception</definition>
        <argsstring></argsstring>
        <name>ShaderError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="49" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d2/d1f/a00083_a2e2a291b626b3c86fc462b67dbbb4c86_1a2e2a291b626b3c86fc462b67dbbb4c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::checkGLError</definition>
        <argsstring>(const Index line=0, const char *file=&quot;Unknown file&quot;)</argsstring>
        <name>checkGLError</name>
        <param>
          <type>const <ref refid="da/dec/a00080_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>line</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
          <defval>&quot;Unknown file&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1f/a00083_a73fba49dddfb3d9a1562b9a047211edd_1a73fba49dddfb3d9a1562b9a047211edd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::checkGLError</definition>
        <argsstring>(const Index line, const std::string &amp;file)</argsstring>
        <name>checkGLError</name>
        <param>
          <type>const <ref refid="da/dec/a00080_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>line</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="58" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains various abstractions for OpenGL. </para>    </briefdescription>
    <detaileddescription>
<para>Assume that any class in this namespace requires an OpenGL context. </para><para>OpenGL abstractions will only implement functionality from OpenGL 3.3, as that is what MACE supports. </para><para>Most of the abstractions have very minimal extra work. Most of the time they are direct bindings to the actual OpenGL function. However, some classes like <computeroutput><ref refid="d8/d41/a00038" kindref="compound">ShaderProgram</ref></computeroutput> do a lot of bookkeeping to make it easier to use. </para><para>The documentation for classes in the <computeroutput>ogl</computeroutput> namespace assumes that you understand the underlying OpenGL concepts. A link to a page about the OpenGL concept is usually present. </para><para>Each abstraction follows a very similar syntax and style to make it easier to understand. <simplesect kind="see"><para><ref refid="d0/d33/a00027" kindref="compound">Object</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="de/d5e/a00007" kindref="compound">Buffer</ref> </para></simplesect>
<xrefsect id="d8/d84/a00001_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>create a ReadableBuffer class with functions like glReadPixels </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="include/MACE/Graphics/OGL.h" line="45" column="1"/>
  </compounddef>
</doxygen>
