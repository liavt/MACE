<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="db/d57/a00112" kind="namespace" language="C++">
    <compoundname>mc::math</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="db/d57/a00112_a7c7ac6de16a4f06e6d60cad89aaa3607_1a7c7ac6de16a4f06e6d60cad89aaa3607" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr long double</type>
        <definition>constexpr long double mc::math::pi</definition>
        <argsstring>()</argsstring>
        <name>pi</name>
        <briefdescription>
<para>Calculates the mathmatical constant <computeroutput>pi</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>Pi</computeroutput> is the ratio of a circle&apos;s circumfernce to it&apos;s diameter, always coming out to equal roughly 3.14, no matter the size of the circle. </para><para>It is located here as a <computeroutput>long double</computeroutput> to have the most possible digits. <simplesect kind="return"><para>Pi </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="27" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="27" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a971d1555c030481c4380be499645c941_1a971d1555c030481c4380be499645c941" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr long double</type>
        <definition>constexpr long double mc::math::tau</definition>
        <argsstring>()</argsstring>
        <name>tau</name>
        <briefdescription>
<para>Calculates the mathmatical constant <computeroutput>tau</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>Tau</computeroutput> is known as <computeroutput>2pi</computeroutput> and represents the full turn of a circle. It also represents 6.28 radians, a full circle, equal to 360 degrees. <simplesect kind="return"><para>Tau </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_aeef2c3777e1e207dc7410e323ff1b342_1aeef2c3777e1e207dc7410e323ff1b342" kindref="member">toRadians()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="36" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="36" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_afebc55463f2ae0a40892378a0df31a11_1afebc55463f2ae0a40892378a0df31a11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr long double</type>
        <definition>constexpr long double mc::math::gamma</definition>
        <argsstring>()</argsstring>
        <name>gamma</name>
        <briefdescription>
<para>Calculates the mathmatical constant represented by <computeroutput>gamma</computeroutput>, or the `Euler–Mascheroni constant. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>Gamma is used in number theory and analysis. @return The</computeroutput>Euler–Mascheroni constant` </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="44" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a09c5a0757eda8a59265497d395376b71_1a09c5a0757eda8a59265497d395376b71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr long double</type>
        <definition>constexpr long double mc::math::e</definition>
        <argsstring>()</argsstring>
        <name>e</name>
        <briefdescription>
<para>Calculates the mathmatical constant known as <computeroutput>Eulers Number,</computeroutput> or <computeroutput>e</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>E</computeroutput> is used as the base for the natural logarithim. <simplesect kind="return"><para><computeroutput>Eulers Number</computeroutput> </para></simplesect>
<simplesect kind="see"><para>logn(double); </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="53" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_ae0b2805e4292d944a84274329961a784_1ae0b2805e4292d944a84274329961a784" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr long double</type>
        <definition>constexpr long double mc::math::root2</definition>
        <argsstring>()</argsstring>
        <name>root2</name>
        <briefdescription>
<para>Calculates the square root of 2, also known as the <computeroutput>principal square root of 2</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This number when multiplied by itself returns 2. It is used in trigonometry. <simplesect kind="return"><para>Square root of 2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="61" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_aefe655698fdb883ebe648b285453fcda_1aefe655698fdb883ebe648b285453fcda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr long double</type>
        <definition>constexpr long double mc::math::root3</definition>
        <argsstring>()</argsstring>
        <name>root3</name>
        <briefdescription>
<para>Calculates the square root of 3, also known as the <computeroutput>principal square root of 3</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This number when multiplied by itself returns 3. It is used in geometery and trigonometry. <simplesect kind="return"><para>Square root of 3 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="69" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a964e30f7dbfd2a654a0f191f78418e54_1a964e30f7dbfd2a654a0f191f78418e54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr long double</type>
        <definition>constexpr long double mc::math::root5</definition>
        <argsstring>()</argsstring>
        <name>root5</name>
        <briefdescription>
<para>Calculates the square root of 5, also known as the <computeroutput>principal square root of 5</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This number when multiplied by itself returns 5. It is used in geometery and trigonometry. <simplesect kind="return"><para>Square root of 5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="77" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a3c2a13c4b329b8ca86efc79439200c2e_1a3c2a13c4b329b8ca86efc79439200c2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr long double</type>
        <definition>constexpr long double mc::math::phi</definition>
        <argsstring>()</argsstring>
        <name>phi</name>
        <briefdescription>
<para>Calculates the golden ratio, also represented by <computeroutput>phi</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The golden ratio is referenced throughout many different parts of mathmatics, including geometery, trigonometry, pyramids, the fibonacci sequence, and algebra. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="84" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_afa00f8e51d6accd2ca4de2aadf51121b_1afa00f8e51d6accd2ca4de2aadf51121b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T mc::math::abs</definition>
        <argsstring>(const T value)</argsstring>
        <name>abs</name>
        <param>
          <type>const T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Gets the absolute value of a number. </para>        </briefdescription>
        <detaileddescription>
<para>The absolute value is the unsigned version of a number. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Number that is either negative or positive </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>|value|</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="94" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a3888da8fdc28b20f551f486d197bf2e5_1a3888da8fdc28b20f551f486d197bf2e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>signed</type>
            <declname>char</declname>
            <defname>char</defname>
          </param>
        </templateparamlist>
        <type>constexpr unsigned char</type>
        <definition>constexpr unsigned char mc::math::abs</definition>
        <argsstring>(const signed char value)</argsstring>
        <name>abs</name>
        <param>
          <type>const signed char</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="99" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a48fcefd1eb89089cc643716415d848ab_1a48fcefd1eb89089cc643716415d848ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>signed</type>
            <declname>int</declname>
            <defname>int</defname>
          </param>
        </templateparamlist>
        <type>constexpr unsigned int</type>
        <definition>constexpr unsigned int mc::math::abs</definition>
        <argsstring>(const signed int value)</argsstring>
        <name>abs</name>
        <param>
          <type>const signed int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="104" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="104" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a6cacd6add21fea3e3b8b7593cb4b9dbc_1a6cacd6add21fea3e3b8b7593cb4b9dbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>signed short</type>
            <declname>int</declname>
            <defname>int</defname>
          </param>
        </templateparamlist>
        <type>constexpr unsigned short int</type>
        <definition>constexpr unsigned short int mc::math::abs</definition>
        <argsstring>(const signed short int value)</argsstring>
        <name>abs</name>
        <param>
          <type>const signed short int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="109" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_aa369c746ac3b011ac0ca46c4773b65ab_1aa369c746ac3b011ac0ca46c4773b65ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>signed long</type>
            <declname>int</declname>
            <defname>int</defname>
          </param>
        </templateparamlist>
        <type>constexpr unsigned long int</type>
        <definition>constexpr unsigned long int mc::math::abs</definition>
        <argsstring>(const signed long int value)</argsstring>
        <name>abs</name>
        <param>
          <type>const signed long int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="114" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_ad0576d7775a8fa4d7f8d088d69200a1b_1ad0576d7775a8fa4d7f8d088d69200a1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>signed long long</type>
            <declname>int</declname>
            <defname>int</defname>
          </param>
        </templateparamlist>
        <type>constexpr unsigned long long int</type>
        <definition>constexpr unsigned long long int mc::math::abs</definition>
        <argsstring>(const signed long long int value)</argsstring>
        <name>abs</name>
        <param>
          <type>const signed long long int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="119" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a0062e47b504ec817027bd87b8fa1ece8_1a0062e47b504ec817027bd87b8fa1ece8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::math::ceil</definition>
        <argsstring>(const double value)</argsstring>
        <name>ceil</name>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>&quot;Ceils&quot; a number, or rounds it up. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to ceil </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>value,</computeroutput> but rounded up. </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_adc9dee80fd1ea08c2172847454e70bcf_1adc9dee80fd1ea08c2172847454e70bcf" kindref="member">floor(const double)</ref> </para></simplesect>
<simplesect kind="see"><para>round(const double) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_adc9dee80fd1ea08c2172847454e70bcf_1adc9dee80fd1ea08c2172847454e70bcf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr int</type>
        <definition>constexpr int mc::math::floor</definition>
        <argsstring>(const double value)</argsstring>
        <name>floor</name>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>&quot;Floors&quot; a number, or rounds it down. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to floor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>value,</computeroutput> but rounded down. </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_a0062e47b504ec817027bd87b8fa1ece8_1a0062e47b504ec817027bd87b8fa1ece8" kindref="member">ceil(const double)</ref> </para></simplesect>
<simplesect kind="see"><para>round(const double) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="140" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="140" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a61ac68996d847d2c8b01865714480a59_1a61ac68996d847d2c8b01865714480a59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::math::isPrime</definition>
        <argsstring>(const int value)</argsstring>
        <name>isPrime</name>
        <param>
          <type>const int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Verifies whether a number is prime. </para>        </briefdescription>
        <detaileddescription>
<para>A prime number is one that&apos;s only factors are one and itself. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to check if prime </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the number is prime, <computeroutput>false</computeroutput> otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a04b0ca2c49e6dc86facf5d57879715cc_1a04b0ca2c49e6dc86facf5d57879715cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool mc::math::isEven</definition>
        <argsstring>(const int value)</argsstring>
        <name>isEven</name>
        <param>
          <type>const int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Checks if a number is even. </para>        </briefdescription>
        <detaileddescription>
<para>An even number is one that is divisable by 2. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to check if even </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <computeroutput>value</computeroutput> is divisable by 2, <computeroutput>false</computeroutput> otherwise </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_a9b5cd5c7c66d72e5f95c0c362978e53c_1a9b5cd5c7c66d72e5f95c0c362978e53c" kindref="member">isOdd(const int)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="159" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a9b5cd5c7c66d72e5f95c0c362978e53c_1a9b5cd5c7c66d72e5f95c0c362978e53c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool mc::math::isOdd</definition>
        <argsstring>(const int value)</argsstring>
        <name>isOdd</name>
        <param>
          <type>const int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Checks if a number is odd. </para>        </briefdescription>
        <detaileddescription>
<para>An odd number is one that is not divisable by 2. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to check if odd </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <computeroutput>value</computeroutput> is not divisable by 2, <computeroutput>false</computeroutput> otherwise </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_a04b0ca2c49e6dc86facf5d57879715cc_1a04b0ca2c49e6dc86facf5d57879715cc" kindref="member">isEven(const int)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="168" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a45b58ebbe8267f90c859e692e253af23_1a45b58ebbe8267f90c859e692e253af23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mc::math::pow</definition>
        <argsstring>(const double value, const int power)</argsstring>
        <name>pow</name>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>power</declname>
        </param>
        <briefdescription>
<para>Calculates a number to an exponenet, or <computeroutput>value^power</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Base number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>value^power</computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_a7e5ef3f323d1e3368c3e1d5d0f59cbd8_1a7e5ef3f323d1e3368c3e1d5d0f59cbd8" kindref="member">sqr(const T)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_ae4fe5e8b8e9cd29a9a598848e21da2a4_1ae4fe5e8b8e9cd29a9a598848e21da2a4" kindref="member">cube(const T)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a7e5ef3f323d1e3368c3e1d5d0f59cbd8_1a7e5ef3f323d1e3368c3e1d5d0f59cbd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T mc::math::sqr</definition>
        <argsstring>(const T value)</argsstring>
        <name>sqr</name>
        <param>
          <type>const T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Squares a number. </para>        </briefdescription>
        <detaileddescription>
<para>Squaring a number equals a number times iteslf. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to square </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>value^2</computeroutput> or <computeroutput>value*value</computeroutput> </para></simplesect>
<simplesect kind="see"><para>pow(const double, const double) </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_ae4fe5e8b8e9cd29a9a598848e21da2a4_1ae4fe5e8b8e9cd29a9a598848e21da2a4" kindref="member">cube(const T)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="190" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_ae4fe5e8b8e9cd29a9a598848e21da2a4_1ae4fe5e8b8e9cd29a9a598848e21da2a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T mc::math::cube</definition>
        <argsstring>(const T value)</argsstring>
        <name>cube</name>
        <param>
          <type>const T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Cubes a number. </para>        </briefdescription>
        <detaileddescription>
<para>Cubing a number is equal to itself to the power of 3. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to cube </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>value^3</computeroutput> or <computeroutput>value*value*value</computeroutput> </para></simplesect>
<simplesect kind="see"><para>pow(const double, const double) </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_a7e5ef3f323d1e3368c3e1d5d0f59cbd8_1a7e5ef3f323d1e3368c3e1d5d0f59cbd8" kindref="member">sqr(const T)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="202" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_aeef2c3777e1e207dc7410e323ff1b342_1aeef2c3777e1e207dc7410e323ff1b342" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double mc::math::toRadians</definition>
        <argsstring>(const double degrees)</argsstring>
        <name>toRadians</name>
        <param>
          <type>const double</type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
<para>Conversion of degreees to radians. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>degrees</parametername>
</parameternamelist>
<parameterdescription>
<para>An angle in degrees </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The same number represented as radians </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_a7c7ac6de16a4f06e6d60cad89aaa3607_1a7c7ac6de16a4f06e6d60cad89aaa3607" kindref="member">pi()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="212" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_aa8cb0d7f717caf5ddff0a11166b79905_1aa8cb0d7f717caf5ddff0a11166b79905" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double mc::math::toDegrees</definition>
        <argsstring>(const double radians)</argsstring>
        <name>toDegrees</name>
        <param>
          <type>const double</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
<para>Conversion of radians to degrees. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>radians</parametername>
</parameternamelist>
<parameterdescription>
<para>An angle in radians </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The same number represented as degrees </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_a7c7ac6de16a4f06e6d60cad89aaa3607_1a7c7ac6de16a4f06e6d60cad89aaa3607" kindref="member">pi()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Math.h" line="222" column="1" bodyfile="include/MACE/Utility/Math.h" bodystart="222" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_ad9cfc6fbc58467d9a9522d4c8f9d7220_1ad9cfc6fbc58467d9a9522d4c8f9d7220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Size</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; T, N, N &gt;</type>
        <definition>Matrix&lt; T, N, N &gt; mc::math::inverse</definition>
        <argsstring>(const Matrix&lt; T, N, N &gt; &amp;matrix)</argsstring>
        <name>inverse</name>
        <param>
          <type>const <ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; T, N, N &gt; &amp;</type>
          <defname>matrix</defname>
        </param>
        <briefdescription>
<para>Inverses a <computeroutput>N</computeroutput> by <computeroutput>N</computeroutput> <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>An inversed <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> times a normal <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> equals the identity <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> </para><para>Not to be confused with <computeroutput><ref refid="db/d57/a00112_a9fee5fdc1337ff82c34f77e518906d41_1a9fee5fdc1337ff82c34f77e518906d41" kindref="member">tr()</ref></computeroutput> </para><para>If <computeroutput>T</computeroutput> is not a floating point type, the output may not work, as it will round. </para><para>The output is calculated via the Caley-Hamilton theorum (<ulink url="https://en.wikipedia.org/wiki/Cayley%E2%80%93Hamilton_theorem">https://en.wikipedia.org/wiki/Cayley%E2%80%93Hamilton_theorem</ulink>) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> to invert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The inverse of <computeroutput>matrix</computeroutput> </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Order of the <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The size of the <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> must be greater than 1 </para></simplesect>
<xrefsect id="d7/d46/a00002_1_bug000006"><xreftitle>Bug</xreftitle><xrefdescription><para>Matrices bigger then 2x2 dont work </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="31" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="652" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a14f6c091b327dcf9f031bd21c550de5b_1a14f6c091b327dcf9f031bd21c550de5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Size</type>
            <declname>W</declname>
            <defname>W</defname>
          </param>
          <param>
            <type>Size</type>
            <declname>H</declname>
            <defname>H</defname>
          </param>
        </templateparamlist>
        <type><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; T, H, W &gt;</type>
        <definition>Matrix&lt;T, H, W&gt; mc::math::transpose</definition>
        <argsstring>(const Matrix&lt; T, W, H &gt; &amp;matrix)</argsstring>
        <name>transpose</name>
        <param>
          <type>const <ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; T, W, H &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Transposes a <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Transposing a <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> creates a reflection of it, where every row is a column. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>What to transpose </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reflected <computeroutput>matrix</computeroutput> </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>H</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="528" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="528" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_afaa8e2c785ad0a435935b894dd101375_1afaa8e2c785ad0a435935b894dd101375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T mc::math::det</definition>
        <argsstring>(const Matrix&lt; T, 2, 2 &gt; &amp;matrix)</argsstring>
        <name>det</name>
        <param>
          <type>const <ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; T, 2, 2 &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Calculates the determinate of a 2x2 <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>A square 2x2 <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> to find the determinate of </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The determinate of <computeroutput>matrix</computeroutput> </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="545" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="545" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_ad0b604c0b56449aa4e2cb9c231e7d7ec_1ad0b604c0b56449aa4e2cb9c231e7d7ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Size</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T mc::math::det</definition>
        <argsstring>(const Matrix&lt; T, N, N &gt; &amp;matrix)</argsstring>
        <name>det</name>
        <param>
          <type>const <ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; T, N, N &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Calculates the determinate of a any sized <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>A square <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> to find the determinate of </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The determinate of <computeroutput>matrix</computeroutput> </para></simplesect>
<xrefsect id="d7/d46/a00002_1_bug000005"><xreftitle>Bug</xreftitle><xrefdescription><para>Array subscript out of range with matrices bigger than 2x2 </para></xrefdescription></xrefsect><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The size of the <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> must be larger than 1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="559" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="559" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a9fee5fdc1337ff82c34f77e518906d41_1a9fee5fdc1337ff82c34f77e518906d41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Size</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T mc::math::tr</definition>
        <argsstring>(const Matrix&lt; T, N, N &gt; &amp;m)</argsstring>
        <name>tr</name>
        <param>
          <type>const <ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; T, N, N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Calculates the trace of a <ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The trace is the sum of all of the diagonal elements of a <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput>. </para><para>The trace is related to the derivative of a <ref refid="db/d57/a00112_afaa8e2c785ad0a435935b894dd101375_1afaa8e2c785ad0a435935b894dd101375" kindref="member">determinate.</ref> </para><para>Not to be confused with <computeroutput><ref refid="db/d57/a00112_a14f6c091b327dcf9f031bd21c550de5b_1a14f6c091b327dcf9f031bd21c550de5b" kindref="member">transpose(const Matrix&amp;)</ref>)</computeroutput> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> to calculate the trace of </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sum of the diagonal elements of <computeroutput>m</computeroutput> </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="db/d57/a00112_ad9cfc6fbc58467d9a9522d4c8f9d7220_1ad9cfc6fbc58467d9a9522d4c8f9d7220" kindref="member">inverse(const Matrix&lt;T,N,N&gt;&amp;)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="606" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="606" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a80edefaa133d7673d8023b612a5925a2_1a80edefaa133d7673d8023b612a5925a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Size</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; T, N, N &gt;</type>
        <definition>Matrix&lt;T, N, N&gt; mc::math::identity</definition>
        <argsstring>()</argsstring>
        <name>identity</name>
        <briefdescription>
<para>Creates an indentity <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> of a certain size. </para>        </briefdescription>
        <detaileddescription>
<para>An identity <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> times another <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> equals the same <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> <simplesect kind="return"><para>An indentity <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> whose diagonal elements are <computeroutput>1</computeroutput> </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the identity <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the identity <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="622" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="622" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a2cf39b1a5b7554e6d140a9c3c3041212_1a2cf39b1a5b7554e6d140a9c3c3041212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt;</type>
        <definition>Matrix&lt;float,4, 4&gt; mc::math::rotate</definition>
        <argsstring>(const float x, const float y, const float z)</argsstring>
        <name>rotate</name>
        <param>
          <type>const float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Creates a rotation matrix, which when multiplied by a <computeroutput>Vector4f</computeroutput>, rotates it. </para>        </briefdescription>
        <detaileddescription>
<para>The base <computeroutput>Matrix4f</computeroutput> is an identity matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation in radians around the X axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation in radians around the Y axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation in radians around the Z axis </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A rotation <computeroutput>Matrix4f</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a51931dc3e83f5ecdc7262b3974ef6fc5_1a51931dc3e83f5ecdc7262b3974ef6fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt;</type>
        <definition>Matrix&lt;float, 4, 4&gt; mc::math::rotate</definition>
        <argsstring>(const Vector&lt; float, 3 &gt; &amp;v)</argsstring>
        <name>rotate</name>
        <param>
          <type>const <ref refid="d9/da5/a00075" kindref="compound">Vector</ref>&lt; float, 3 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Creates a rotation matrix, which when multiplied by a <computeroutput>Vector4f</computeroutput>, rotates it. </para>        </briefdescription>
        <detaileddescription>
<para>The base <computeroutput>Matrix4f</computeroutput> is an identity matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A quaternion representing a rotation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A rotated <computeroutput>Matrix4f</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a9d5c92e8301c849af62f6b721eee13e9_1a9d5c92e8301c849af62f6b721eee13e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt;</type>
        <definition>Matrix&lt;float, 4, 4&gt; mc::math::rotate</definition>
        <argsstring>(const Matrix&lt; float, 4, 4 &gt; &amp;m, const Vector&lt; float, 3 &gt; &amp;v)</argsstring>
        <name>rotate</name>
        <param>
          <type>const <ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075" kindref="compound">Vector</ref>&lt; float, 3 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Rotates an existing <computeroutput>Matrix4f</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A quaternion representing a rotation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>Matrix4f</computeroutput> base to rotate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A rotated <computeroutput>Matrix4f</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a6acf4ae84e8f65be0237c23d4bb07b72_1a6acf4ae84e8f65be0237c23d4bb07b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt;</type>
        <definition>Matrix&lt;float, 4, 4&gt; mc::math::rotate</definition>
        <argsstring>(const Matrix&lt; float, 4, 4 &gt; &amp;m, const float x, const float y, const float z)</argsstring>
        <name>rotate</name>
        <param>
          <type>const <ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Rotates an existing <computeroutput>Matrix4f</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>Matrix4f</computeroutput> to rotate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation in radians around the X axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation in radians around the Y axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation in radians around the Z axis </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A rotated <computeroutput>Matrix4f</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_abd992f7c72bfd0f63282550deace7a6d_1abd992f7c72bfd0f63282550deace7a6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt;</type>
        <definition>Matrix&lt;float, 4, 4&gt; mc::math::scale</definition>
        <argsstring>(const float x, const float y, const float z)</argsstring>
        <name>scale</name>
        <param>
          <type>const float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Creates a scaling matrix, that when multiplied by a vector, scales the X, Y, and Z values. </para>        </briefdescription>
        <detaileddescription>
<para>The base <computeroutput>Matrix4f</computeroutput> is an identity matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to scale the X coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to scale the Y coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to scale the Z coordinate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput>Matrix4f</computeroutput> that is scaled based on the supplied values </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_ad022fe23efde75d0dc744534635cbda0_1ad022fe23efde75d0dc744534635cbda0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt;</type>
        <definition>Matrix&lt;float, 4, 4&gt; mc::math::scale</definition>
        <argsstring>(const Matrix&lt; float, 4, 4 &gt; &amp;m, const float x, const float y, const float z)</argsstring>
        <name>scale</name>
        <param>
          <type>const <ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Scales an existing transformation matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The base <computeroutput>Matrix4f</computeroutput> to get scaled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to scale the X coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to scale the Y coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to scale the Z coordinate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput>Matrix4f</computeroutput> that is scaled based on the supplied values </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a65116d02abed05f10cd80a9d89496a18_1a65116d02abed05f10cd80a9d89496a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt;</type>
        <definition>Matrix&lt;float, 4, 4&gt; mc::math::translate</definition>
        <argsstring>(const float x, const float y, const float z)</argsstring>
        <name>translate</name>
        <param>
          <type>const float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Creates a translation matrix, that when multiplied by a vector, translates the X, Y, and Z values. </para>        </briefdescription>
        <detaileddescription>
<para>The base <computeroutput>Matrix4f</computeroutput> is an identity matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to translate the X coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to translate the Y coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to translate the Z coordinate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput>Matrix4f</computeroutput> that is translated based on the supplied values </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_aeb201f7e27dce203cb52d274ca27262b_1aeb201f7e27dce203cb52d274ca27262b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt;</type>
        <definition>Matrix&lt;float, 4, 4&gt; mc::math::translate</definition>
        <argsstring>(const Matrix&lt; float, 4, 4 &gt; &amp;m, const float x, const float y, const float z)</argsstring>
        <name>translate</name>
        <param>
          <type>const <ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Translates an existing transformation matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The base <computeroutput>Matrix4f</computeroutput> to get translated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to translate the X coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to translate the Y coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to translate the Z coordinate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput>Matrix4f</computeroutput> that is translated based on the supplied values </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_afd08f8712921d537bd4942efae45a14f_1afd08f8712921d537bd4942efae45a14f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt;</type>
        <definition>Matrix&lt;float, 4, 4&gt; mc::math::projection</definition>
        <argsstring>(const float FOV, const float NEAR_PLANE, const float FAR_PLANE, const float aspectRatio)</argsstring>
        <name>projection</name>
        <param>
          <type>const float</type>
          <declname>FOV</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>NEAR_PLANE</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>FAR_PLANE</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>aspectRatio</declname>
        </param>
        <briefdescription>
<para>Generates a projection matrix based on values. </para>        </briefdescription>
        <detaileddescription>
<para>Each time the window changes size, you need to regenerate your projection matrix </para><para>Projection matrices are used in 3D graphics. Vectors multiplied by a projection matrix are transformed to &quot;look&quot; 3-dimensional. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>FOV</parametername>
</parameternamelist>
<parameterdescription>
<para>The field of vision, in degrees </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NEAR_PLANE</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>float</computeroutput> representing the near clipping plane. Z values lower than this are not visible to the viewer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FAR_PLANE</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>float</computeroutput> representing the far clipping plane. Z values higher than this are not visible to the viewer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aspectRatio</parametername>
</parameternamelist>
<parameterdescription>
<para>The aspect ratio of the screen. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A projection matrix made from the specified settings </para></simplesect>
<simplesect kind="see"><para>ortho(const float, const float, const float, const float, const float) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a6d5b57499cae06fda4e86d95258b1c2c_1a6d5b57499cae06fda4e86d95258b1c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/d87/a00032" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt;</type>
        <definition>Matrix&lt;float, 4, 4&gt; mc::math::ortho</definition>
        <argsstring>(const float left, const float right, const float bottom, const float top, const float near, const float far)</argsstring>
        <name>ortho</name>
        <param>
          <type>const float</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>right</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>top</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>near</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>far</declname>
        </param>
        <briefdescription>
<para>Generates an orthographic projection matrix. </para>        </briefdescription>
        <detaileddescription>
<para>As opposed to a standard projection matrix, vectors in an orthographic projection don&apos;t become smaller the farther away they are. When combined with a rotational matrix, it can create an isometric view, which is used extensively in games like Simcity. Isometric views are also used heavily in 3D modeling software to represent the dimensions of an object.In a 2D environment, an orthographic projection matrix can be used to scale the screen. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>The left plane of the orthographic projection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>The right plane of the orthographic projection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>The bottom plane of the orthographic projection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>The top plane of the orthographic projection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>near</parametername>
</parameternamelist>
<parameterdescription>
<para>The near plane of the orthographic projection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>far</parametername>
</parameternamelist>
<parameterdescription>
<para>The far plane of the orthographic projection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ortographic projection matrix generated from the values. </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_afd08f8712921d537bd4942efae45a14f_1afd08f8712921d537bd4942efae45a14f" kindref="member">projection(const float, const float, const float, const float)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a2afa253e79730670dfb6298d282236b5_1a2afa253e79730670dfb6298d282236b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/da5/a00075" kindref="compound">Vector</ref>&lt; T, 3 &gt;</type>
        <definition>Vector&lt;T, 3&gt; mc::math::cross</definition>
        <argsstring>(const Vector&lt; T, 3 &gt; &amp;a, const Vector&lt; T, 3 &gt; &amp;b)</argsstring>
        <name>cross</name>
        <param>
          <type>const <ref refid="d9/da5/a00075" kindref="compound">Vector</ref>&lt; T, 3 &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075" kindref="compound">Vector</ref>&lt; T, 3 &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Calculates the cross product of 2 <computeroutput>Vectors</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput><ref refid="d9/da5/a00075" kindref="compound">Vector</ref></computeroutput> must be 3-dimensional. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First <computeroutput><ref refid="d9/da5/a00075" kindref="compound">Vector</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second <computeroutput><ref refid="d9/da5/a00075" kindref="compound">Vector</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector calculated from the cross product of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_a0c07c85e6b00cfd2a26759979161fc1c_1a0c07c85e6b00cfd2a26759979161fc1c" kindref="member">dot(const Vector&amp;, const Vector&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_a7958bca152122020b061e41db09dacad_1a7958bca152122020b061e41db09dacad" kindref="member">magnitude(const Vector&amp;)</ref> </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the <computeroutput>Vectors</computeroutput> being calculated. This does not need to be explicitely set. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="689" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="689" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a0c07c85e6b00cfd2a26759979161fc1c_1a0c07c85e6b00cfd2a26759979161fc1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Size</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T mc::math::dot</definition>
        <argsstring>(const Vector&lt; T, N &gt; &amp;a, const Vector&lt; T, N &gt; &amp;b)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="d9/da5/a00075" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Calculates the dot product of 2 <computeroutput>Vectors</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First <computeroutput><ref refid="d9/da5/a00075" kindref="compound">Vector</ref></computeroutput> to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second <computeroutput><ref refid="d9/da5/a00075" kindref="compound">Vector</ref></computeroutput> to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A scalar calculated from the dot product of <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput> </para></simplesect>
<simplesect kind="see"><para>cross(const Vector&amp;, const Vector&amp;) </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_a7958bca152122020b061e41db09dacad_1a7958bca152122020b061e41db09dacad" kindref="member">magnitude(const Vector&amp;)</ref> </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the <computeroutput>Vectors</computeroutput> being calculated. This does not need to be explicitely set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>Vectors</computeroutput> being calculated. This does not need to be explicitely set. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="719" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="719" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_a7958bca152122020b061e41db09dacad_1a7958bca152122020b061e41db09dacad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Size</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T mc::math::magnitude</definition>
        <argsstring>(const Vector&lt; T, N &gt; &amp;a)</argsstring>
        <name>magnitude</name>
        <param>
          <type>const <ref refid="d9/da5/a00075" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Calculates the magnitude of a <computeroutput><ref refid="d9/da5/a00075" kindref="compound">Vector</ref></computeroutput>, or how long it is. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="d9/da5/a00075" kindref="compound">Vector</ref></computeroutput> to calculate from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The magnitude of <computeroutput><ref refid="d9/da5/a00075" kindref="compound">Vector</ref> a</computeroutput> </para></simplesect>
<simplesect kind="see"><para>cross(const Vector&amp;, const Vector&amp;) </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_a0c07c85e6b00cfd2a26759979161fc1c_1a0c07c85e6b00cfd2a26759979161fc1c" kindref="member">dot(const Vector&amp;, const Vector&amp;)</ref> </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the <computeroutput>Vectors</computeroutput> being calculated. This does not need to be explicitely set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput>Vectors</computeroutput> being calculated. This does not need to be explicitely set. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="737" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="737" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="db/d57/a00112_ad11a3dbb6a8527a40a6fdd83fc654490_1ad11a3dbb6a8527a40a6fdd83fc654490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Size</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d9/da5/a00075" kindref="compound">Vector</ref>&lt; T, N &gt;</type>
        <definition>Vector&lt;T, N&gt; mc::math::normalize</definition>
        <argsstring>(Vector&lt; T, N &gt; &amp;vector)</argsstring>
        <name>normalize</name>
        <param>
          <type><ref refid="d9/da5/a00075" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Normalize a <computeroutput><ref refid="d9/da5/a00075" kindref="compound">Vector</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>A normalized <computeroutput><ref refid="d9/da5/a00075" kindref="compound">Vector</ref></computeroutput> has a length of 1, and is also known as a unit vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><ref refid="d9/da5/a00075" kindref="compound">Vector</ref></computeroutput> to normalize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A unit <computeroutput><ref refid="d9/da5/a00075" kindref="compound">Vector</ref></computeroutput> with a norm of ` </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_a7958bca152122020b061e41db09dacad_1a7958bca152122020b061e41db09dacad" kindref="member">magnitude(const Vector&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d57/a00112_a0c07c85e6b00cfd2a26759979161fc1c_1a0c07c85e6b00cfd2a26759979161fc1c" kindref="member">dot(const Vector&amp;, const Vector&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para>cross(const Vector&amp;, const Vector&amp;) </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of <computeroutput><ref refid="d9/da5/a00075" kindref="compound">Vector</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the <computeroutput><ref refid="d9/da5/a00075" kindref="compound">Vector</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="757" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="757" bodyend="759"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Namespace with various mathmatical functions. </para>    </briefdescription>
    <detaileddescription>
<para>Namespace that contains mathmathetics with vectors and functions relevant in graphics programming. </para>    </detaileddescription>
    <location file="include/MACE/Utility/Math.h" line="20" column="1"/>
  </compounddef>
</doxygen>
