<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="db/d3a/a00040" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::UniformBuffer</compoundname>
    <basecompoundref refid="de/d5e/a00007" prot="public" virt="non-virtual">mc::gfx::Buffer</basecompoundref>
    <includes refid="d6/d97/a00045" local="no">Buffer.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="db/d3a/a00040_1a86fffd43147966e994383f06d5c92792" prot="private" static="no" mutable="no">
        <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::UniformBuffer::location</definition>
        <argsstring></argsstring>
        <name>location</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="817" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="817" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="db/d3a/a00040_a011e2699455a97dbd325bab3ca3ede06_1a011e2699455a97dbd325bab3ca3ede06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mc::gfx::UniformBuffer::UniformBuffer</definition>
        <argsstring>()</argsstring>
        <name>UniformBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="770" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/a00040_a09b4ec4a8a0d774574643eb2f9b31e86_1a09b4ec4a8a0d774574643eb2f9b31e86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::UniformBuffer::setLocation</definition>
        <argsstring>(const Index location)</argsstring>
        <name>setLocation</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>location</declname>
        </param>
        <briefdescription>
<para>Modify the location that this <computeroutput><ref refid="db/d3a/a00040" kindref="compound">UniformBuffer</ref></computeroutput> is currently bound to. </para>        </briefdescription>
        <detaileddescription>
<para>The location is used in the <ref refid="db/d3a/a00040_a5a2a547303b2f7606316ee7dd57d0695_1a5a2a547303b2f7606316ee7dd57d0695" kindref="member">UniformBuffer::bindForRender(const Index, const GLsizeiptr) const</ref> and <ref refid="db/d3a/a00040_a870d17788fd14533d9c099db6896426d_1a870d17788fd14533d9c099db6896426d" kindref="member">UniformBuffer::bindToUniformBlock(const Index, const char*) const </ref>functions, as well as in the shaders. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>The new location for this <computeroutput><ref refid="db/d3a/a00040" kindref="compound">UniformBuffer</ref></computeroutput> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="780" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/a00040_af35ae3c6a61a35263b0b65eef3e4610e_1af35ae3c6a61a35263b0b65eef3e4610e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::UniformBuffer::getLocation</definition>
        <argsstring>()</argsstring>
        <name>getLocation</name>
        <briefdescription>
<para>Retrieves the location that this <computeroutput><ref refid="db/d3a/a00040" kindref="compound">UniformBuffer</ref></computeroutput> is currently bound to. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The location </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d3a/a00040_a09b4ec4a8a0d774574643eb2f9b31e86_1a09b4ec4a8a0d774574643eb2f9b31e86" kindref="member">UniformBuffer::setLocation(const Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="786" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/a00040_acff8bb771343153d69ebe138917325a2_1acff8bb771343153d69ebe138917325a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>const Index mc::gfx::UniformBuffer::getLocation</definition>
        <argsstring>() const </argsstring>
        <name>getLocation</name>
        <briefdescription>
<para>Retrieves the location that this <computeroutput><ref refid="db/d3a/a00040" kindref="compound">UniformBuffer</ref></computeroutput> is currently bound to. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The location </para></simplesect>
<simplesect kind="see"><para><ref refid="db/d3a/a00040_a09b4ec4a8a0d774574643eb2f9b31e86_1a09b4ec4a8a0d774574643eb2f9b31e86" kindref="member">UniformBuffer::setLocation(const Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="790" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/a00040_a5a2a547303b2f7606316ee7dd57d0695_1a5a2a547303b2f7606316ee7dd57d0695" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::UniformBuffer::bindForRender</definition>
        <argsstring>(const Index offset=0, const GLsizeiptr size=-1) const </argsstring>
        <name>bindForRender</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const GLsizeiptr</type>
          <declname>size</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Binds this <computeroutput><ref refid="db/d3a/a00040" kindref="compound">UniformBuffer</ref></computeroutput> for rendering. </para>        </briefdescription>
        <detaileddescription>
<para>Must be called before a rendering call is used. </para><para>Not to be confused with <ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>How many components to start at in rendering. 0 by default </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>How many components to use in rendering </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glBindBufferBase">https://www.opengl.org/wiki/GLAPI/glBindBufferBase</ulink> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glBindBufferRange">https://www.opengl.org/wiki/GLAPI/glBindBufferRange</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="802" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/a00040_a870d17788fd14533d9c099db6896426d_1a870d17788fd14533d9c099db6896426d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::UniformBuffer::bindToUniformBlock</definition>
        <argsstring>(const Index programID, const char *blockName) const </argsstring>
        <name>bindToUniformBlock</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>programID</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>blockName</declname>
        </param>
        <briefdescription>
<para>Binds this <computeroutput><ref refid="db/d3a/a00040" kindref="compound">UniformBuffer</ref></computeroutput> to a `ShaderProgram. </para>        </briefdescription>
        <detaileddescription>
<para>` Must be used or else the shader won&apos;t be able to access the buffer data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>programID</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the <computeroutput><ref refid="d1/dc6/a00037" kindref="compound">ShaderProgram</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the uniform block in the shader to bind to. Must be case sensitive. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glUniformBlockBinding">https://www.opengl.org/wiki/GLAPI/glUniformBlockBinding</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="812" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/a00040_adacc98c009d74110f2db85e4165ef6fb_1adacc98c009d74110f2db85e4165ef6fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::UniformBuffer::operator==</definition>
        <argsstring>(const UniformBuffer &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="db/d3a/a00040" kindref="compound">UniformBuffer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="814" column="1"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/a00040_a1e7ce3758c8c8bff1ab797239da1fd31_1a1e7ce3758c8c8bff1ab797239da1fd31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::UniformBuffer::operator!=</definition>
        <argsstring>(const UniformBuffer &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="db/d3a/a00040" kindref="compound">UniformBuffer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="815" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d5e/a00007_ad819858b5f38106d86b754caa8bd5c5f_1ad819858b5f38106d86b754caa8bd5c5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Buffer::isCreated</definition>
        <argsstring>() const  override</argsstring>
        <name>isCreated</name>
        <reimplements refid="d0/d33/a00027_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76">isCreated</reimplements>
        <briefdescription>
<para>Queries OpenGL whether this <ref refid="d0/d33/a00027" kindref="compound">Object</ref>&apos;s ID is a valid object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents memory </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="493" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d5e/a00007_a4e41f1edd3af05ad3beb41184df6ec91_1a4e41f1edd3af05ad3beb41184df6ec91" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::Buffer::init</definition>
        <argsstring>() override</argsstring>
        <name>init</name>
        <reimplements refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914">init</reimplements>
        <briefdescription>
<para>Calls the corresponding glCreate* function and assigns an ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80" kindref="member">Object::destroy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76" kindref="member">Object::isCreated() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="495" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d5e/a00007_a1efdadfb7598f9d5f2d968a3c654fc31_1a1efdadfb7598f9d5f2d968a3c654fc31" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::Buffer::destroy</definition>
        <argsstring>() override</argsstring>
        <name>destroy</name>
        <reimplements refid="d0/d33/a00027_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80">destroy</reimplements>
        <briefdescription>
<para>Calls the corresponding glDestroy* function and deletes the ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76" kindref="member">Object::isCreated() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet (<ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> has not been called) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="496" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d5e/a00007_a86c1f94a71f3e22ac7f3a37d8e276d7e_1a86c1f94a71f3e22ac7f3a37d8e276d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::Buffer::setData</definition>
        <argsstring>(const GLsizeiptr &amp;dataSize, const void *data, const Enum &amp;drawType=GL_DYNAMIC_DRAW)</argsstring>
        <name>setData</name>
        <param>
          <type>const GLsizeiptr &amp;</type>
          <declname>dataSize</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>drawType</declname>
          <defval>GL_DYNAMIC_DRAW</defval>
        </param>
        <briefdescription>
<para>Creates and initalizes the data store for this <computeroutput><ref refid="de/d5e/a00007" kindref="compound">Buffer</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dataSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer, measured in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the actual data. Using <computeroutput>nullptr</computeroutput> or <computeroutput>NULL</computeroutput> will create an empty buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drawType</parametername>
</parameternamelist>
<parameterdescription>
<para>Expected usage pattern for the data. GL_DYNAMIC_DRAW by default </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>Buffer::setDataRange(const Index, const GLsizeiptr, const void*) </para></simplesect>
<simplesect kind="see"><para><ref refid="de/d5e/a00007_a11774876cd6262f4a78d65802bc8e425_1a11774876cd6262f4a78d65802bc8e425" kindref="member">Buffer::copyData(Buffer&amp;, const GLsizeiptr&amp;, const Index&amp;, const Index&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glBufferData">https://www.opengl.org/wiki/GLAPI/glBufferData</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="509" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d5e/a00007_a6de81e29af09e5b6496d98c9d00cc509_1a6de81e29af09e5b6496d98c9d00cc509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::Buffer::setDataRange</definition>
        <argsstring>(const Index &amp;offset, const GLsizeiptr &amp;dataSize, const void *data)</argsstring>
        <name>setDataRange</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const GLsizeiptr &amp;</type>
          <declname>dataSize</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Sets data in a range of the buffer. </para>        </briefdescription>
        <detaileddescription>
<para>Does not initialize data. <ref refid="de/d5e/a00007" kindref="compound">Buffer</ref>:<ref refid="de/d5e/a00007_a86c1f94a71f3e22ac7f3a37d8e276d7e_1a86c1f94a71f3e22ac7f3a37d8e276d7e" kindref="member">setData(const GLsizeiptr&amp;, const void*, const Enum&amp;)</ref> must be called first. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset into the buffer to set the data, measured in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataSize</parametername>
</parameternamelist>
<parameterdescription>
<para>How large the region being inserted is, measured in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data being inserted </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glBufferSubData">https://www.opengl.org/wiki/GLAPI/glBufferSubData</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="de/d5e/a00007_a11774876cd6262f4a78d65802bc8e425_1a11774876cd6262f4a78d65802bc8e425" kindref="member">Buffer::copyData(Buffer&amp;, const GLsizeiptr&amp;, const Index&amp;, const Index&amp;)</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d5e/a00007_a11774876cd6262f4a78d65802bc8e425_1a11774876cd6262f4a78d65802bc8e425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::Buffer::copyData</definition>
        <argsstring>(Buffer &amp;other, const GLsizeiptr &amp;size, const Index &amp;readOffset=0, const Index &amp;writeOffset=0)</argsstring>
        <name>copyData</name>
        <param>
          <type><ref refid="de/d5e/a00007" kindref="compound">Buffer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>const GLsizeiptr &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;</type>
          <declname>readOffset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;</type>
          <declname>writeOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy part of the data store of this <computeroutput><ref refid="de/d5e/a00007" kindref="compound">Buffer</ref></computeroutput> into another <computeroutput><ref refid="de/d5e/a00007" kindref="compound">Buffer</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Target <computeroutput><ref refid="de/d5e/a00007" kindref="compound">Buffer</ref></computeroutput> to copy into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>How much data to copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>readOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>How much data to offset by in this <computeroutput><ref refid="de/d5e/a00007" kindref="compound">Buffer</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>writeOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to write the data in the target <computeroutput><ref refid="de/d5e/a00007" kindref="compound">Buffer</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="de/d5e/a00007_a86c1f94a71f3e22ac7f3a37d8e276d7e_1a86c1f94a71f3e22ac7f3a37d8e276d7e" kindref="member">Buffer::setData(const GLsizeiptr&amp;, const void*, const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glCopyBufferSubData">https://www.opengl.org/wiki/GLAPI/glCopyBufferSubData</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="da/d45/a00011" kindref="compound">CopyReadBuffer</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="df/d86/a00012" kindref="compound">CopyWriteBuffer</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="536" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d5e/a00007_a8cd6b5083eaa09b1363c7ecda6d8c4f1_1a8cd6b5083eaa09b1363c7ecda6d8c4f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mc::gfx::Buffer::map</definition>
        <argsstring>(const Enum &amp;access=GL_READ_WRITE)</argsstring>
        <name>map</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>access</declname>
          <defval>GL_READ_WRITE</defval>
        </param>
        <briefdescription>
<para>Maps the data in this <computeroutput><ref refid="de/d5e/a00007" kindref="compound">Buffer</ref></computeroutput> to a pointer on the CPU side. </para>        </briefdescription>
        <detaileddescription>
<para>May be slow.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>Which access to use. Must be GL_READ_ONLY, GL_WRITE_ONLY, or GL_READ_WRITE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glMapBuffer">https://www.opengl.org/wiki/GLAPI/glMapBuffer</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="de/d5e/a00007_a8803d235625108ad8d587a5c89282380_1a8803d235625108ad8d587a5c89282380" kindref="member">Buffer::mapRange(const Index&amp;, const Size&amp;, const unsigned int&amp;)</ref> </para></simplesect>
<simplesect kind="warning"><para>DO NOT DELETE THE POINTER RETURNED. IT IS NOT DYNAMICALLY ALLOCATED. </para></simplesect>
<simplesect kind="warning"><para>After <ref refid="de/d5e/a00007_a232f58c1afefbebe38ee6d433acc288e_1a232f58c1afefbebe38ee6d433acc288e" kindref="member">Buffer::unmap()</ref> is called, the pointer returned may be unsafe. Using it will be undefined. </para></simplesect>
<simplesect kind="attention"><para>When using this function don&apos;t forget to use <ref refid="de/d5e/a00007_a232f58c1afefbebe38ee6d433acc288e_1a232f58c1afefbebe38ee6d433acc288e" kindref="member">Buffer::unmap()</ref> when you are done using the pointer </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d5e/a00007_a8803d235625108ad8d587a5c89282380_1a8803d235625108ad8d587a5c89282380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* mc::gfx::Buffer::mapRange</definition>
        <argsstring>(const Index &amp;offset, const Size &amp;length, const unsigned int &amp;access)</argsstring>
        <name>mapRange</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const <ref refid="d1/d51/a00079_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref> &amp;</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>access</declname>
        </param>
        <briefdescription>
<para>Maps a range of data in this <computeroutput><ref refid="de/d5e/a00007" kindref="compound">Buffer</ref></computeroutput> to a pointer on the CPU side. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting offset to map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>How much data to map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access</parametername>
</parameternamelist>
<parameterdescription>
<para>A combination of access flags to determine how the data will be used. These flags determine how fast or slow the mapping will take. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glMapBufferRange">https://www.opengl.org/wiki/GLAPI/glMapBufferRange</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="de/d5e/a00007_a8cd6b5083eaa09b1363c7ecda6d8c4f1_1a8cd6b5083eaa09b1363c7ecda6d8c4f1" kindref="member">Buffer::map(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="warning"><para>DO NOT DELETE THE POINTER RETURNED. IT IS NOT DYNAMICALLY ALLOCATED. </para></simplesect>
<simplesect kind="warning"><para>After <ref refid="de/d5e/a00007_a232f58c1afefbebe38ee6d433acc288e_1a232f58c1afefbebe38ee6d433acc288e" kindref="member">Buffer::unmap()</ref> is called, the pointer returned may be unsafe. Using it will be undefined. </para></simplesect>
<simplesect kind="attention"><para>When using this function don&apos;t forget to use <ref refid="de/d5e/a00007_a232f58c1afefbebe38ee6d433acc288e_1a232f58c1afefbebe38ee6d433acc288e" kindref="member">Buffer::unmap()</ref> when you are done using the pointer </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="564" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d5e/a00007_a232f58c1afefbebe38ee6d433acc288e_1a232f58c1afefbebe38ee6d433acc288e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Buffer::unmap</definition>
        <argsstring>()</argsstring>
        <name>unmap</name>
        <briefdescription>
<para>Unmaps the buffer. </para>        </briefdescription>
        <detaileddescription>
<para>Any mapped points will be deleted and using them will be undefined.</para><para><simplesect kind="return"><para>Whether the data was corrupted during reading. This will be very rare but when it does happen you must reinitialize the data. </para></simplesect>
<simplesect kind="see"><para><ref refid="de/d5e/a00007_a8cd6b5083eaa09b1363c7ecda6d8c4f1_1a8cd6b5083eaa09b1363c7ecda6d8c4f1" kindref="member">Buffer::map(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="de/d5e/a00007_a8803d235625108ad8d587a5c89282380_1a8803d235625108ad8d587a5c89282380" kindref="member">Buffer::mapRange(const Index&amp;, const Size&amp;, const unsigned int&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glMapBuffer">https://www.opengl.org/wiki/GLAPI/glMapBuffer</ulink> </para></simplesect>
<simplesect kind="warning"><para>Using a pointer after it was unmapped will be undefined </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="576" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d5e/a00007_aba3829c409b1a2dd781dd7b12ee7019d_1aba3829c409b1a2dd781dd7b12ee7019d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Buffer::operator==</definition>
        <argsstring>(const Buffer &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="de/d5e/a00007" kindref="compound">Buffer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Object::operator==</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para>Their ID is compared. <simplesect kind="see"><para><ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/d5e/a00007_a9d5b5b3d8126102784cad2d692d8f517_1a9d5b5b3d8126102784cad2d692d8f517" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Buffer::operator!=</definition>
        <argsstring>(const Buffer &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="de/d5e/a00007" kindref="compound">Buffer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="579" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Object::operator!=</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para>Their ID is compared. <simplesect kind="see"><para><ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void mc::gfx::Object::bind</definition>
        <argsstring>() const </argsstring>
        <name>bind</name>
        <reimplementedby refid="df/d61/a00031_1a055cd452ca943cb84a4663d5dfca4f61">bind</reimplementedby>
        <briefdescription>
<para>Binds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> to be used in an OpenGL function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void mc::gfx::Object::unbind</definition>
        <argsstring>() const </argsstring>
        <name>unbind</name>
        <reimplementedby refid="df/d61/a00031_1a509b3f1d7b32a0b12060535698889b30">unbind</reimplementedby>
        <briefdescription>
<para>Unbinds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> which is equivalent to binding ID 0. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::Object::getID</definition>
        <argsstring>() const </argsstring>
        <name>getID</name>
        <briefdescription>
<para>Retrieves the current ID that this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents. </para>        </briefdescription>
        <detaileddescription>
<para>The ID is an unsigned number that acts like a pointer to OpenGL memory. It is assigned when <ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> is called. </para><para>If it is 0, the <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> is considered uncreated. </para><para>When using <ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const </ref>it will bind to this ID. <ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind() const </ref>will bind to ID 0, which is the equivelant of a null pointer. <simplesect kind="return"><para>The ID represented by this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="99" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d0/d33/a00027_a5c44ad260b3bd8a5825c434037d5f89f_1a5c44ad260b3bd8a5825c434037d5f89f" prot="protected" static="no" mutable="no">
        <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::Object::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The ID of this `Object. </para>        </briefdescription>
        <detaileddescription>
<para>` Should be set in <ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> and become 0 in <ref refid="d0/d33/a00027_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80" kindref="member">Object::destroy()</ref> </para><para><ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const </ref>returns this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="123" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Stores uniform data for a shader in the form of a buffer. </para>    </briefdescription>
    <detaileddescription>
<para>Can be used to share data between multiple shaders or quickly change between sets of uniforms in one program. <simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/Uniform_Buffer_Object">https://www.opengl.org/wiki/Uniform_Buffer_Object</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="d6/d42/a00043" kindref="compound">VertexBuffer</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="506">
        <label>mc::gfx::Buffer</label>
        <link refid="de/d5e/a00007"/>
        <childnode refid="507" relation="public-inheritance">
        </childnode>
      </node>
      <node id="505">
        <label>mc::gfx::UniformBuffer</label>
        <link refid="db/d3a/a00040"/>
        <childnode refid="506" relation="public-inheritance">
        </childnode>
      </node>
      <node id="507">
        <label>mc::gfx::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="509">
        <label>mc::gfx::Buffer</label>
        <link refid="de/d5e/a00007"/>
        <childnode refid="510" relation="public-inheritance">
        </childnode>
      </node>
      <node id="508">
        <label>mc::gfx::UniformBuffer</label>
        <link refid="db/d3a/a00040"/>
        <childnode refid="509" relation="public-inheritance">
        </childnode>
      </node>
      <node id="510">
        <label>mc::gfx::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/Buffer.h" line="768" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="768" bodyend="818"/>
    <listofallmembers>
      <member refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" prot="public" virt="virtual"><scope>mc::gfx::UniformBuffer</scope><name>bind</name></member>
      <member refid="db/d3a/a00040_a5a2a547303b2f7606316ee7dd57d0695_1a5a2a547303b2f7606316ee7dd57d0695" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>bindForRender</name></member>
      <member refid="db/d3a/a00040_a870d17788fd14533d9c099db6896426d_1a870d17788fd14533d9c099db6896426d" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>bindToUniformBlock</name></member>
      <member refid="de/d5e/a00007_a386c2ae30147295e6edb4f0dfdc26f37_1a386c2ae30147295e6edb4f0dfdc26f37" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>Buffer</name></member>
      <member refid="de/d5e/a00007_a11774876cd6262f4a78d65802bc8e425_1a11774876cd6262f4a78d65802bc8e425" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>copyData</name></member>
      <member refid="de/d5e/a00007_a1efdadfb7598f9d5f2d968a3c654fc31_1a1efdadfb7598f9d5f2d968a3c654fc31" prot="public" virt="virtual"><scope>mc::gfx::UniformBuffer</scope><name>destroy</name></member>
      <member refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>getID</name></member>
      <member refid="db/d3a/a00040_af35ae3c6a61a35263b0b65eef3e4610e_1af35ae3c6a61a35263b0b65eef3e4610e" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>getLocation</name></member>
      <member refid="db/d3a/a00040_acff8bb771343153d69ebe138917325a2_1acff8bb771343153d69ebe138917325a2" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>getLocation</name></member>
      <member refid="d0/d33/a00027_a5c44ad260b3bd8a5825c434037d5f89f_1a5c44ad260b3bd8a5825c434037d5f89f" prot="protected" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>id</name></member>
      <member refid="de/d5e/a00007_a4e41f1edd3af05ad3beb41184df6ec91_1a4e41f1edd3af05ad3beb41184df6ec91" prot="public" virt="virtual"><scope>mc::gfx::UniformBuffer</scope><name>init</name></member>
      <member refid="de/d5e/a00007_ad819858b5f38106d86b754caa8bd5c5f_1ad819858b5f38106d86b754caa8bd5c5f" prot="public" virt="virtual"><scope>mc::gfx::UniformBuffer</scope><name>isCreated</name></member>
      <member refid="db/d3a/a00040_1a86fffd43147966e994383f06d5c92792" prot="private" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>location</name></member>
      <member refid="de/d5e/a00007_a8cd6b5083eaa09b1363c7ecda6d8c4f1_1a8cd6b5083eaa09b1363c7ecda6d8c4f1" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>map</name></member>
      <member refid="de/d5e/a00007_a8803d235625108ad8d587a5c89282380_1a8803d235625108ad8d587a5c89282380" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>mapRange</name></member>
      <member refid="db/d3a/a00040_a1e7ce3758c8c8bff1ab797239da1fd31_1a1e7ce3758c8c8bff1ab797239da1fd31" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>operator!=</name></member>
      <member refid="de/d5e/a00007_a9d5b5b3d8126102784cad2d692d8f517_1a9d5b5b3d8126102784cad2d692d8f517" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::Buffer::"><scope>mc::gfx::UniformBuffer</scope><name>operator!=</name></member>
      <member refid="d0/d33/a00027_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::Object::"><scope>mc::gfx::UniformBuffer</scope><name>operator!=</name></member>
      <member refid="db/d3a/a00040_adacc98c009d74110f2db85e4165ef6fb_1adacc98c009d74110f2db85e4165ef6fb" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>operator==</name></member>
      <member refid="de/d5e/a00007_aba3829c409b1a2dd781dd7b12ee7019d_1aba3829c409b1a2dd781dd7b12ee7019d" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::Buffer::"><scope>mc::gfx::UniformBuffer</scope><name>operator==</name></member>
      <member refid="d0/d33/a00027_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::Object::"><scope>mc::gfx::UniformBuffer</scope><name>operator==</name></member>
      <member refid="de/d5e/a00007_a86c1f94a71f3e22ac7f3a37d8e276d7e_1a86c1f94a71f3e22ac7f3a37d8e276d7e" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>setData</name></member>
      <member refid="de/d5e/a00007_a6de81e29af09e5b6496d98c9d00cc509_1a6de81e29af09e5b6496d98c9d00cc509" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>setDataRange</name></member>
      <member refid="db/d3a/a00040_a09b4ec4a8a0d774574643eb2f9b31e86_1a09b4ec4a8a0d774574643eb2f9b31e86" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>setLocation</name></member>
      <member refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" prot="public" virt="virtual"><scope>mc::gfx::UniformBuffer</scope><name>unbind</name></member>
      <member refid="db/d3a/a00040_a011e2699455a97dbd325bab3ca3ede06_1a011e2699455a97dbd325bab3ca3ede06" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>UniformBuffer</name></member>
      <member refid="de/d5e/a00007_a232f58c1afefbebe38ee6d433acc288e_1a232f58c1afefbebe38ee6d433acc288e" prot="public" virt="non-virtual"><scope>mc::gfx::UniformBuffer</scope><name>unmap</name></member>
      <member refid="de/d5e/a00007_aa01febba34d6b6e0e062631a35aafaf6_1aa01febba34d6b6e0e062631a35aafaf6" prot="public" virt="virtual"><scope>mc::gfx::UniformBuffer</scope><name>~Buffer</name></member>
      <member refid="d0/d33/a00027_a4ea5dacb16804b43f4be8c2567bbd48b_1a4ea5dacb16804b43f4be8c2567bbd48b" prot="public" virt="virtual"><scope>mc::gfx::UniformBuffer</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
