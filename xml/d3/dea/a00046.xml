<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d3/dea/a00046" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::SimpleQuadRenderer</compoundname>
    <includes refid="d9/db3/a00066" local="no">Renderer.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d3/dea/a00046_1a08ed4bc1ad2afb4944d7d783ffe04a03" prot="private" static="no" mutable="no">
        <type><ref refid="d6/d97/a00045" kindref="compound">ogl::ShaderProgram</ref></type>
        <definition>ogl::ShaderProgram mc::gfx::SimpleQuadRenderer::shaders2D</definition>
        <argsstring></argsstring>
        <name>shaders2D</name>
        <initializer>= <ref refid="d6/d97/a00045" kindref="compound">ogl::ShaderProgram</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="300" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/dea/a00046_1ae55c7a31a3fc4d7f6cb7c422ebd45878" prot="private" static="no" mutable="no">
        <type><ref refid="dc/dee/a00053" kindref="compound">ogl::VertexArray</ref></type>
        <definition>ogl::VertexArray mc::gfx::SimpleQuadRenderer::square</definition>
        <argsstring></argsstring>
        <name>square</name>
        <initializer>= <ref refid="dc/dee/a00053" kindref="compound">ogl::VertexArray</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="301" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/dea/a00046_1ae3d6ae729a69af08720a7e92e726b21c" prot="private" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool mc::gfx::SimpleQuadRenderer::useSSL</definition>
        <argsstring></argsstring>
        <name>useSSL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="303" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d3/dea/a00046_a6f20bf748b4714cf20d6ea66bb89f218_1a6f20bf748b4714cf20d6ea66bb89f218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mc::gfx::SimpleQuadRenderer::SimpleQuadRenderer</definition>
        <argsstring>(const bool ssl=true)</argsstring>
        <name>SimpleQuadRenderer</name>
        <param>
          <type>const bool</type>
          <declname>ssl</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_a40d6af559377d10b97709685f4ed7c70_1a40d6af559377d10b97709685f4ed7c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::SimpleQuadRenderer::init</definition>
        <argsstring>(const char *vertexShader, const char *fragShader)</argsstring>
        <name>init</name>
        <param>
          <type>const char *</type>
          <declname>vertexShader</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fragShader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_ad11c108e4a34cac15d683f9e2fae4fd7_1ad11c108e4a34cac15d683f9e2fae4fd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::SimpleQuadRenderer::init</definition>
        <argsstring>(const char *vertexShader, const std::string &amp;fragShader)</argsstring>
        <name>init</name>
        <param>
          <type>const char *</type>
          <declname>vertexShader</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fragShader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_a4a4c6b52d025aa2128c9cf4e67696ac5_1a4a4c6b52d025aa2128c9cf4e67696ac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::SimpleQuadRenderer::init</definition>
        <argsstring>(const std::string &amp;vertexShader, const char *fragShader)</argsstring>
        <name>init</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vertexShader</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fragShader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_ac149c3748f0592279b8c09ce0e089a1e_1ac149c3748f0592279b8c09ce0e089a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::SimpleQuadRenderer::init</definition>
        <argsstring>(const std::string &amp;vertexShader, const std::string &amp;fragShader)</argsstring>
        <name>init</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>vertexShader</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fragShader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_a440110f763db19efbda7425eba97ed63_1a440110f763db19efbda7425eba97ed63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::SimpleQuadRenderer::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_aef26719f0319c297f5134d21c4438028_1aef26719f0319c297f5134d21c4438028" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::SimpleQuadRenderer::bind</definition>
        <argsstring>() const </argsstring>
        <name>bind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_a48aad346e44b0044e1a748569ed9ad1b_1a48aad346e44b0044e1a748569ed9ad1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::SimpleQuadRenderer::draw</definition>
        <argsstring>(const GraphicsEntity *en=nullptr)</argsstring>
        <name>draw</name>
        <param>
          <type>const <ref refid="de/d11/a00021" kindref="compound">GraphicsEntity</ref> *</type>
          <declname>en</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_a62f7e69bc0837b4daa66915d5957152e_1a62f7e69bc0837b4daa66915d5957152e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::SimpleQuadRenderer::setShader</definition>
        <argsstring>(const ogl::ShaderProgram &amp;shader)</argsstring>
        <name>setShader</name>
        <param>
          <type>const <ref refid="d6/d97/a00045" kindref="compound">ogl::ShaderProgram</ref> &amp;</type>
          <declname>shader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_ac4a4fc92880084844683f5b365e55b62_1ac4a4fc92880084844683f5b365e55b62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d97/a00045" kindref="compound">ogl::ShaderProgram</ref> &amp;</type>
        <definition>ogl::ShaderProgram&amp; mc::gfx::SimpleQuadRenderer::getShader</definition>
        <argsstring>()</argsstring>
        <name>getShader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_a0f129a8356d59239c80730091a0d3e85_1a0f129a8356d59239c80730091a0d3e85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d6/d97/a00045" kindref="compound">ogl::ShaderProgram</ref> &amp;</type>
        <definition>const ogl::ShaderProgram&amp; mc::gfx::SimpleQuadRenderer::getShader</definition>
        <argsstring>() const </argsstring>
        <name>getShader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_a667fa583612f7b4ea34653ab6e6d7480_1a667fa583612f7b4ea34653ab6e6d7480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::SimpleQuadRenderer::setVertexArray</definition>
        <argsstring>(const ogl::VertexArray &amp;vertices)</argsstring>
        <name>setVertexArray</name>
        <param>
          <type>const <ref refid="dc/dee/a00053" kindref="compound">ogl::VertexArray</ref> &amp;</type>
          <declname>vertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_a5742d8c595ed77eeb0155759d61f2add_1a5742d8c595ed77eeb0155759d61f2add" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/dee/a00053" kindref="compound">ogl::VertexArray</ref> &amp;</type>
        <definition>ogl::VertexArray&amp; mc::gfx::SimpleQuadRenderer::getVertexArray</definition>
        <argsstring>()</argsstring>
        <name>getVertexArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_a735aee6065eb403dd61d5d03ec38a5ae_1a735aee6065eb403dd61d5d03ec38a5ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="dc/dee/a00053" kindref="compound">ogl::VertexArray</ref> &amp;</type>
        <definition>const ogl::VertexArray&amp; mc::gfx::SimpleQuadRenderer::getVertexArray</definition>
        <argsstring>() const </argsstring>
        <name>getVertexArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_a61d5e3e6acbea808eee553f8e41796c0_1a61d5e3e6acbea808eee553f8e41796c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::SimpleQuadRenderer::operator==</definition>
        <argsstring>(const SimpleQuadRenderer &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d3/dea/a00046" kindref="compound">SimpleQuadRenderer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/dea/a00046_af921ab242875f66b3ba376d6148e6062_1af921ab242875f66b3ba376d6148e6062" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::SimpleQuadRenderer::operator!=</definition>
        <argsstring>(const SimpleQuadRenderer &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d3/dea/a00046" kindref="compound">SimpleQuadRenderer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="298" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/MACE/Graphics/Renderer.h" line="254" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="254" bodyend="304"/>
    <listofallmembers>
      <member refid="d3/dea/a00046_aef26719f0319c297f5134d21c4438028_1aef26719f0319c297f5134d21c4438028" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>bind</name></member>
      <member refid="d3/dea/a00046_a440110f763db19efbda7425eba97ed63_1a440110f763db19efbda7425eba97ed63" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>destroy</name></member>
      <member refid="d3/dea/a00046_a48aad346e44b0044e1a748569ed9ad1b_1a48aad346e44b0044e1a748569ed9ad1b" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>draw</name></member>
      <member refid="d3/dea/a00046_ac4a4fc92880084844683f5b365e55b62_1ac4a4fc92880084844683f5b365e55b62" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>getShader</name></member>
      <member refid="d3/dea/a00046_a0f129a8356d59239c80730091a0d3e85_1a0f129a8356d59239c80730091a0d3e85" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>getShader</name></member>
      <member refid="d3/dea/a00046_a5742d8c595ed77eeb0155759d61f2add_1a5742d8c595ed77eeb0155759d61f2add" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>getVertexArray</name></member>
      <member refid="d3/dea/a00046_a735aee6065eb403dd61d5d03ec38a5ae_1a735aee6065eb403dd61d5d03ec38a5ae" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>getVertexArray</name></member>
      <member refid="d3/dea/a00046_a40d6af559377d10b97709685f4ed7c70_1a40d6af559377d10b97709685f4ed7c70" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>init</name></member>
      <member refid="d3/dea/a00046_ad11c108e4a34cac15d683f9e2fae4fd7_1ad11c108e4a34cac15d683f9e2fae4fd7" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>init</name></member>
      <member refid="d3/dea/a00046_a4a4c6b52d025aa2128c9cf4e67696ac5_1a4a4c6b52d025aa2128c9cf4e67696ac5" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>init</name></member>
      <member refid="d3/dea/a00046_ac149c3748f0592279b8c09ce0e089a1e_1ac149c3748f0592279b8c09ce0e089a1e" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>init</name></member>
      <member refid="d3/dea/a00046_af921ab242875f66b3ba376d6148e6062_1af921ab242875f66b3ba376d6148e6062" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>operator!=</name></member>
      <member refid="d3/dea/a00046_a61d5e3e6acbea808eee553f8e41796c0_1a61d5e3e6acbea808eee553f8e41796c0" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>operator==</name></member>
      <member refid="d3/dea/a00046_a62f7e69bc0837b4daa66915d5957152e_1a62f7e69bc0837b4daa66915d5957152e" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>setShader</name></member>
      <member refid="d3/dea/a00046_a667fa583612f7b4ea34653ab6e6d7480_1a667fa583612f7b4ea34653ab6e6d7480" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>setVertexArray</name></member>
      <member refid="d3/dea/a00046_1a08ed4bc1ad2afb4944d7d783ffe04a03" prot="private" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>shaders2D</name></member>
      <member refid="d3/dea/a00046_a6f20bf748b4714cf20d6ea66bb89f218_1a6f20bf748b4714cf20d6ea66bb89f218" prot="public" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>SimpleQuadRenderer</name></member>
      <member refid="d3/dea/a00046_1ae55c7a31a3fc4d7f6cb7c422ebd45878" prot="private" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>square</name></member>
      <member refid="d3/dea/a00046_1ae3d6ae729a69af08720a7e92e726b21c" prot="private" virt="non-virtual"><scope>mc::gfx::SimpleQuadRenderer</scope><name>useSSL</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
