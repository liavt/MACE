<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d3/de7/a00039" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::ogl::Texture</compoundname>
    <basecompoundref refid="d0/d33/a00027" prot="public" virt="non-virtual">mc::gfx::ogl::Object</basecompoundref>
    <includes refid="d5/de0/a00050" local="no">OGL.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d3/de7/a00039_1affd77ce5390cf794a4da8f59dcf4529a" prot="private" static="no" mutable="no">
        <type>GLenum</type>
        <definition>GLenum mc::gfx::ogl::Texture::target</definition>
        <argsstring></argsstring>
        <name>target</name>
        <initializer>= GL_TEXTURE_2D</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="508" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/de7/a00039_1a4638b1fe966b0da31d0a61522c56ee69" prot="private" static="no" mutable="no">
        <type><ref refid="da/da0/a00009" kindref="compound">Color</ref></type>
        <definition>Color mc::gfx::ogl::Texture::paint</definition>
        <argsstring></argsstring>
        <name>paint</name>
        <initializer>= <ref refid="da/da0/a00009" kindref="compound">Color</ref>(1.0f, 1.0f, 1.0f, 1.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="510" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/de7/a00039_1ac97827909d922adefafbbea8bce7615f" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float mc::gfx::ogl::Texture::opacity</definition>
        <argsstring></argsstring>
        <name>opacity</name>
        <initializer>= 1.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="512" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="512" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d3/de7/a00039_a62f5985c5873d794455517035e5d022e_1a62f5985c5873d794455517035e5d022e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture::init</definition>
        <argsstring>() override</argsstring>
        <name>init</name>
        <reimplements refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c">init</reimplements>
        <briefdescription>
<para>Calls the corresponding glCreate* function and assigns an ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">Object::destroy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67" kindref="member">Object::isCreated() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="465" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a6a03ba23b0c284c60cc290b7ed6aa1be_1a6a03ba23b0c284c60cc290b7ed6aa1be" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture::destroy</definition>
        <argsstring>() override</argsstring>
        <name>destroy</name>
        <reimplements refid="d0/d33/a00027_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d">destroy</reimplements>
        <briefdescription>
<para>Calls the corresponding glDestroy* function and deletes the ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67" kindref="member">Object::isCreated() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet (<ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> has not been called) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a131558d5f2ff628f3de1750117671061_1a131558d5f2ff628f3de1750117671061" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture::setData</definition>
        <argsstring>(const void *data, Size width, Size height, GLenum type=GL_FLOAT, GLenum format=GL_RGB, GLenum internalFormat=GL_RGB, Index mipmapLevel=0)</argsstring>
        <name>setData</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="d9/da4/a00078_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="d9/da4/a00078_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>height</declname>
        </param>
        <param>
          <type>GLenum</type>
          <declname>type</declname>
          <defval>GL_FLOAT</defval>
        </param>
        <param>
          <type>GLenum</type>
          <declname>format</declname>
          <defval>GL_RGB</defval>
        </param>
        <param>
          <type>GLenum</type>
          <declname>internalFormat</declname>
          <defval>GL_RGB</defval>
        </param>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>mipmapLevel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glTexImage2D">https://www.opengl.org/wiki/GLAPI/glTexImage2D</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a16097725c20f98d6afb50dc8d24f07ed_1a16097725c20f98d6afb50dc8d24f07ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture::loadFile</definition>
        <argsstring>(const char *file)</argsstring>
        <name>loadFile</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a88e5697ef41a64a8558f867d19eb2747_1a88e5697ef41a64a8558f867d19eb2747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture::setTarget</definition>
        <argsstring>(const GLenum target)</argsstring>
        <name>setTarget</name>
        <param>
          <type>const GLenum</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a10a6a3f2ea642094a45fbc197e78a3a4_1a10a6a3f2ea642094a45fbc197e78a3a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLenum</type>
        <definition>GLenum mc::gfx::ogl::Texture::getTarget</definition>
        <argsstring>()</argsstring>
        <name>getTarget</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="480" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a09fecaf1b6300293f2154c321cafc001_1a09fecaf1b6300293f2154c321cafc001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/da0/a00009" kindref="compound">Color</ref> &amp;</type>
        <definition>Color&amp; mc::gfx::ogl::Texture::getPaint</definition>
        <argsstring>()</argsstring>
        <name>getPaint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="482" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a0d880929e283a5d84457bb3648e3594a_1a0d880929e283a5d84457bb3648e3594a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="da/da0/a00009" kindref="compound">Color</ref> &amp;</type>
        <definition>const Color&amp; mc::gfx::ogl::Texture::getPaint</definition>
        <argsstring>() const </argsstring>
        <name>getPaint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a64c021777f670bbc8eab28edd3ecdfe6_1a64c021777f670bbc8eab28edd3ecdfe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture::setPaint</definition>
        <argsstring>(const Color &amp;c)</argsstring>
        <name>setPaint</name>
        <param>
          <type>const <ref refid="da/da0/a00009" kindref="compound">Color</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a241f7d5e0af133e5f1f0ff41b750f1f6_1a241f7d5e0af133e5f1f0ff41b750f1f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float mc::gfx::ogl::Texture::getOpacity</definition>
        <argsstring>()</argsstring>
        <name>getOpacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_aa21f875c9a7673f0175e8e9f7d0f4507_1aa21f875c9a7673f0175e8e9f7d0f4507" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const float</type>
        <definition>const float mc::gfx::ogl::Texture::getOpacity</definition>
        <argsstring>() const </argsstring>
        <name>getOpacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="487" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a489481c53eb20d9aaa87b44898b96599_1a489481c53eb20d9aaa87b44898b96599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture::setOpacity</definition>
        <argsstring>(const float f)</argsstring>
        <name>setOpacity</name>
        <param>
          <type>const float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="488" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a7fe5e1a38957b97cd91ccb997ca5d400_1a7fe5e1a38957b97cd91ccb997ca5d400" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Texture::isCreated</definition>
        <argsstring>() const  override</argsstring>
        <name>isCreated</name>
        <reimplements refid="d0/d33/a00027_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67">isCreated</reimplements>
        <briefdescription>
<para>Queries OpenGL whether this <ref refid="d0/d33/a00027" kindref="compound">Object</ref>&apos;s ID is a valid object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents memory </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a7c53fb4036eb473f622e9f271d4c5d91_1a7c53fb4036eb473f622e9f271d4c5d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture::setParameter</definition>
        <argsstring>(const GLenum &amp;name, const GLint &amp;value)</argsstring>
        <name>setParameter</name>
        <param>
          <type>const GLenum &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const GLint &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glTexParameter">https://www.opengl.org/wiki/GLAPI/glTexParameter</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="496" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a4929774fa12511a757d43f106bc04ee9_1a4929774fa12511a757d43f106bc04ee9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Texture::operator==</definition>
        <argsstring>(const Texture &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d3/de7/a00039" kindref="compound">Texture</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a5cba9f544d1d5f5765564467cbe4a78b_1a5cba9f544d1d5f5765564467cbe4a78b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Texture::operator!=</definition>
        <argsstring>(const Texture &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d3/de7/a00039" kindref="compound">Texture</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="505" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void mc::gfx::ogl::Object::bind</definition>
        <argsstring>() const </argsstring>
        <name>bind</name>
        <reimplementedby refid="df/d61/a00031_1aa2aa180de0c314967fef3dc1f506695f">bind</reimplementedby>
        <reimplementedby refid="d1/dc6/a00037_1a0899273f842e1b692da3a08e162ee7f3">bind</reimplementedby>
        <briefdescription>
<para>Binds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> to be used in an OpenGL function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void mc::gfx::ogl::Object::unbind</definition>
        <argsstring>() const </argsstring>
        <name>unbind</name>
        <reimplementedby refid="df/d61/a00031_1ad05128a71051c75e7c6a66bf135f4ce5">unbind</reimplementedby>
        <reimplementedby refid="d1/dc6/a00037_1a91dc153976fbd78b0047c436c12967d6">unbind</reimplementedby>
        <briefdescription>
<para>Unbinds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> which is equivalent to binding ID 0. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::ogl::Object::getID</definition>
        <argsstring>() const </argsstring>
        <name>getID</name>
        <briefdescription>
<para>Retrieves the current ID that this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents. </para>        </briefdescription>
        <detaileddescription>
<para>The ID is an unsigned number that acts like a pointer to OpenGL memory. It is assigned when <ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> is called. </para><para>If it is 0, the <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> is considered uncreated. </para><para>When using <ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>it will bind to this ID. <ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>will bind to ID 0, which is the equivelant of a null pointer. <simplesect kind="return"><para>The ID represented by this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Object::operator==</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Object::operator!=</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="162" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d3/de7/a00039_1a1f3306e663038285c92e697130e78fcd" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Texture::bindIndex</definition>
        <argsstring>(const Index &amp;id) const  override</argsstring>
        <name>bindIndex</name>
        <reimplements refid="d0/d33/a00027_a969d8bf457ee31a5cbca56c64f054e15_1a969d8bf457ee31a5cbca56c64f054e15">bindIndex</reimplements>
        <param>
          <type>const <ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Intended to be overloaded to bind to a certain index. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>and <ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>both use this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to bind to. If it is 0, it needs to be unbinded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="514" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d0/d33/a00027_aa6f2acefb1ac01ff347ff593738eab46_1aa6f2acefb1ac01ff347ff593738eab46" prot="protected" static="no" mutable="no">
        <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::ogl::Object::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The ID of this `Object. </para>        </briefdescription>
        <detaileddescription>
<para>` Should be set in <ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> and become 0 in <ref refid="d0/d33/a00027_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">Object::destroy()</ref> </para><para><ref refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const </ref>returns this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="169" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/Texture">https://www.opengl.org/wiki/Texture</ulink> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="510">
        <label>mc::gfx::ogl::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
      <node id="509">
        <label>mc::gfx::ogl::Texture</label>
        <link refid="d3/de7/a00039"/>
        <childnode refid="510" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="512">
        <label>mc::gfx::ogl::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
      <node id="511">
        <label>mc::gfx::ogl::Texture</label>
        <link refid="d3/de7/a00039"/>
        <childnode refid="512" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/OGL.h" line="463" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="463" bodyend="515"/>
    <listofallmembers>
      <member refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" prot="public" virt="virtual"><scope>mc::gfx::ogl::Texture</scope><name>bind</name></member>
      <member refid="d3/de7/a00039_1a1f3306e663038285c92e697130e78fcd" prot="private" virt="virtual"><scope>mc::gfx::ogl::Texture</scope><name>bindIndex</name></member>
      <member refid="d3/de7/a00039_a6a03ba23b0c284c60cc290b7ed6aa1be_1a6a03ba23b0c284c60cc290b7ed6aa1be" prot="public" virt="virtual"><scope>mc::gfx::ogl::Texture</scope><name>destroy</name></member>
      <member refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>getID</name></member>
      <member refid="d3/de7/a00039_a241f7d5e0af133e5f1f0ff41b750f1f6_1a241f7d5e0af133e5f1f0ff41b750f1f6" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>getOpacity</name></member>
      <member refid="d3/de7/a00039_aa21f875c9a7673f0175e8e9f7d0f4507_1aa21f875c9a7673f0175e8e9f7d0f4507" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>getOpacity</name></member>
      <member refid="d3/de7/a00039_a09fecaf1b6300293f2154c321cafc001_1a09fecaf1b6300293f2154c321cafc001" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>getPaint</name></member>
      <member refid="d3/de7/a00039_a0d880929e283a5d84457bb3648e3594a_1a0d880929e283a5d84457bb3648e3594a" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>getPaint</name></member>
      <member refid="d3/de7/a00039_a10a6a3f2ea642094a45fbc197e78a3a4_1a10a6a3f2ea642094a45fbc197e78a3a4" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>getTarget</name></member>
      <member refid="d0/d33/a00027_aa6f2acefb1ac01ff347ff593738eab46_1aa6f2acefb1ac01ff347ff593738eab46" prot="protected" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>id</name></member>
      <member refid="d3/de7/a00039_a62f5985c5873d794455517035e5d022e_1a62f5985c5873d794455517035e5d022e" prot="public" virt="virtual"><scope>mc::gfx::ogl::Texture</scope><name>init</name></member>
      <member refid="d3/de7/a00039_a7fe5e1a38957b97cd91ccb997ca5d400_1a7fe5e1a38957b97cd91ccb997ca5d400" prot="public" virt="virtual"><scope>mc::gfx::ogl::Texture</scope><name>isCreated</name></member>
      <member refid="d3/de7/a00039_a16097725c20f98d6afb50dc8d24f07ed_1a16097725c20f98d6afb50dc8d24f07ed" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>loadFile</name></member>
      <member refid="d3/de7/a00039_1ac97827909d922adefafbbea8bce7615f" prot="private" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>opacity</name></member>
      <member refid="d3/de7/a00039_a5cba9f544d1d5f5765564467cbe4a78b_1a5cba9f544d1d5f5765564467cbe4a78b" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>operator!=</name></member>
      <member refid="d0/d33/a00027_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::ogl::Object::"><scope>mc::gfx::ogl::Texture</scope><name>operator!=</name></member>
      <member refid="d3/de7/a00039_a4929774fa12511a757d43f106bc04ee9_1a4929774fa12511a757d43f106bc04ee9" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>operator==</name></member>
      <member refid="d0/d33/a00027_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::ogl::Object::"><scope>mc::gfx::ogl::Texture</scope><name>operator==</name></member>
      <member refid="d3/de7/a00039_1a4638b1fe966b0da31d0a61522c56ee69" prot="private" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>paint</name></member>
      <member refid="d3/de7/a00039_a131558d5f2ff628f3de1750117671061_1a131558d5f2ff628f3de1750117671061" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>setData</name></member>
      <member refid="d3/de7/a00039_a489481c53eb20d9aaa87b44898b96599_1a489481c53eb20d9aaa87b44898b96599" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>setOpacity</name></member>
      <member refid="d3/de7/a00039_a64c021777f670bbc8eab28edd3ecdfe6_1a64c021777f670bbc8eab28edd3ecdfe6" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>setPaint</name></member>
      <member refid="d3/de7/a00039_a7c53fb4036eb473f622e9f271d4c5d91_1a7c53fb4036eb473f622e9f271d4c5d91" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>setParameter</name></member>
      <member refid="d3/de7/a00039_a88e5697ef41a64a8558f867d19eb2747_1a88e5697ef41a64a8558f867d19eb2747" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>setTarget</name></member>
      <member refid="d3/de7/a00039_1affd77ce5390cf794a4da8f59dcf4529a" prot="private" virt="non-virtual"><scope>mc::gfx::ogl::Texture</scope><name>target</name></member>
      <member refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" prot="public" virt="virtual"><scope>mc::gfx::ogl::Texture</scope><name>unbind</name></member>
      <member refid="d0/d33/a00027_a4bf5ddbce67658a6dd14bedfa00bcac5_1a4bf5ddbce67658a6dd14bedfa00bcac5" prot="public" virt="virtual"><scope>mc::gfx::ogl::Texture</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
