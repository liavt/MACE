<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d3/de7/a00039" kind="struct" language="C++" prot="public">
    <compoundname>mc::TransformMatrix</compoundname>
    <includes refid="d1/d6e/a00073" local="no">Transform.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="d3/de7/a00039_ab1d6d109dbc3524efa2aba9f8dddea37_1ab1d6d109dbc3524efa2aba9f8dddea37" prot="public" static="no" mutable="no">
        <type><ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; float, 3 &gt;</type>
        <definition>Vector&lt;float, 3&gt; mc::TransformMatrix::translation</definition>
        <argsstring></argsstring>
        <name>translation</name>
        <briefdescription>
<para>Represents this <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput>&apos;s translation. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d3/de7/a00039_a30bf729eeb4b48a9e47d4970867eeabe_1a30bf729eeb4b48a9e47d4970867eeabe" kindref="member">translate(const float, const float, const float)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/de7/a00039_afc3e42106cadda5984594ee18506dcfd_1afc3e42106cadda5984594ee18506dcfd" kindref="member">get()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="214" column="1" bodyfile="include/MACE/Utility/Transform.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/de7/a00039_a3ed9fc5756560490b92f7e13893e9dc4_1a3ed9fc5756560490b92f7e13893e9dc4" prot="public" static="no" mutable="no">
        <type><ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; float, 3 &gt;</type>
        <definition>Vector&lt;float, 3&gt; mc::TransformMatrix::rotation</definition>
        <argsstring></argsstring>
        <name>rotation</name>
        <briefdescription>
<para>Represents this <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput>&apos;s rotation. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d3/de7/a00039_a6958ca81511314aada5e5754852751b0_1a6958ca81511314aada5e5754852751b0" kindref="member">rotate(const float, const float, const float)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/de7/a00039_afc3e42106cadda5984594ee18506dcfd_1afc3e42106cadda5984594ee18506dcfd" kindref="member">get()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="220" column="1" bodyfile="include/MACE/Utility/Transform.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/de7/a00039_a4f2f6d4592045082c076e46058d6e74d_1a4f2f6d4592045082c076e46058d6e74d" prot="public" static="no" mutable="no">
        <type><ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; float, 3 &gt;</type>
        <definition>Vector&lt;float, 3&gt; mc::TransformMatrix::scaler</definition>
        <argsstring></argsstring>
        <name>scaler</name>
        <briefdescription>
<para>Represents this <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput>&apos;s scale. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d3/de7/a00039_aabce39444cb0bb61b0f11048df0bcddc_1aabce39444cb0bb61b0f11048df0bcddc" kindref="member">scale(const float, const float, const float)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/de7/a00039_afc3e42106cadda5984594ee18506dcfd_1afc3e42106cadda5984594ee18506dcfd" kindref="member">get()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="226" column="1" bodyfile="include/MACE/Utility/Transform.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d3/de7/a00039_ad660cc05460555676f372334d8fe9aed_1ad660cc05460555676f372334d8fe9aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mc::TransformMatrix::TransformMatrix</definition>
        <argsstring>()</argsstring>
        <name>TransformMatrix</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Generates a <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput> as an identity matrix. <simplesect kind="see"><para><ref refid="d3/de7/a00039_add25f797b317967ba0484db1b1b8827a_1add25f797b317967ba0484db1b1b8827a" kindref="member">reset()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a30bf729eeb4b48a9e47d4970867eeabe_1a30bf729eeb4b48a9e47d4970867eeabe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref> &amp;</type>
        <definition>TransformMatrix&amp; mc::TransformMatrix::translate</definition>
        <argsstring>(const float x, const float y, const float z)</argsstring>
        <name>translate</name>
        <param>
          <type>const float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Translates this <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput> in any 3 directions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to translate in the X plane. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to translate in the Y plane. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to translate in the Z plane. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Itself for chaining </para></simplesect>
<simplesect kind="see"><para>translate(const Matrix4f&amp;, const float, const float, const float) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a6958ca81511314aada5e5754852751b0_1a6958ca81511314aada5e5754852751b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref> &amp;</type>
        <definition>TransformMatrix&amp; mc::TransformMatrix::rotate</definition>
        <argsstring>(const float x, const float y, const float z)</argsstring>
        <name>rotate</name>
        <param>
          <type>const float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Rotates this <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput> in any 3 directions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to rotate in the X plane. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to rotate in the Y plane. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to rotate in the Z plane. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Itself for chaining </para></simplesect>
<simplesect kind="see"><para>rotate(const Matrix4f&amp;, const float, const float, const float) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_aabce39444cb0bb61b0f11048df0bcddc_1aabce39444cb0bb61b0f11048df0bcddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref> &amp;</type>
        <definition>TransformMatrix&amp; mc::TransformMatrix::scale</definition>
        <argsstring>(const float x, const float y, const float z)</argsstring>
        <name>scale</name>
        <param>
          <type>const float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Scales this <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput> in any 3 directions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to scale in the X plane. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to scale in the Y plane. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to scale in the Z plane. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Itself for chaining </para></simplesect>
<simplesect kind="see"><para>scale(const Matrix4f&amp;, const float, const float, const float) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_add25f797b317967ba0484db1b1b8827a_1add25f797b317967ba0484db1b1b8827a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref> &amp;</type>
        <definition>TransformMatrix&amp; mc::TransformMatrix::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Deletes any transformations on this <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput>, effectively making it an identity matrix. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Itself for chaining </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_afc3e42106cadda5984594ee18506dcfd_1afc3e42106cadda5984594ee18506dcfd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; float, 4, 4 &gt;</type>
        <definition>Matrix&lt;float, 4, 4&gt; mc::TransformMatrix::get</definition>
        <argsstring>() const </argsstring>
        <name>get</name>
        <briefdescription>
<para>Converts this <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput> into a <computeroutput>Matrix4f</computeroutput> based on the stored transformations. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The transformation matrix represented by the values stored via <computeroutput><ref refid="d3/de7/a00039_a6958ca81511314aada5e5754852751b0_1a6958ca81511314aada5e5754852751b0" kindref="member">rotate()</ref></computeroutput>, <computeroutput><ref refid="d3/de7/a00039_aabce39444cb0bb61b0f11048df0bcddc_1aabce39444cb0bb61b0f11048df0bcddc" kindref="member">scale()</ref></computeroutput>, and <computeroutput><ref refid="d3/de7/a00039_a30bf729eeb4b48a9e47d4970867eeabe_1a30bf729eeb4b48a9e47d4970867eeabe" kindref="member">translate()</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_ab284df8bcb89201ccd09403ad21f28ad_1ab284df8bcb89201ccd09403ad21f28ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::TransformMatrix::operator==</definition>
        <argsstring>(const TransformMatrix &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Checks if the values represented by 2 <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput> are the same. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are equal </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_ac4bf06657f3dcd69ef435f02a51edc77_1ac4bf06657f3dcd69ef435f02a51edc77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::TransformMatrix::operator!=</definition>
        <argsstring>(const TransformMatrix &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Checks if the values represented by 2 <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput> are not the same. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a95cc17d73620c338c6cf7e39d88c66f0_1a95cc17d73620c338c6cf7e39d88c66f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::TransformMatrix::operator&gt;</definition>
        <argsstring>(const TransformMatrix &amp;other) const </argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Checks whether a <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput> is larger than another. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <computeroutput>this</computeroutput> is larger than <computeroutput>other</computeroutput>, based on <computeroutput>translation</computeroutput>, <computeroutput>rotation</computeroutput>, and <computeroutput>scaler</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_ac4d1110fb2283ee53782f0423e6948b0_1ac4d1110fb2283ee53782f0423e6948b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::TransformMatrix::operator&gt;=</definition>
        <argsstring>(const TransformMatrix &amp;other) const </argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Checks whether a <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput> is larger than or equal to another. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <computeroutput>this</computeroutput> is larger than or equal to <computeroutput>other</computeroutput>, based on <computeroutput>translation</computeroutput>, <computeroutput>rotation</computeroutput>, and <computeroutput>scaler</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a1dbe80e02969059a1ab9cc4c167343e6_1a1dbe80e02969059a1ab9cc4c167343e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::TransformMatrix::operator&lt;</definition>
        <argsstring>(const TransformMatrix &amp;other) const </argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Checks whether a <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput> is smaller than another. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <computeroutput>this</computeroutput> is smaller than <computeroutput>other</computeroutput>, based on <computeroutput>translation</computeroutput>, <computeroutput>rotation</computeroutput>, and <computeroutput>scaler</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d3/de7/a00039_a71515ed6991421571635bd3068437757_1a71515ed6991421571635bd3068437757" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::TransformMatrix::operator&lt;=</definition>
        <argsstring>(const TransformMatrix &amp;other) const </argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Checks whether a <computeroutput><ref refid="d3/de7/a00039" kindref="compound">TransformMatrix</ref></computeroutput> is small than or equal to another. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <computeroutput>this</computeroutput> is smaller than or equal to <computeroutput>other</computeroutput>, based on <computeroutput>translation</computeroutput>, <computeroutput>rotation</computeroutput>, and <computeroutput>scaler</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Transform.h" line="207" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Matrix-based class that allows for the easy creation and management of transformation matrices. </para>    </briefdescription>
    <detaileddescription>
<para>Transformation matrices can scale, rotate, and translate any vector. </para><para>This should not be confused with the <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> class, which allows for the arbitrary storage of data in a matrix-like fashion </para>    </detaileddescription>
    <collaborationgraph>
      <node id="502">
        <label>T</label>
      </node>
      <node id="501">
        <label>std::array&lt; T &gt;</label>
        <childnode refid="502" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="499">
        <label>mc::Vector&lt; float, 3 &gt;</label>
        <link refid="dd/d32/a00041"/>
        <childnode refid="500" relation="usage">
          <edgelabel>content</edgelabel>
        </childnode>
        <childnode refid="503" relation="template-instance">
          <edgelabel>&lt; float, 3 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="504">
        <label>std::array&lt; T, N &gt;</label>
        <childnode refid="502" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="501" relation="template-instance">
          <edgelabel>&lt; T, N &gt;</edgelabel>
        </childnode>
      </node>
      <node id="498">
        <label>mc::TransformMatrix</label>
        <link refid="d3/de7/a00039"/>
        <childnode refid="499" relation="usage">
          <edgelabel>rotation</edgelabel>
          <edgelabel>scaler</edgelabel>
          <edgelabel>translation</edgelabel>
        </childnode>
      </node>
      <node id="503">
        <label>mc::Vector&lt; T, N &gt;</label>
        <link refid="dd/d32/a00041"/>
        <childnode refid="504" relation="usage">
          <edgelabel>content</edgelabel>
        </childnode>
      </node>
      <node id="500">
        <label>std::array&lt; float, N &gt;</label>
        <childnode refid="501" relation="template-instance">
          <edgelabel>&lt; float, N &gt;</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Utility/Transform.h" line="126" column="1" bodyfile="include/MACE/Utility/Transform.h" bodystart="126" bodyend="227"/>
    <listofallmembers>
      <member refid="d3/de7/a00039_afc3e42106cadda5984594ee18506dcfd_1afc3e42106cadda5984594ee18506dcfd" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>get</name></member>
      <member refid="d3/de7/a00039_ac4bf06657f3dcd69ef435f02a51edc77_1ac4bf06657f3dcd69ef435f02a51edc77" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>operator!=</name></member>
      <member refid="d3/de7/a00039_a1dbe80e02969059a1ab9cc4c167343e6_1a1dbe80e02969059a1ab9cc4c167343e6" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>operator&lt;</name></member>
      <member refid="d3/de7/a00039_a71515ed6991421571635bd3068437757_1a71515ed6991421571635bd3068437757" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>operator&lt;=</name></member>
      <member refid="d3/de7/a00039_ab284df8bcb89201ccd09403ad21f28ad_1ab284df8bcb89201ccd09403ad21f28ad" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>operator==</name></member>
      <member refid="d3/de7/a00039_a95cc17d73620c338c6cf7e39d88c66f0_1a95cc17d73620c338c6cf7e39d88c66f0" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>operator&gt;</name></member>
      <member refid="d3/de7/a00039_ac4d1110fb2283ee53782f0423e6948b0_1ac4d1110fb2283ee53782f0423e6948b0" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>operator&gt;=</name></member>
      <member refid="d3/de7/a00039_add25f797b317967ba0484db1b1b8827a_1add25f797b317967ba0484db1b1b8827a" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>reset</name></member>
      <member refid="d3/de7/a00039_a6958ca81511314aada5e5754852751b0_1a6958ca81511314aada5e5754852751b0" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>rotate</name></member>
      <member refid="d3/de7/a00039_a3ed9fc5756560490b92f7e13893e9dc4_1a3ed9fc5756560490b92f7e13893e9dc4" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>rotation</name></member>
      <member refid="d3/de7/a00039_aabce39444cb0bb61b0f11048df0bcddc_1aabce39444cb0bb61b0f11048df0bcddc" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>scale</name></member>
      <member refid="d3/de7/a00039_a4f2f6d4592045082c076e46058d6e74d_1a4f2f6d4592045082c076e46058d6e74d" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>scaler</name></member>
      <member refid="d3/de7/a00039_ad660cc05460555676f372334d8fe9aed_1ad660cc05460555676f372334d8fe9aed" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>TransformMatrix</name></member>
      <member refid="d3/de7/a00039_a30bf729eeb4b48a9e47d4970867eeabe_1a30bf729eeb4b48a9e47d4970867eeabe" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>translate</name></member>
      <member refid="d3/de7/a00039_ab1d6d109dbc3524efa2aba9f8dddea37_1ab1d6d109dbc3524efa2aba9f8dddea37" prot="public" virt="non-virtual"><scope>mc::TransformMatrix</scope><name>translation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
