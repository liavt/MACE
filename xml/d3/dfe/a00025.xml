<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d3/dfe/a00025" kind="struct" language="C++" prot="public">
    <compoundname>mc::Matrix</compoundname>
    <basecompoundref refid="d5/db6/a00042" prot="public" virt="non-virtual">mc::Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;</basecompoundref>
    <includes refid="da/d24/a00068" local="no">Matrix.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type><ref refid="d9/da4/a00078_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        <declname>W</declname>
        <defname>W</defname>
      </param>
      <param>
        <type><ref refid="d9/da4/a00078_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        <declname>H</declname>
        <defname>H</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d3/dfe/a00025_a1c0107dd6bf262a240653fcc2650fb2b_1a1c0107dd6bf262a240653fcc2650fb2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mc::Matrix&lt; T, W, H &gt;::Matrix</definition>
        <argsstring>()</argsstring>
        <name>Matrix</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Creates a <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> of the specified size where every spot is unallocated </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="73" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="73" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a4bceda87f2c87294d4a631b2229dff8f_1a4bceda87f2c87294d4a631b2229dff8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mc::Matrix&lt; T, W, H &gt;::Matrix</definition>
        <argsstring>(T arr[W][H])</argsstring>
        <name>Matrix</name>
        <param>
          <type>T</type>
          <declname>arr</declname>
          <array>[W][H]</array>
        </param>
        <briefdescription>
<para>Creates a <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> based on a 2-dimensional array. </para>        </briefdescription>
        <detaileddescription>
<para>The array&apos;s contents will be copied into this <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of contents </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="86" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a59561b3a04ab8113b2dc8811cf498a58_1a59561b3a04ab8113b2dc8811cf498a58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mc::Matrix&lt; T, W, H &gt;::Matrix</definition>
        <argsstring>(const std::initializer_list&lt; const std::initializer_list&lt; T &gt;&gt; args)</argsstring>
        <name>Matrix</name>
        <param>
          <type>const std::initializer_list&lt; const std::initializer_list&lt; T &gt;&gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="95" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="95" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a16a62a958729f121805a76d43554bc69_1a16a62a958729f121805a76d43554bc69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mc::Matrix&lt; T, W, H &gt;::Matrix</definition>
        <argsstring>(const Matrix &amp;copy)</argsstring>
        <name>Matrix</name>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Clones the contents of another <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> into a new <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>What the clone </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="115" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a69643200eb846e53dcd8b1f5aa11ab9d_1a69643200eb846e53dcd8b1f5aa11ab9d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="d9/da4/a00078_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        <definition>constexpr Size mc::Matrix&lt; T, W, H &gt;::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>Calculates how many elements are in this <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput><ref refid="d3/dfe/a00025_a62d693520c176b4aca04958a68e9a937_1a62d693520c176b4aca04958a68e9a937" kindref="member">width()</ref></computeroutput> times <computeroutput><ref refid="d3/dfe/a00025_a63c8002ee17532ba731d384f5ab3c492_1a63c8002ee17532ba731d384f5ab3c492" kindref="member">height()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_a63c8002ee17532ba731d384f5ab3c492_1a63c8002ee17532ba731d384f5ab3c492" kindref="member">height()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_a62d693520c176b4aca04958a68e9a937_1a62d693520c176b4aca04958a68e9a937" kindref="member">width()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="123" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a62d693520c176b4aca04958a68e9a937_1a62d693520c176b4aca04958a68e9a937" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="d9/da4/a00078_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        <definition>constexpr Size mc::Matrix&lt; T, W, H &gt;::width</definition>
        <argsstring>() const </argsstring>
        <name>width</name>
        <briefdescription>
<para>Calculates the width of this <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The width specified by the template. </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_a63c8002ee17532ba731d384f5ab3c492_1a63c8002ee17532ba731d384f5ab3c492" kindref="member">height()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_a69643200eb846e53dcd8b1f5aa11ab9d_1a69643200eb846e53dcd8b1f5aa11ab9d" kindref="member">size()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="133" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a63c8002ee17532ba731d384f5ab3c492_1a63c8002ee17532ba731d384f5ab3c492" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="d9/da4/a00078_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        <definition>constexpr Size mc::Matrix&lt; T, W, H &gt;::height</definition>
        <argsstring>() const </argsstring>
        <name>height</name>
        <briefdescription>
<para>Calculates the height of this <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The height specified by the template. </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_a62d693520c176b4aca04958a68e9a937_1a62d693520c176b4aca04958a68e9a937" kindref="member">width()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_a69643200eb846e53dcd8b1f5aa11ab9d_1a69643200eb846e53dcd8b1f5aa11ab9d" kindref="member">size()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="142" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_ae066c33e758cbbd03509d27bfa7c13d7_1ae066c33e758cbbd03509d27bfa7c13d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; mc::Matrix&lt; T, W, H &gt;::get</definition>
        <argsstring>(Index x, Index y)</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Retrieves the content at a certain position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>X-coordinate of the requested data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-coordinate of the requested data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the data at <computeroutput>X,Y</computeroutput> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>x&gt;=<ref refid="d3/dfe/a00025_a62d693520c176b4aca04958a68e9a937_1a62d693520c176b4aca04958a68e9a937" kindref="member">width()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>y&gt;=<ref refid="d3/dfe/a00025_a63c8002ee17532ba731d384f5ab3c492_1a63c8002ee17532ba731d384f5ab3c492" kindref="member">height()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_aadb1be5388fafceb50d459e5f9242cab_1aadb1be5388fafceb50d459e5f9242cab" kindref="member">set(Index, Index, T)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[]</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="156" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="156" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_ab6e29507a89ad102b4a65911132b6c0e_1ab6e29507a89ad102b4a65911132b6c0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; mc::Matrix&lt; T, W, H &gt;::get</definition>
        <argsstring>(Index x, Index y) const </argsstring>
        <name>get</name>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para><computeroutput>const</computeroutput> version of <ref refid="d3/dfe/a00025_ae066c33e758cbbd03509d27bfa7c13d7_1ae066c33e758cbbd03509d27bfa7c13d7" kindref="member">get(Index,Index)</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>X-coordinate of the requested data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-coordinate of the requested data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the <computeroutput>const</computeroutput> data at <computeroutput>X,Y</computeroutput> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>x&gt;=<ref refid="d3/dfe/a00025_a62d693520c176b4aca04958a68e9a937_1a62d693520c176b4aca04958a68e9a937" kindref="member">width()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>y&gt;=<ref refid="d3/dfe/a00025_a63c8002ee17532ba731d384f5ab3c492_1a63c8002ee17532ba731d384f5ab3c492" kindref="member">height()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_aadb1be5388fafceb50d459e5f9242cab_1aadb1be5388fafceb50d459e5f9242cab" kindref="member">set(Index, Index, T)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[]</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="172" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="172" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_aadb1be5388fafceb50d459e5f9242cab_1aadb1be5388fafceb50d459e5f9242cab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Matrix&lt; T, W, H &gt;::set</definition>
        <argsstring>(Index x, Index y, T value)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Writes data at certain coordinates to a new value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>X-coordinate of the new data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-coordinate of the new data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New datat to write to <computeroutput>X,Y</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>x&gt;=<ref refid="d3/dfe/a00025_a62d693520c176b4aca04958a68e9a937_1a62d693520c176b4aca04958a68e9a937" kindref="member">width()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>y&gt;=<ref refid="d3/dfe/a00025_a63c8002ee17532ba731d384f5ab3c492_1a63c8002ee17532ba731d384f5ab3c492" kindref="member">height()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d5/db6/a00042_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[]</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_ae066c33e758cbbd03509d27bfa7c13d7_1ae066c33e758cbbd03509d27bfa7c13d7" kindref="member">get(Index, Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="188" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="188" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_ada45de3d753dc0a3b221fb40f5e906f0_1ada45de3d753dc0a3b221fb40f5e906f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* mc::Matrix&lt; T, W, H &gt;::flatten</definition>
        <argsstring>(T arr[W *H]) const </argsstring>
        <name>flatten</name>
        <param>
          <type>T</type>
          <declname>arr</declname>
          <array>[W *H]</array>
        </param>
        <briefdescription>
<para>Creates an 1-dimensional array with the data of this <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput>, in O(N) time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to an array of data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="198" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="198" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a0b67307fb45cc46b029d73d8ff2e9a60_1a0b67307fb45cc46b029d73d8ff2e9a60" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* mc::Matrix&lt; T, W, H &gt;::flattenTransposed</definition>
        <argsstring>(T arr[W *H]) const </argsstring>
        <name>flattenTransposed</name>
        <param>
          <type>T</type>
          <declname>arr</declname>
          <array>[W *H]</array>
        </param>
        <briefdescription>
<para>Creates an 1-dimensional array with the transposed data of this <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput>, in O(N) time. </para>        </briefdescription>
        <detaileddescription>
<para>This method is faster than <computeroutput>math::transpose(matrix).flatten(array)</computeroutput>, as that takes O(N*2) time. <simplesect kind="return"><para>Pointer to an array of data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="213" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="213" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a38adcd2607104d5323c064463d8299a7_1a38adcd2607104d5323c064463d8299a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>T &amp;</type>
        <definition>virtual T&amp; mc::Matrix&lt; T, W, H &gt;::operator()</definition>
        <argsstring>(Index x, Index y)</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Retrieves content at a certain <computeroutput>Index</computeroutput>, not zero indexed. </para>        </briefdescription>
        <detaileddescription>
<para>Equal to<programlisting><codeline><highlight class="normal">matrix[x-1][y-1]</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Not zero-indexed X-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Not zero-indexed y-coordinate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value at <computeroutput>x-1</computeroutput> and <computeroutput>y-1</computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[](Index)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_aadb1be5388fafceb50d459e5f9242cab_1aadb1be5388fafceb50d459e5f9242cab" kindref="member">set(Index, Index,T)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_ae066c33e758cbbd03509d27bfa7c13d7_1ae066c33e758cbbd03509d27bfa7c13d7" kindref="member">get(Index,Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="235" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="235" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a4b509b9169919a3a3444c983420fa1e1_1a4b509b9169919a3a3444c983420fa1e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; mc::Matrix&lt; T, W, H &gt;::operator()</definition>
        <argsstring>(Index x, Index y) const </argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para><computeroutput>const</computeroutput> version of <computeroutput><ref refid="d3/dfe/a00025_a38adcd2607104d5323c064463d8299a7_1a38adcd2607104d5323c064463d8299a7" kindref="member">operator()(Index,Index)</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Not zero-indexed X-coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Not zero-indexed y-coordinate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value at <computeroutput>x-1</computeroutput> and <computeroutput>y-1</computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_aadb1be5388fafceb50d459e5f9242cab_1aadb1be5388fafceb50d459e5f9242cab" kindref="member">set(Index, Index,T)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_ae066c33e758cbbd03509d27bfa7c13d7_1ae066c33e758cbbd03509d27bfa7c13d7" kindref="member">get(Index,Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="247" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="247" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a9e7fd35339c2afb9a2adc90727d86d56_1a9e7fd35339c2afb9a2adc90727d86d56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; T, H &gt;</type>
        <definition>Vector&lt;T, H&gt; mc::Matrix&lt; T, W, H &gt;::operator+</definition>
        <argsstring>(const Vector&lt; T, H &gt; &amp;right) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; T, H &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Adds a <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> and a <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> together. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> of equal width </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> that was created by adding a <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> and a <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> together </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArithmeticError</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput><ref refid="d3/dfe/a00025_a62d693520c176b4aca04958a68e9a937_1a62d693520c176b4aca04958a68e9a937" kindref="member">width()</ref></computeroutput> is greater than <computeroutput><ref refid="d3/dfe/a00025_a63c8002ee17532ba731d384f5ab3c492_1a63c8002ee17532ba731d384f5ab3c492" kindref="member">height()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d5/db6/a00042" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> and <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="260" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="260" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a64e92871d5001d50398a9150d6813345_1a64e92871d5001d50398a9150d6813345" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; T, H &gt;</type>
        <definition>Vector&lt;T, H&gt; mc::Matrix&lt; T, W, H &gt;::operator-</definition>
        <argsstring>(const Vector&lt; T, H &gt; &amp;right) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; T, H &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Subtracts a <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> and a <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> together. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&apos;s <computeroutput><ref refid="d3/dfe/a00025_a62d693520c176b4aca04958a68e9a937_1a62d693520c176b4aca04958a68e9a937" kindref="member">width()</ref></computeroutput> must not be larger than <computeroutput><ref refid="d3/dfe/a00025_a63c8002ee17532ba731d384f5ab3c492_1a63c8002ee17532ba731d384f5ab3c492" kindref="member">height()</ref></computeroutput></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> of equal width </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> that was created by subtracting a <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> and a <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> together </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> and <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="280" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="280" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a4a490e8b0e57efa77c3356e62ebd8143_1a4a490e8b0e57efa77c3356e62ebd8143" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; T, H &gt;</type>
        <definition>Vector&lt;T, H&gt; mc::Matrix&lt; T, W, H &gt;::operator*</definition>
        <argsstring>(const Vector&lt; T, H &gt; &amp;right) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; T, H &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Multiplies a <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> and a <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> together. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> of equal width </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> that was created by multiplying a <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> and a <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> together </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ArithmeticError</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput><ref refid="d3/dfe/a00025_a62d693520c176b4aca04958a68e9a937_1a62d693520c176b4aca04958a68e9a937" kindref="member">width()</ref></computeroutput> is greater than <computeroutput><ref refid="d3/dfe/a00025_a63c8002ee17532ba731d384f5ab3c492_1a63c8002ee17532ba731d384f5ab3c492" kindref="member">height()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d5/db6/a00042" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> and <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="301" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="301" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a3dfb12bc62658bbfd16e2f4a45a7252a_1a3dfb12bc62658bbfd16e2f4a45a7252a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; T, W, H &gt;</type>
        <definition>Matrix&lt;T, W, H&gt; mc::Matrix&lt; T, W, H &gt;::operator+</definition>
        <argsstring>(const Matrix&lt; T, W, H &gt; &amp;right) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; T, W, H &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Adds 2 <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> together. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput><ref refid="d3/dfe/a00025_a62d693520c176b4aca04958a68e9a937_1a62d693520c176b4aca04958a68e9a937" kindref="member">width()</ref></computeroutput> MUST be equal to <computeroutput><ref refid="d3/dfe/a00025_a63c8002ee17532ba731d384f5ab3c492_1a63c8002ee17532ba731d384f5ab3c492" kindref="member">height()</ref></computeroutput> in order to do <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> math. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> whose contents is 2 <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> added together </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> for an explanation of <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="320" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="320" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_ac37b3c2166ec4c9c7febab5254163cdc_1ac37b3c2166ec4c9c7febab5254163cdc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; T, W, H &gt;</type>
        <definition>Matrix&lt;T, W, H&gt; mc::Matrix&lt; T, W, H &gt;::operator-</definition>
        <argsstring>(const Matrix&lt; T, W, H &gt; &amp;right) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; T, W, H &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Subtracts 2 <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> together. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> to subtracts </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> whose contents is 2 <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> subtracted together </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> for an explanation of <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="338" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="338" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a0fe2af05b2e86b25d0e7b5f62152c381_1a0fe2af05b2e86b25d0e7b5f62152c381" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; T, W, H &gt;</type>
        <definition>Matrix&lt;T, W, H&gt; mc::Matrix&lt; T, W, H &gt;::operator*</definition>
        <argsstring>(const Matrix&lt; T, W, H &gt; &amp;right) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; T, W, H &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Multiplies 2 <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> together. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput><ref refid="d3/dfe/a00025_a62d693520c176b4aca04958a68e9a937_1a62d693520c176b4aca04958a68e9a937" kindref="member">width()</ref></computeroutput> must equal <computeroutput><ref refid="d3/dfe/a00025_a63c8002ee17532ba731d384f5ab3c492_1a63c8002ee17532ba731d384f5ab3c492" kindref="member">height()</ref></computeroutput>, or else this will error. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> to multiply </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> whose contents is 2 <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> multiplied together </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> for an explanation of <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_a6d206a993884942362f9d9dded6a0cc5_1a6d206a993884942362f9d9dded6a0cc5" kindref="member">operator*(const T&amp;) const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="357" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="357" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a6d206a993884942362f9d9dded6a0cc5_1a6d206a993884942362f9d9dded6a0cc5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; T, W, H &gt;</type>
        <definition>Matrix&lt;T, W, H&gt; mc::Matrix&lt; T, W, H &gt;::operator*</definition>
        <argsstring>(const T &amp;scalar) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Scales a <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> from a scalar value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>What to multiply each value of this <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> by. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> multiplied by the scalar </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_a0fe2af05b2e86b25d0e7b5f62152c381_1a0fe2af05b2e86b25d0e7b5f62152c381" kindref="member">operator*(const Matrix&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> for an explanation of <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="379" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="379" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a87fe1c6c8e7a36b12680322055ec5c7d_1a87fe1c6c8e7a36b12680322055ec5c7d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; T, W, H &gt;</type>
        <definition>Matrix&lt;T, W, H&gt; mc::Matrix&lt; T, W, H &gt;::operator/</definition>
        <argsstring>(const Matrix&lt; T, W, H &gt; &amp;right) const </argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; T, W, H &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Divides 2 <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> together. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput><ref refid="d3/dfe/a00025_a62d693520c176b4aca04958a68e9a937_1a62d693520c176b4aca04958a68e9a937" kindref="member">width()</ref></computeroutput> must equal <computeroutput><ref refid="d3/dfe/a00025_a63c8002ee17532ba731d384f5ab3c492_1a63c8002ee17532ba731d384f5ab3c492" kindref="member">height()</ref></computeroutput>, or else this will error. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> to divide </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> whose contents is 2 <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> divide together </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> for an explanation of <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<xrefsect id="d7/d46/a00002_1_bug000001"><xreftitle>Bug</xreftitle><xrefdescription><para>Not finished </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="397" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a48516701df81c8aaa305e4833b1f4f41_1a48516701df81c8aaa305e4833b1f4f41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Matrix&lt; T, W, H &gt;::operator+=</definition>
        <argsstring>(const Matrix&lt; T, W, H &gt; &amp;right)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; T, W, H &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Adds a <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> to this one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_a3dfb12bc62658bbfd16e2f4a45a7252a_1a3dfb12bc62658bbfd16e2f4a45a7252a" kindref="member">operator+(const Matrix&lt;T,W,H&gt;&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> for an explanation of <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="409" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="409" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a678986df493820d6b2c987a0cdd72a5e_1a678986df493820d6b2c987a0cdd72a5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Matrix&lt; T, W, H &gt;::operator-=</definition>
        <argsstring>(const Matrix&lt; T, W, H &gt; &amp;right)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; T, W, H &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Subtracts a <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> from this one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> to subtracts </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_ac37b3c2166ec4c9c7febab5254163cdc_1ac37b3c2166ec4c9c7febab5254163cdc" kindref="member">operator-(const Matrix&lt;T,W,H&gt;&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> for an explanation of <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="420" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="420" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_ac1fddbc0d4a240507a0771bd3efca033_1ac1fddbc0d4a240507a0771bd3efca033" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Matrix&lt; T, W, H &gt;::operator*=</definition>
        <argsstring>(Matrix&lt; T, W, H &gt; &amp;right)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; T, W, H &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Multiplies <computeroutput>this</computeroutput> by a <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> to multiply </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_a0fe2af05b2e86b25d0e7b5f62152c381_1a0fe2af05b2e86b25d0e7b5f62152c381" kindref="member">operator*(const Matrix&lt;T,W,H&gt;&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> for an explanation of <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="431" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="431" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_a60fe89aa719d9b5ca49bf32d5d1477ee_1a60fe89aa719d9b5ca49bf32d5d1477ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Matrix&lt; T, W, H &gt;::operator*=</definition>
        <argsstring>(const T &amp;scalar)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const T &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Multiplies <computeroutput>this</computeroutput> by a scalar. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>What to multiply each value of this <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> by </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_a6d206a993884942362f9d9dded6a0cc5_1a6d206a993884942362f9d9dded6a0cc5" kindref="member">operator*(const T&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> for an explanation of <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="442" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="442" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="d3/dfe/a00025_aff842b10e29717c04468212b740b8ec7_1aff842b10e29717c04468212b740b8ec7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Matrix&lt; T, W, H &gt;::operator/=</definition>
        <argsstring>(const Matrix&lt; T, W, H &gt; &amp;right)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; T, W, H &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Divides a <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> from this one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> to divide </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025_a87fe1c6c8e7a36b12680322055ec5c7d_1a87fe1c6c8e7a36b12680322055ec5c7d" kindref="member">operator/(const Matrix&lt;T,W,H&gt;&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> for an explanation of <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> <ref refid="d4/d31/a00069" kindref="compound">math</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="453" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="453" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_ad8649fb50d1cebdc4f7e2886f445560a_1ad8649fb50d1cebdc4f7e2886f445560a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::array&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt; &amp;</type>
        <definition>std::array&lt; MatrixRow&lt; T, H &gt; , N&gt;&amp; mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::getContents</definition>
        <argsstring>()</argsstring>
        <name>getContents</name>
        <briefdescription>
<para>Retrieves the contents of this <computeroutput>Vector</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput>std::array</computeroutput> of this <computeroutput>Vector</computeroutput> contents </para></simplesect>
<simplesect kind="see"><para>setContents(std::array&lt;T,N&gt;) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="124" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="124" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_aac3af5465ade1ef1c7b41b579fb6099e_1aac3af5465ade1ef1c7b41b579fb6099e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::array&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt; &amp;</type>
        <definition>const std::array&lt; MatrixRow&lt; T, H &gt; , N&gt;&amp; mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::getContents</definition>
        <argsstring>() const</argsstring>
        <name>getContents</name>
        <briefdescription>
<para><computeroutput>const</computeroutput> version of <computeroutput><ref refid="d5/db6/a00042_ad8649fb50d1cebdc4f7e2886f445560a_1ad8649fb50d1cebdc4f7e2886f445560a" kindref="member">getContents()</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <computeroutput>const std::array</computeroutput> of this <computeroutput>const Vector</computeroutput> contents </para></simplesect>
<simplesect kind="see"><para>setContents(std::array&lt;T,N&gt;) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="133" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a2e674c851be8cf10808c86895e9ca86f_1a2e674c851be8cf10808c86895e9ca86f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::setContents</definition>
        <argsstring>(const std::array&lt; MatrixRow&lt; T, H &gt;, N &gt; contents)</argsstring>
        <name>setContents</name>
        <param>
          <type>const std::array&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt;</type>
          <declname>contents</declname>
        </param>
        <briefdescription>
<para>Copies the contents of an <computeroutput>std::array</computeroutput> into this <computeroutput>Vector</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>contents</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>std::array</computeroutput> whose data will be dumped into this <computeroutput>Vector</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="140" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a57b55a629453b1d1e80d81c56269e833_1a57b55a629453b1d1e80d81c56269e833" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::setContents</definition>
        <argsstring>(const MatrixRow&lt; T, H &gt; arr[N])</argsstring>
        <name>setContents</name>
        <param>
          <type>const <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Copies the contents of an array into this <computeroutput>Vector</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>An equally sized array whose contents will cloned in this <computeroutput>Vector</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="147" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="147" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a699b2e331ade356257fb185280019b87_1a699b2e331ade356257fb185280019b87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt; &amp;</type>
        <definition>MatrixRow&lt; T, H &gt; &amp; mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::get</definition>
        <argsstring>(Index i)</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get the value at a position. </para>        </briefdescription>
        <detaileddescription>
<para>Slower than <computeroutput>operator[]</computeroutput> because it does bounds checking. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>Index</computeroutput> of the requested data, zero-indexed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value located at <computeroutput>i</computeroutput> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>i</computeroutput> is greater than <computeroutput><ref refid="d5/db6/a00042_a6f08e4cabe236a4f317bc2b0f8f3d96c_1a6f08e4cabe236a4f317bc2b0f8f3d96c" kindref="member">size()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>i</computeroutput> is less than 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d5/db6/a00042_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[](Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="170" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a7595892f896b87fbb58d2c36be3389a8_1a7595892f896b87fbb58d2c36be3389a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt; &amp;</type>
        <definition>const MatrixRow&lt; T, H &gt; &amp; mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::get</definition>
        <argsstring>(Index i) const</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para><computeroutput>const</computeroutput> version of <computeroutput><ref refid="d5/db6/a00042_a699b2e331ade356257fb185280019b87_1a699b2e331ade356257fb185280019b87" kindref="member">get(Index)</ref>,</computeroutput> in case a <computeroutput>Vector</computeroutput> is declared <computeroutput>const</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>Index</computeroutput> of the requested data, zero-indexed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <computeroutput>const</computeroutput> value located at <computeroutput>i</computeroutput> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>i</computeroutput> is greater than <computeroutput><ref refid="d5/db6/a00042_a6f08e4cabe236a4f317bc2b0f8f3d96c_1a6f08e4cabe236a4f317bc2b0f8f3d96c" kindref="member">size()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>i</computeroutput> is less than 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d5/db6/a00042_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[](Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="182" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a4e214d776fd7b7e4b163c0ebb23ec3c4_1a4e214d776fd7b7e4b163c0ebb23ec3c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::set</definition>
        <argsstring>(Index position, MatrixRow&lt; T, H &gt; value)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type><ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set data at a certain position to equal a new value. </para>        </briefdescription>
        <detaileddescription>
<para>Slower than <computeroutput>operator[]</computeroutput> because it does bounds checking. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to put the new value, zero indexed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>What to put in <computeroutput>position</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>i</computeroutput> is greater than <computeroutput><ref refid="d5/db6/a00042_a6f08e4cabe236a4f317bc2b0f8f3d96c_1a6f08e4cabe236a4f317bc2b0f8f3d96c" kindref="member">size()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>i</computeroutput> is less than 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d5/db6/a00042_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[](Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="194" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_abb14d1d219fbd5cc3c9a6c50e4334986_1abb14d1d219fbd5cc3c9a6c50e4334986" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt; *</type>
        <definition>const MatrixRow&lt; T, H &gt; * mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::flatten</definition>
        <argsstring>(MatrixRow&lt; T, H &gt; arr[N]) const</argsstring>
        <name>flatten</name>
        <param>
          <type><ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Creates an array with the data of this <computeroutput>Vector</computeroutput>, in O(N) time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to <computeroutput>arr</computeroutput> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>The array to fill </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="204" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="204" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt; &amp;</type>
        <definition>MatrixRow&lt; T, H &gt; &amp; mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator[]</definition>
        <argsstring>(Index i)</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Retrieves the content at a certain <computeroutput>Index</computeroutput>, zero indexed. </para>        </briefdescription>
        <detaileddescription>
<para>This operator is faster than <computeroutput><ref refid="d5/db6/a00042_a699b2e331ade356257fb185280019b87_1a699b2e331ade356257fb185280019b87" kindref="member">get(Index)</ref>,</computeroutput> as it doesn&apos;t do bounds checking. However, accessing an invalid index will be undefined. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to retrieve the data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The data at <computeroutput>i</computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042_af56e7800e947754a7c7e508301ee3f9a_1af56e7800e947754a7c7e508301ee3f9a" kindref="member">operator[](Index) const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="217" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="217" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_af56e7800e947754a7c7e508301ee3f9a_1af56e7800e947754a7c7e508301ee3f9a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt; &amp;</type>
        <definition>const MatrixRow&lt; T, H &gt; &amp; mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator[]</definition>
        <argsstring>(Index i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para><computeroutput>const</computeroutput> version of <computeroutput><ref refid="d5/db6/a00042_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[](Index)</ref></computeroutput> used if a <computeroutput>Vector</computeroutput> is declared <computeroutput>const</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to retrieve the data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The data at <computeroutput>i</computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[](Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="226" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a7eb2384ab474fa1a0ba5171a49139e5c_1a7eb2384ab474fa1a0ba5171a49139e5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt; &amp;</type>
        <definition>virtual MatrixRow&lt; T, H &gt; &amp; mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator()</definition>
        <argsstring>(Index i)</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Retrieves content at a certain <computeroutput>Index</computeroutput>, not zero indexed. </para>        </briefdescription>
        <detaileddescription>
<para>Equal to<programlisting><codeline><highlight class="normal">vector[i-1]</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Not zero indexed <computeroutput>Index</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value at <computeroutput>i-1</computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[](Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="240" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="240" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a572904b63c9e2d35ca6625ad2f2b1627_1a572904b63c9e2d35ca6625ad2f2b1627" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt; &amp;</type>
        <definition>const MatrixRow&lt; T, H &gt; &amp; mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator()</definition>
        <argsstring>(Index i) const</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para><computeroutput>const</computeroutput> version of <computeroutput><ref refid="d5/db6/a00042_a7eb2384ab474fa1a0ba5171a49139e5c_1a7eb2384ab474fa1a0ba5171a49139e5c" kindref="member">operator()(Index)</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Not zero indexed <computeroutput>Index</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value at <computeroutput>i-1</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="249" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a41f3ca26b2d43a91797df7499afcc5c5_1a41f3ca26b2d43a91797df7499afcc5c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></type>
        <definition>Vector mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator+</definition>
        <argsstring>(const Vector&lt; MatrixRow&lt; T, H &gt;, N &gt; &amp;right) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Adds 2 <computeroutput>Vectors</computeroutput> together. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in o(N) time</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <computeroutput>Vector</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput>Vector</computeroutput> that was created by adding 2 <computeroutput>Vectors</computeroutput> together </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042_a7c2fa3ae75ebb6d155aa3e3aa140ce09_1a7c2fa3ae75ebb6d155aa3e3aa140ce09" kindref="member">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042_a7c2fa3ae75ebb6d155aa3e3aa140ce09_1a7c2fa3ae75ebb6d155aa3e3aa140ce09" kindref="member">Vector</ref></computeroutput> math </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="262" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="262" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_ac486a0798fd812967cb543c23bf60e3b_1ac486a0798fd812967cb543c23bf60e3b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></type>
        <definition>Vector mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator-</definition>
        <argsstring>(const Vector&lt; MatrixRow&lt; T, H &gt;, N &gt; &amp;right) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Subtracts 2 <computeroutput>Vectors</computeroutput> together. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in o(N) time</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <computeroutput>Vector</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput>Vector</computeroutput> that was created by subtracting 2 <computeroutput>Vectors</computeroutput> together </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042_a7c2fa3ae75ebb6d155aa3e3aa140ce09_1a7c2fa3ae75ebb6d155aa3e3aa140ce09" kindref="member">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042_a7c2fa3ae75ebb6d155aa3e3aa140ce09_1a7c2fa3ae75ebb6d155aa3e3aa140ce09" kindref="member">Vector</ref></computeroutput> math </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="278" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="278" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a743ef1fe1d428bd3fabc37adb783aca9_1a743ef1fe1d428bd3fabc37adb783aca9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></type>
        <definition>Vector mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator*</definition>
        <argsstring>(const Vector&lt; MatrixRow&lt; T, H &gt;, 3 &gt; &amp;right) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, 3 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Calculates the cross product of 2 <computeroutput>Vectors</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <computeroutput>Vector</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cross product </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042_a7c2fa3ae75ebb6d155aa3e3aa140ce09_1a7c2fa3ae75ebb6d155aa3e3aa140ce09" kindref="member">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042_a7c2fa3ae75ebb6d155aa3e3aa140ce09_1a7c2fa3ae75ebb6d155aa3e3aa140ce09" kindref="member">Vector</ref></computeroutput> math </para></simplesect>
<simplesect kind="see"><para>cross(const Vector&amp;, const Vector&amp;) </para></simplesect>
<simplesect kind="see"><para>operator*(const T) </para></simplesect>
<simplesect kind="see"><para>operator%(const Vector&amp;) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="295" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="295" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a073741c6651aad098b8ee5adea09eaa4_1a073741c6651aad098b8ee5adea09eaa4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></type>
        <definition>Vector mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator*</definition>
        <argsstring>(const MatrixRow&lt; T, H &gt; scalar) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Multiplies a <computeroutput>Vector</computeroutput> by a scalar. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>What to multiply this <computeroutput>Vector</computeroutput> by </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput>Vector</computeroutput> scaled. </para></simplesect>
<simplesect kind="see"><para>operator*(const Vector&amp;) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="343" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="343" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a44697f39e17748dcc4379a714216618b_1a44697f39e17748dcc4379a714216618b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;</type>
        <definition>MatrixRow&lt; T, H &gt;  mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator%</definition>
        <argsstring>(const Vector&lt; MatrixRow&lt; T, H &gt;, 3 &gt; &amp;right) const</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, 3 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Calculates the dot product of 2 <computeroutput>Vectors</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para>This is done in o(N) time</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <computeroutput>Vector</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dot product </para></simplesect>
<simplesect kind="see"><para><ref refid="d5/db6/a00042_a7c2fa3ae75ebb6d155aa3e3aa140ce09_1a7c2fa3ae75ebb6d155aa3e3aa140ce09" kindref="member">Vector</ref> for an explanation of <computeroutput><ref refid="d5/db6/a00042_a7c2fa3ae75ebb6d155aa3e3aa140ce09_1a7c2fa3ae75ebb6d155aa3e3aa140ce09" kindref="member">Vector</ref></computeroutput> math </para></simplesect>
<simplesect kind="see"><para>cross(const Vector&amp;, const Vector&amp;) </para></simplesect>
<simplesect kind="see"><para>operator*(const T) </para></simplesect>
<simplesect kind="see"><para>operator*(const Vector&amp;) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="326" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="326" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_ab8095bda1d18b74aafc434a0f1b2bcd4_1ab8095bda1d18b74aafc434a0f1b2bcd4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></type>
        <definition>Vector mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator/</definition>
        <argsstring>(const MatrixRow&lt; T, H &gt; scalar) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Divides a <computeroutput>Vector</computeroutput> by a scalar. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>What to divided this <computeroutput>Vector</computeroutput> by </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput>Vector</computeroutput> scaled. </para></simplesect>
<simplesect kind="see"><para>operator*(const T&amp;) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="359" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="359" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_add67c85219f90da24ad00508be384ab4_1add67c85219f90da24ad00508be384ab4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator+=</definition>
        <argsstring>(const Vector&lt; MatrixRow&lt; T, H &gt;, N &gt; &amp;right)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Adds a <computeroutput>Vector</computeroutput> to this one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>Vector</computeroutput> to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>operator+(const Vector&lt;T,N&gt;&amp;) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="372" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="372" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a4a0aee255e45235c029a51cad50b4f2c_1a4a0aee255e45235c029a51cad50b4f2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator-=</definition>
        <argsstring>(const Vector&lt; MatrixRow&lt; T, H &gt;, N &gt; &amp;right)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Subtracts a <computeroutput>Vector</computeroutput> from this one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>Vector</computeroutput> to subtract </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>operator-(const Vector&lt;T,N&gt;&amp;) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="381" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="381" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a2727025232d2c2c491b871299babcdbc_1a2727025232d2c2c491b871299babcdbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator*=</definition>
        <argsstring>(const Vector&lt; MatrixRow&lt; T, H &gt;, N &gt; &amp;right)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Multiplies a <computeroutput>Vector</computeroutput> by this one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>Vector</computeroutput> to multiply </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>operator+(const Vector&lt;T,N&gt;&amp;) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="390" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="390" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_af95e59326592e258341dfd2a02d628ff_1af95e59326592e258341dfd2a02d628ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator*=</definition>
        <argsstring>(const MatrixRow&lt; T, H &gt; &amp;scalar)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt; &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Scales this <computeroutput>Vector</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to scale </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>operator*(const Vector&lt;T,3&gt;&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator*(const T) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="408" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="408" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_aaa157b6d3969ccd93e40efd9c6656333_1aaa157b6d3969ccd93e40efd9c6656333" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator/=</definition>
        <argsstring>(const Vector&lt; MatrixRow&lt; T, H &gt;, N &gt; &amp;right)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Divides a <computeroutput>Vector</computeroutput> by this one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>Vector</computeroutput> to divide </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>operator+(const Vector&lt;T,N&gt;&amp;) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="399" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="399" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a4ea0c891100c07ca827fb2b63ff4ab40_1a4ea0c891100c07ca827fb2b63ff4ab40" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator==</definition>
        <argsstring>(const Vector&lt; MatrixRow&lt; T, H &gt;, N &gt; &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares whether 2 <computeroutput>Vectors</computeroutput> have the same values. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>Vector</computeroutput> to compare <computeroutput>this</computeroutput> against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the 2 are equal, <computeroutput>false</computeroutput> otherwise </para></simplesect>
<simplesect kind="see"><para>operator!=(const Vector&lt;T,N&gt;) const </para></simplesect>
<simplesect kind="see"><para>operator&lt;(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator&gt;=(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator&lt;=(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator&gt;(const Vector&amp;) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="424" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="424" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a4be78cbc5b6bcbe9488f5c3cd8ffa2e9_1a4be78cbc5b6bcbe9488f5c3cd8ffa2e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator!=</definition>
        <argsstring>(const Vector&lt; MatrixRow&lt; T, H &gt;, N &gt; &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares whether 2 <computeroutput>Vectors</computeroutput> don&apos;t have the same values. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>Vector</computeroutput> to compare <computeroutput>this</computeroutput> against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the 2 are not equal, <computeroutput>false</computeroutput> otherwise </para></simplesect>
<simplesect kind="see"><para>operator==(const Vector&lt;T,N&gt;) const </para></simplesect>
<simplesect kind="see"><para>operator&lt;(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator&gt;=(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator&lt;=(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator&gt;(const Vector&amp;) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="445" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="445" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_afd548f2844ce721daa85501dedc8fd6f_1afd548f2844ce721daa85501dedc8fd6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator&gt;</definition>
        <argsstring>(const Vector&lt; MatrixRow&lt; T, H &gt;, N &gt; &amp;other) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares the <computeroutput>&gt;</computeroutput> operator on 2 <computeroutput>Vectors</computeroutput> elements. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>Vector</computeroutput> to compare against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the <computeroutput>&gt;</computeroutput> operator on each element </para></simplesect>
<simplesect kind="see"><para>operator&lt;(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator&gt;=(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator&lt;=(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator==(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator!=(const Vector&amp;) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="461" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="461" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_af3d351c9d80e71ce467749dd6587b49f_1af3d351c9d80e71ce467749dd6587b49f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator&gt;=</definition>
        <argsstring>(const Vector&lt; MatrixRow&lt; T, H &gt;, N &gt; &amp;other) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares the <computeroutput>&gt;=</computeroutput> operator on 2 <computeroutput>Vectors</computeroutput> elements. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>Vector</computeroutput> to compare against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the <computeroutput>&gt;=</computeroutput> operator on each element </para></simplesect>
<simplesect kind="see"><para>operator&lt;(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator&gt;(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator&lt;=(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator==(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator!=(const Vector&amp;) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="482" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="482" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a3cf2432f2b843c9fd3a90ab73e600ee0_1a3cf2432f2b843c9fd3a90ab73e600ee0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator&lt;</definition>
        <argsstring>(const Vector&lt; MatrixRow&lt; T, H &gt;, N &gt; &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares the <computeroutput>&lt;</computeroutput> operator on 2 <computeroutput>Vectors</computeroutput> elements. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>Vector</computeroutput> to compare against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the <computeroutput>&lt;</computeroutput> operator on each element </para></simplesect>
<simplesect kind="see"><para>operator&lt;=(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator&gt;=(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator&gt;(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator==(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator!=(const Vector&amp;) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="498" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="498" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a796b41e71ce3fec49a5b1891c13290ee_1a796b41e71ce3fec49a5b1891c13290ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::operator&lt;=</definition>
        <argsstring>(const Vector&lt; MatrixRow&lt; T, H &gt;, N &gt; &amp;other) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="d5/db6/a00042" kindref="compound">Vector</ref>&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares the <computeroutput>&lt;=</computeroutput> operator on 2 <computeroutput>Vectors</computeroutput> elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>Vector</computeroutput> to compare against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the <computeroutput>&lt;=</computeroutput> operator on each element </para></simplesect>
<simplesect kind="see"><para>operator&lt;(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator&gt;=(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator&gt;(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator==(const Vector&amp;) const </para></simplesect>
<simplesect kind="see"><para>operator!=(const Vector&amp;) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="512" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="512" bodyend="514"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="d3/dfe/a00025_abeba5847e15460ac6b995627fad01293_1abeba5847e15460ac6b995627fad01293" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;output, const Matrix&lt; T, W, H &gt; &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const <ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref>&lt; T, W, H &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Operator used to output to <computeroutput>std::cout</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The output will take up multiple lines and will show all of the <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> contents <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>std::ostream</computeroutput> the <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> was inserted into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> which will be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>output</computeroutput> for chaining </para></simplesect>
<xrefsect id="d7/d46/a00002_1_bug000002"><xreftitle>Bug</xreftitle><xrefdescription><para>the order is not retained exactly </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Matrix.h" line="466" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="466" bodyend="478"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d5/db6/a00042_aa8f8d6fd2301a3407b9e6dd60e9d7ea0_1aa8f8d6fd2301a3407b9e6dd60e9d7ea0" prot="protected" static="no" mutable="no">
        <type>std::array&lt; <ref refid="d9/da4/a00078_a864ada9f6799e62e26d4b02bbd1ac4c2_1a864ada9f6799e62e26d4b02bbd1ac4c2" kindref="member">MatrixRow</ref>&lt; T, H &gt;, N &gt;</type>
        <definition>std::array&lt;MatrixRow&lt; T, H &gt; , N&gt; mc::Vector&lt; MatrixRow&lt; T, H &gt; , N &gt;::content</definition>
        <argsstring></argsstring>
        <name>content</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="536" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="536" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class representing a 2-dimensional matrix, and allows for math involving matrices. </para>    </briefdescription>
    <detaileddescription>
<para>A <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> can be known as a <computeroutput><ref refid="d5/db6/a00042" kindref="compound">Vector</ref></computeroutput> of <computeroutput>Vectors</computeroutput>. </para><para><computeroutput>Matrices</computeroutput> can be added, subtracted, and multiplyed by eachother, and by <computeroutput>Vectors</computeroutput> of equal width. </para><para>Examples: <programlisting><codeline><highlight class="normal">Matrix&lt;int,3,4&gt;<sp/>matrix<sp/>=<sp/>Matrix&lt;int,3,4&gt;()//Create<sp/>a<sp/>3<sp/>by<sp/>4<sp/>Matrix<sp/>of<sp/>ints.<sp/>By<sp/>default,<sp/>every<sp/>value<sp/>is<sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>arr[3][4]<sp/>=<sp/>{{1,2,3,4},{5,6,7,8},{9,10,11,12}};</highlight></codeline>
<codeline><highlight class="normal">matrix<sp/>=<sp/>arr;//Create<sp/>a<sp/>Matrix<sp/>from<sp/>an<sp/>existing<sp/>array.<sp/>The<sp/>array<sp/>must<sp/>be<sp/>the<sp/>same<sp/>size<sp/>as<sp/>the<sp/>Matrix.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">arr.get(x,y);//Retrieve<sp/>the<sp/>value<sp/>at<sp/>x<sp/>and<sp/>y</highlight></codeline>
<codeline><highlight class="normal">arr[x][y];//Retrieve<sp/>the<sp/>value<sp/>at<sp/>x<sp/>and<sp/>y</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">arr.set(x,y,value);<sp/>//Set<sp/>the<sp/>int<sp/>at<sp/>x<sp/>and<sp/>y<sp/>to<sp/>a<sp/>new<sp/><sp/>value</highlight></codeline>
<codeline><highlight class="normal">arr[x][y]=value;<sp/>//Set<sp/>the<sp/>int<sp/>at<sp/>x<sp/>and<sp/>y<sp/>to<sp/>a<sp/>new<sp/>value</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//Iterate<sp/>over<sp/>a<sp/>Matrix&apos;s<sp/>contents:</highlight></codeline>
<codeline><highlight class="normal">for(Index<sp/>x<sp/>=<sp/>0;x&lt;matrix.width();x++){</highlight></codeline>
<codeline><highlight class="normal">for(Index<sp/>y<sp/>=<sp/>0;y&lt;matrix.height();y++){</highlight></codeline>
<codeline><highlight class="normal">int<sp/>value<sp/>=<sp/>matrix[x][y];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">matrix.size();//Get<sp/>how<sp/>many<sp/>values<sp/>the<sp/>Matrix<sp/>is<sp/>holding</highlight></codeline>
</programlisting> <simplesect kind="see"><para><ref refid="d5/db6/a00042" kindref="compound">Vector</ref> </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>What the <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> should consist of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>H</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="435">
        <label>mc::Matrix&lt; T, W, H &gt;</label>
        <link refid="d3/dfe/a00025"/>
        <childnode refid="436" relation="public-inheritance">
        </childnode>
      </node>
      <node id="436">
        <label>mc::Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;</label>
        <link refid="d5/db6/a00042"/>
        <childnode refid="437" relation="template-instance">
          <edgelabel>&lt; MatrixRow&lt; T, H &gt;, W &gt;</edgelabel>
        </childnode>
      </node>
      <node id="437">
        <label>mc::Vector&lt; T, N &gt;</label>
        <link refid="d5/db6/a00042"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="442">
        <label>T</label>
      </node>
      <node id="441">
        <label>std::array&lt; T &gt;</label>
        <childnode refid="442" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="438">
        <label>mc::Matrix&lt; T, W, H &gt;</label>
        <link refid="d3/dfe/a00025"/>
        <childnode refid="439" relation="public-inheritance">
        </childnode>
      </node>
      <node id="440">
        <label>std::array&lt; MatrixRow&lt; T, H &gt;, N &gt;</label>
        <childnode refid="441" relation="template-instance">
          <edgelabel>&lt; MatrixRow&lt; T, H &gt;, N &gt;</edgelabel>
        </childnode>
      </node>
      <node id="439">
        <label>mc::Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;</label>
        <link refid="d5/db6/a00042"/>
        <childnode refid="440" relation="usage">
          <edgelabel>content</edgelabel>
        </childnode>
        <childnode refid="443" relation="template-instance">
          <edgelabel>&lt; MatrixRow&lt; T, H &gt;, W &gt;</edgelabel>
        </childnode>
      </node>
      <node id="444">
        <label>std::array&lt; T, N &gt;</label>
        <childnode refid="442" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="441" relation="template-instance">
          <edgelabel>&lt; T, N &gt;</edgelabel>
        </childnode>
      </node>
      <node id="443">
        <label>mc::Vector&lt; T, N &gt;</label>
        <link refid="d5/db6/a00042"/>
        <childnode refid="444" relation="usage">
          <edgelabel>content</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Utility/Matrix.h" line="27" column="1" bodyfile="include/MACE/Utility/Matrix.h" bodystart="27" bodyend="-1"/>
    <listofallmembers>
      <member refid="d5/db6/a00042_aa8f8d6fd2301a3407b9e6dd60e9d7ea0_1aa8f8d6fd2301a3407b9e6dd60e9d7ea0" prot="protected" virt="non-virtual"><scope>mc::Matrix</scope><name>content</name></member>
      <member refid="d3/dfe/a00025_ada45de3d753dc0a3b221fb40f5e906f0_1ada45de3d753dc0a3b221fb40f5e906f0" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>flatten</name></member>
      <member refid="d5/db6/a00042_abb14d1d219fbd5cc3c9a6c50e4334986_1abb14d1d219fbd5cc3c9a6c50e4334986" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>flatten</name></member>
      <member refid="d3/dfe/a00025_a0b67307fb45cc46b029d73d8ff2e9a60_1a0b67307fb45cc46b029d73d8ff2e9a60" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>flattenTransposed</name></member>
      <member refid="d3/dfe/a00025_ae066c33e758cbbd03509d27bfa7c13d7_1ae066c33e758cbbd03509d27bfa7c13d7" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>get</name></member>
      <member refid="d3/dfe/a00025_ab6e29507a89ad102b4a65911132b6c0e_1ab6e29507a89ad102b4a65911132b6c0e" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>get</name></member>
      <member refid="d5/db6/a00042_a699b2e331ade356257fb185280019b87_1a699b2e331ade356257fb185280019b87" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>get</name></member>
      <member refid="d5/db6/a00042_a7595892f896b87fbb58d2c36be3389a8_1a7595892f896b87fbb58d2c36be3389a8" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>get</name></member>
      <member refid="d5/db6/a00042_ad8649fb50d1cebdc4f7e2886f445560a_1ad8649fb50d1cebdc4f7e2886f445560a" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>getContents</name></member>
      <member refid="d5/db6/a00042_aac3af5465ade1ef1c7b41b579fb6099e_1aac3af5465ade1ef1c7b41b579fb6099e" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>getContents</name></member>
      <member refid="d3/dfe/a00025_a63c8002ee17532ba731d384f5ab3c492_1a63c8002ee17532ba731d384f5ab3c492" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>height</name></member>
      <member refid="d3/dfe/a00025_a1c0107dd6bf262a240653fcc2650fb2b_1a1c0107dd6bf262a240653fcc2650fb2b" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>Matrix</name></member>
      <member refid="d3/dfe/a00025_a4bceda87f2c87294d4a631b2229dff8f_1a4bceda87f2c87294d4a631b2229dff8f" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>Matrix</name></member>
      <member refid="d3/dfe/a00025_a59561b3a04ab8113b2dc8811cf498a58_1a59561b3a04ab8113b2dc8811cf498a58" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>Matrix</name></member>
      <member refid="d3/dfe/a00025_a16a62a958729f121805a76d43554bc69_1a16a62a958729f121805a76d43554bc69" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>Matrix</name></member>
      <member refid="d5/db6/a00042_a4be78cbc5b6bcbe9488f5c3cd8ffa2e9_1a4be78cbc5b6bcbe9488f5c3cd8ffa2e9" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator!=</name></member>
      <member refid="d5/db6/a00042_a44697f39e17748dcc4379a714216618b_1a44697f39e17748dcc4379a714216618b" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator%</name></member>
      <member refid="d3/dfe/a00025_a38adcd2607104d5323c064463d8299a7_1a38adcd2607104d5323c064463d8299a7" prot="public" virt="virtual"><scope>mc::Matrix</scope><name>operator()</name></member>
      <member refid="d3/dfe/a00025_a4b509b9169919a3a3444c983420fa1e1_1a4b509b9169919a3a3444c983420fa1e1" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator()</name></member>
      <member refid="d5/db6/a00042_a7eb2384ab474fa1a0ba5171a49139e5c_1a7eb2384ab474fa1a0ba5171a49139e5c" prot="public" virt="virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>operator()</name></member>
      <member refid="d5/db6/a00042_a572904b63c9e2d35ca6625ad2f2b1627_1a572904b63c9e2d35ca6625ad2f2b1627" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>operator()</name></member>
      <member refid="d3/dfe/a00025_a4a490e8b0e57efa77c3356e62ebd8143_1a4a490e8b0e57efa77c3356e62ebd8143" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator*</name></member>
      <member refid="d3/dfe/a00025_a0fe2af05b2e86b25d0e7b5f62152c381_1a0fe2af05b2e86b25d0e7b5f62152c381" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator*</name></member>
      <member refid="d3/dfe/a00025_a6d206a993884942362f9d9dded6a0cc5_1a6d206a993884942362f9d9dded6a0cc5" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator*</name></member>
      <member refid="d5/db6/a00042_a743ef1fe1d428bd3fabc37adb783aca9_1a743ef1fe1d428bd3fabc37adb783aca9" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>operator*</name></member>
      <member refid="d5/db6/a00042_a073741c6651aad098b8ee5adea09eaa4_1a073741c6651aad098b8ee5adea09eaa4" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>operator*</name></member>
      <member refid="d3/dfe/a00025_ac1fddbc0d4a240507a0771bd3efca033_1ac1fddbc0d4a240507a0771bd3efca033" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator*=</name></member>
      <member refid="d3/dfe/a00025_a60fe89aa719d9b5ca49bf32d5d1477ee_1a60fe89aa719d9b5ca49bf32d5d1477ee" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator*=</name></member>
      <member refid="d5/db6/a00042_a2727025232d2c2c491b871299babcdbc_1a2727025232d2c2c491b871299babcdbc" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>operator*=</name></member>
      <member refid="d5/db6/a00042_af95e59326592e258341dfd2a02d628ff_1af95e59326592e258341dfd2a02d628ff" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>operator*=</name></member>
      <member refid="d3/dfe/a00025_a9e7fd35339c2afb9a2adc90727d86d56_1a9e7fd35339c2afb9a2adc90727d86d56" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator+</name></member>
      <member refid="d3/dfe/a00025_a3dfb12bc62658bbfd16e2f4a45a7252a_1a3dfb12bc62658bbfd16e2f4a45a7252a" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator+</name></member>
      <member refid="d5/db6/a00042_a41f3ca26b2d43a91797df7499afcc5c5_1a41f3ca26b2d43a91797df7499afcc5c5" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>operator+</name></member>
      <member refid="d3/dfe/a00025_a48516701df81c8aaa305e4833b1f4f41_1a48516701df81c8aaa305e4833b1f4f41" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator+=</name></member>
      <member refid="d5/db6/a00042_add67c85219f90da24ad00508be384ab4_1add67c85219f90da24ad00508be384ab4" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>operator+=</name></member>
      <member refid="d3/dfe/a00025_a64e92871d5001d50398a9150d6813345_1a64e92871d5001d50398a9150d6813345" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator-</name></member>
      <member refid="d3/dfe/a00025_ac37b3c2166ec4c9c7febab5254163cdc_1ac37b3c2166ec4c9c7febab5254163cdc" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator-</name></member>
      <member refid="d5/db6/a00042_ac486a0798fd812967cb543c23bf60e3b_1ac486a0798fd812967cb543c23bf60e3b" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>operator-</name></member>
      <member refid="d3/dfe/a00025_a678986df493820d6b2c987a0cdd72a5e_1a678986df493820d6b2c987a0cdd72a5e" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator-=</name></member>
      <member refid="d5/db6/a00042_a4a0aee255e45235c029a51cad50b4f2c_1a4a0aee255e45235c029a51cad50b4f2c" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>operator-=</name></member>
      <member refid="d3/dfe/a00025_a87fe1c6c8e7a36b12680322055ec5c7d_1a87fe1c6c8e7a36b12680322055ec5c7d" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator/</name></member>
      <member refid="d5/db6/a00042_ab8095bda1d18b74aafc434a0f1b2bcd4_1ab8095bda1d18b74aafc434a0f1b2bcd4" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>operator/</name></member>
      <member refid="d3/dfe/a00025_aff842b10e29717c04468212b740b8ec7_1aff842b10e29717c04468212b740b8ec7" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator/=</name></member>
      <member refid="d5/db6/a00042_aaa157b6d3969ccd93e40efd9c6656333_1aaa157b6d3969ccd93e40efd9c6656333" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>operator/=</name></member>
      <member refid="d5/db6/a00042_a3cf2432f2b843c9fd3a90ab73e600ee0_1a3cf2432f2b843c9fd3a90ab73e600ee0" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator&lt;</name></member>
      <member refid="d3/dfe/a00025_abeba5847e15460ac6b995627fad01293_1abeba5847e15460ac6b995627fad01293" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator&lt;&lt;</name></member>
      <member refid="d5/db6/a00042_a796b41e71ce3fec49a5b1891c13290ee_1a796b41e71ce3fec49a5b1891c13290ee" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator&lt;=</name></member>
      <member refid="d5/db6/a00042_a4ea0c891100c07ca827fb2b63ff4ab40_1a4ea0c891100c07ca827fb2b63ff4ab40" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator==</name></member>
      <member refid="d5/db6/a00042_afd548f2844ce721daa85501dedc8fd6f_1afd548f2844ce721daa85501dedc8fd6f" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator&gt;</name></member>
      <member refid="d5/db6/a00042_af3d351c9d80e71ce467749dd6587b49f_1af3d351c9d80e71ce467749dd6587b49f" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator&gt;=</name></member>
      <member refid="d5/db6/a00042_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator[]</name></member>
      <member refid="d5/db6/a00042_af56e7800e947754a7c7e508301ee3f9a_1af56e7800e947754a7c7e508301ee3f9a" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>operator[]</name></member>
      <member refid="d3/dfe/a00025_aadb1be5388fafceb50d459e5f9242cab_1aadb1be5388fafceb50d459e5f9242cab" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>set</name></member>
      <member refid="d5/db6/a00042_a4e214d776fd7b7e4b163c0ebb23ec3c4_1a4e214d776fd7b7e4b163c0ebb23ec3c4" prot="public" virt="non-virtual" ambiguityscope="Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;::"><scope>mc::Matrix</scope><name>set</name></member>
      <member refid="d5/db6/a00042_a2e674c851be8cf10808c86895e9ca86f_1a2e674c851be8cf10808c86895e9ca86f" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>setContents</name></member>
      <member refid="d5/db6/a00042_a57b55a629453b1d1e80d81c56269e833_1a57b55a629453b1d1e80d81c56269e833" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>setContents</name></member>
      <member refid="d3/dfe/a00025_a69643200eb846e53dcd8b1f5aa11ab9d_1a69643200eb846e53dcd8b1f5aa11ab9d" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>size</name></member>
      <member refid="d5/db6/a00042_a7c2fa3ae75ebb6d155aa3e3aa140ce09_1a7c2fa3ae75ebb6d155aa3e3aa140ce09" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>Vector</name></member>
      <member refid="d5/db6/a00042_a417fb70d18a6f7c59b42c451dd396189_1a417fb70d18a6f7c59b42c451dd396189" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>Vector</name></member>
      <member refid="d5/db6/a00042_a417ea1abf7c631482d80c04b05003bb2_1a417ea1abf7c631482d80c04b05003bb2" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>Vector</name></member>
      <member refid="d5/db6/a00042_ad81a516cd25fe7e71ae9a1a01c8e74c5_1ad81a516cd25fe7e71ae9a1a01c8e74c5" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>Vector</name></member>
      <member refid="d5/db6/a00042_a9cd50db0b1a697ff4368a1072e99182d_1a9cd50db0b1a697ff4368a1072e99182d" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>Vector</name></member>
      <member refid="d3/dfe/a00025_a62d693520c176b4aca04958a68e9a937_1a62d693520c176b4aca04958a68e9a937" prot="public" virt="non-virtual"><scope>mc::Matrix</scope><name>width</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
