<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d0/dc0/a00033" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::ShaderProgram</compoundname>
    <includes refid="d4/dca/a00048" local="no">Shaders.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d0/dc0/a00033_1ace7ac1a20ec5197223e55d28f678b835" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int mc::gfx::ShaderProgram::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="133" column="1" bodyfile="include/MACE/Graphics/Shaders.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/dc0/a00033_1aa2fafb4fffa4f44e776f2378a8af0ce5" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int mc::gfx::ShaderProgram::fragId</definition>
        <argsstring></argsstring>
        <name>fragId</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="134" column="1" bodyfile="include/MACE/Graphics/Shaders.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/dc0/a00033_1a51eef64910e89bc51fd52ca934f16b19" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int mc::gfx::ShaderProgram::vertId</definition>
        <argsstring></argsstring>
        <name>vertId</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="134" column="1" bodyfile="include/MACE/Graphics/Shaders.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/dc0/a00033_1ad59697d5502e685587c3bf3fcbfd9c7a" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, int &gt;</type>
        <definition>std::unordered_map&lt;std::string, int&gt; mc::gfx::ShaderProgram::uniforms</definition>
        <argsstring></argsstring>
        <name>uniforms</name>
        <initializer>= std::unordered_map&lt;std::string, int&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="136" column="1" bodyfile="include/MACE/Graphics/Shaders.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d0/dc0/a00033_aea31705340f97facda89120cd65bb4ff_1aea31705340f97facda89120cd65bb4ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mc::gfx::ShaderProgram::ShaderProgram</definition>
        <argsstring>()</argsstring>
        <name>ShaderProgram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a2638a65b2d14c29ea50e047f8057774a_1a2638a65b2d14c29ea50e047f8057774a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mc::gfx::ShaderProgram::~ShaderProgram</definition>
        <argsstring>()</argsstring>
        <name>~ShaderProgram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a7bc5fc15808b30231eea9005ebd44355_1a7bc5fc15808b30231eea9005ebd44355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a3efbd29de3977984c7a4cda590aa3278_1a3efbd29de3977984c7a4cda590aa3278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ada4e8597cf6cdd35ebbc84a825c588f4_1ada4e8597cf6cdd35ebbc84a825c588f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::bind</definition>
        <argsstring>() const </argsstring>
        <name>bind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ade6fbfa5b10ded6710062ac4a6bf5d70_1ade6fbfa5b10ded6710062ac4a6bf5d70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::unbind</definition>
        <argsstring>() const </argsstring>
        <name>unbind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ab4c9999ede0f36708b55221436a54f70_1ab4c9999ede0f36708b55221436a54f70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::createFragment</definition>
        <argsstring>(const char shader[])</argsstring>
        <name>createFragment</name>
        <param>
          <type>const char</type>
          <declname>shader</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a7bc588e1ad571d027bff3ce5305a6b62_1a7bc588e1ad571d027bff3ce5305a6b62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::createFragment</definition>
        <argsstring>(const std::string &amp;shader)</argsstring>
        <name>createFragment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>shader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a5e6f5fdcfc1afa3f0167f06d997fbbd6_1a5e6f5fdcfc1afa3f0167f06d997fbbd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::createVertex</definition>
        <argsstring>(const char shader[])</argsstring>
        <name>createVertex</name>
        <param>
          <type>const char</type>
          <declname>shader</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a31ac934a29270b0dc805f86e0ae7c70a_1a31ac934a29270b0dc805f86e0ae7c70a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::createVertex</definition>
        <argsstring>(const std::string &amp;shader)</argsstring>
        <name>createVertex</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>shader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a0dbd21b7aa6174e1163fbfdbcf8e83b8_1a0dbd21b7aa6174e1163fbfdbcf8e83b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::createUniform</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>createUniform</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a9e433380d442b01f9b2bec847d5b398a_1a9e433380d442b01f9b2bec847d5b398a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::createUniform</definition>
        <argsstring>(const char *name)</argsstring>
        <name>createUniform</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a3cf6d8ddd4397ec976a331a8be6e4944_1a3cf6d8ddd4397ec976a331a8be6e4944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::gfx::ShaderProgram::getUniformLocation</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>getUniformLocation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a65241516801cad648a606eb53a404484_1a65241516801cad648a606eb53a404484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::gfx::ShaderProgram::getUniformLocation</definition>
        <argsstring>(const char *name)</argsstring>
        <name>getUniformLocation</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a5f1ee3de3f2d6ab32d787e49dbae4f7c_1a5f1ee3de3f2d6ab32d787e49dbae4f7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::gfx::ShaderProgram::getProgramID</definition>
        <argsstring>() const </argsstring>
        <name>getProgramID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a5b3b32ed73505ca7784afac5d796a16d_1a5b3b32ed73505ca7784afac5d796a16d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::gfx::ShaderProgram::getVertexID</definition>
        <argsstring>() const </argsstring>
        <name>getVertexID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a00fcb781fe5665f51572373c7861902a_1a00fcb781fe5665f51572373c7861902a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::gfx::ShaderProgram::getFragmentID</definition>
        <argsstring>() const </argsstring>
        <name>getFragmentID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a9b56aa9cfd26169029ba6bd5e8e38e81_1a9b56aa9cfd26169029ba6bd5e8e38e81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 2, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 2, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ac7ea46c731a6285267f42763822c2080_1ac7ea46c731a6285267f42763822c2080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 2, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 2, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_aff9e925ae01cb023529aab7da793cdfa_1aff9e925ae01cb023529aab7da793cdfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 3, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 3, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a068661e83629e0ce19bcc34539a5410b_1a068661e83629e0ce19bcc34539a5410b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 3, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 3, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a93ab9600742262095b501fac0413fd3b_1a93ab9600742262095b501fac0413fd3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 4, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 4, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a22865bc54ba9a29e80a5e734c25d9f4e_1a22865bc54ba9a29e80a5e734c25d9f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 4, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 4, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a85c97483d10d880e265a6ff6d08d7efd_1a85c97483d10d880e265a6ff6d08d7efd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 2, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 2, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a2a97617f01ccaaa28d0761af06bdbb97_1a2a97617f01ccaaa28d0761af06bdbb97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 2, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 2, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_abef80c98854be80cbabe468b92c557e3_1abef80c98854be80cbabe468b92c557e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 3, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 3, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a2c52bee042d470133d4087885e35f328_1a2c52bee042d470133d4087885e35f328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 3, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 3, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a7c65ea34cf03a8405ef873d56ebfa61c_1a7c65ea34cf03a8405ef873d56ebfa61c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 2, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 2, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a2a7c5f30c885fa989a7a8e9829c4c667_1a2a7c5f30c885fa989a7a8e9829c4c667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 2, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 2, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ae0af00505a4dca868a9071ac7210281f_1ae0af00505a4dca868a9071ac7210281f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 3, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 3, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ab00c4aaec9df50a227a40e5815f2219a_1ab00c4aaec9df50a227a40e5815f2219a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 3, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 3, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a331e61e28bafb57de038e4a7ade762f0_1a331e61e28bafb57de038e4a7ade762f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; float, 4, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 4, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ac773a16f9292b9361a7f80f7ebf79c59_1ac773a16f9292b9361a7f80f7ebf79c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; float, 4, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; float, 4, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a31d0e379b1f06013ef41b01980842ccd_1a31d0e379b1f06013ef41b01980842ccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 2, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 2, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_aa80cc7be8ce4ef4b301efec47cae39c8_1aa80cc7be8ce4ef4b301efec47cae39c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 2, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 2, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a49ae565bd6fdd625f29666b987c87506_1a49ae565bd6fdd625f29666b987c87506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 3, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 3, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a62baf05fa3e390d2e6d10db820e45131_1a62baf05fa3e390d2e6d10db820e45131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 3, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 3, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ac65619891d762f91848e6bbfbaaf087c_1ac65619891d762f91848e6bbfbaaf087c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 4, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 4, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_aab3832cc44a2898cd146eacb08565c6e_1aab3832cc44a2898cd146eacb08565c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 4, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 4, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_afeb3a75b8d0f1145d617d94249449f3e_1afeb3a75b8d0f1145d617d94249449f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 2, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 2, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_aed8e6148133e4bde1977d220ff2bb41e_1aed8e6148133e4bde1977d220ff2bb41e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 2, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 2, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_aaedd8e0ef6f7931a97de44dfab964d3e_1aaedd8e0ef6f7931a97de44dfab964d3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 3, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 3, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a30b9bcd2ad66abd4005671c88c9b3ef8_1a30b9bcd2ad66abd4005671c88c9b3ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 3, 2 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 3, 2 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a89dbe74d014e845d94dcc0830bb6fd44_1a89dbe74d014e845d94dcc0830bb6fd44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 2, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 2, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a2eb8c0d22a3ef379173b997329ce5c6a_1a2eb8c0d22a3ef379173b997329ce5c6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 2, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 2, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_af234649932d9e781380133df7669f004_1af234649932d9e781380133df7669f004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 3, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 3, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_aae55497b0dc747bcd3b7223be9fd9e7d_1aae55497b0dc747bcd3b7223be9fd9e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 3, 4 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 3, 4 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_aaf94fd7a10429669f0f4f29c170257de_1aaf94fd7a10429669f0f4f29c170257de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const bool transpose, const mc::Matrix&lt; double, 4, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>transpose</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 4, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a6c7a9d043fcb3650cd19b4e80468527b_1a6c7a9d043fcb3650cd19b4e80468527b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Matrix&lt; double, 4, 3 &gt; &amp;m)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d3/d52/a00023" kindref="compound">mc::Matrix</ref>&lt; double, 4, 3 &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a2927e37626ecf6ea3a8e76b2ef994633_1a2927e37626ecf6ea3a8e76b2ef994633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const float a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_af76dd34561f1b3ea74324e7b0b71ebcf_1af76dd34561f1b3ea74324e7b0b71ebcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const float a, const float b)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a5af4881d61c602c9cf18f44a8b05eb0a_1a5af4881d61c602c9cf18f44a8b05eb0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const float a, const float b, const float c)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a47434a585e5dde7b1b8430bdbde467fd_1a47434a585e5dde7b1b8430bdbde467fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const float a, const float b, const float c, const float d)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a864ac93f5cac6088659ef989082c3d23_1a864ac93f5cac6088659ef989082c3d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size arraySize, const float *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a81088654e3ca5e34bad6bfc692cd4288_1a81088654e3ca5e34bad6bfc692cd4288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size componentSize, const Size arraySize, const float *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>componentSize</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a8e712a8e3fedbed535ada336dfc8c5ff_1a8e712a8e3fedbed535ada336dfc8c5ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; float, 1 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; float, 1 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a0a5b5ec7b2b193f65ca4ae2113748e27_1a0a5b5ec7b2b193f65ca4ae2113748e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; float, 2 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; float, 2 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ad7abacf9ede008ed68d6a4f180d16899_1ad7abacf9ede008ed68d6a4f180d16899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; float, 3 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; float, 3 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a7646df2ea83b9cf6d117d0b395745b72_1a7646df2ea83b9cf6d117d0b395745b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; float, 4 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; float, 4 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_af5b575f566c36efb49fea7f96b1b0e5f_1af5b575f566c36efb49fea7f96b1b0e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const double a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a6e514a09b946d80e69b358c3de0e7fc7_1a6e514a09b946d80e69b358c3de0e7fc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const double a, const double b)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a0ea18c62ea7449e31d8434c228a5daa4_1a0ea18c62ea7449e31d8434c228a5daa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const double a, const double b, const double c)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a90f25f7c7b523f9c7af6f83b91b909d6_1a90f25f7c7b523f9c7af6f83b91b909d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const double a, const double b, const double c, const double d)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a8d558a65458b5b0bf3220572e92360d4_1a8d558a65458b5b0bf3220572e92360d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size arraySize, const double *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ab581b59d4df8d1fd15f80bc11e656489_1ab581b59d4df8d1fd15f80bc11e656489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size componentSize, const Size arraySize, const double *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>componentSize</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a1cc22976b1c31439eb0da06eb051b78e_1a1cc22976b1c31439eb0da06eb051b78e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; double, 1 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; double, 1 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ac17e9b9f0f7a40e2ac7930d5bf9f3589_1ac17e9b9f0f7a40e2ac7930d5bf9f3589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; double, 2 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; double, 2 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a856fa230c729c7e6161b57facec72235_1a856fa230c729c7e6161b57facec72235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; double, 3 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; double, 3 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a588afa14f1e6fe3d23520a4326b8dc37_1a588afa14f1e6fe3d23520a4326b8dc37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; double, 4 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; double, 4 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_aa263661a7dae88475ebc72958e809f85_1aa263661a7dae88475ebc72958e809f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const int a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_aeadfe77421bf7f29e48f4693ae25273d_1aeadfe77421bf7f29e48f4693ae25273d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const int a, const int b)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ad1a2e9572919c5d33cc691b3a1706bc8_1ad1a2e9572919c5d33cc691b3a1706bc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const int a, const int b, const int c)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_abea959d4815e96b8f6410831908df11e_1abea959d4815e96b8f6410831908df11e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const int a, const int b, const int c, const int d)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ac1bc46b796fba38af7c38d6ff31faffd_1ac1bc46b796fba38af7c38d6ff31faffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size arraySize, const int *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a95ce6f91d7303dd4c02af74238a407fb_1a95ce6f91d7303dd4c02af74238a407fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size componentSize, const Size arraySize, const int *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>componentSize</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ae3b98d4f62c8e41cee648cfe210bada7_1ae3b98d4f62c8e41cee648cfe210bada7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; int, 1 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; int, 1 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ababc89e4828a07ae866e78818640fa92_1ababc89e4828a07ae866e78818640fa92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; int, 2 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; int, 2 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_abec8d60b8042cd0beeb168217a677f94_1abec8d60b8042cd0beeb168217a677f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; int, 3 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; int, 3 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a764765aca2f28fe8249bf4a826a27562_1a764765aca2f28fe8249bf4a826a27562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; int, 4 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; int, 4 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a6d5b95b01cedde8dd899779b8cba1f36_1a6d5b95b01cedde8dd899779b8cba1f36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const unsigned int a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ad05f00eb80db18bb3a4f34be40e62f32_1ad05f00eb80db18bb3a4f34be40e62f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const unsigned int a, const unsigned int b)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ac5febe69cc9bf7999acdc1062778c022_1ac5febe69cc9bf7999acdc1062778c022" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const unsigned int a, const unsigned int b, const unsigned int c)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a194d1ff560ac9fbe2e170d560b89c60f_1a194d1ff560ac9fbe2e170d560b89c60f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const unsigned int a, const unsigned int b, const unsigned int c, const unsigned int d)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_adbd1966373cfb230e2ff8b94dfb1451f_1adbd1966373cfb230e2ff8b94dfb1451f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size arraySize, const unsigned int *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_af6245896d5fc84a1d62ba71c3aab371a_1af6245896d5fc84a1d62ba71c3aab371a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const Size componentSize, const Size arraySize, const unsigned int *a)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>componentSize</declname>
        </param>
        <param>
          <type>const <ref refid="d9/da5/a00075_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>arraySize</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ae5f49622e67a2b43ce2fdb3be9935d10_1ae5f49622e67a2b43ce2fdb3be9935d10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; unsigned int, 1 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; unsigned int, 1 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ab3b74d8919fc02db7c470fe33b92918e_1ab3b74d8919fc02db7c470fe33b92918e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; unsigned int, 2 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; unsigned int, 2 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_a300eddfc73c2000af1a348279b799db5_1a300eddfc73c2000af1a348279b799db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; unsigned int, 3 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; unsigned int, 3 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_ae77ae33ec559e4932b98546fc027130e_1ae77ae33ec559e4932b98546fc027130e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::setUniform</definition>
        <argsstring>(char *name, const mc::Vector&lt; unsigned int, 4 &gt; v)</argsstring>
        <name>setUniform</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">mc::Vector</ref>&lt; unsigned int, 4 &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="130" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d0/dc0/a00033_1a86cf07c7865d08739ca9581e2c624202" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::gfx::ShaderProgram::createShader</definition>
        <argsstring>(const char code[], const GLenum &amp;type)</argsstring>
        <name>createShader</name>
        <param>
          <type>const char</type>
          <declname>code</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const GLenum &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/dc0/a00033_1a5c248bd09c05d1c89b947f70f0e01efc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ShaderProgram::createProgram</definition>
        <argsstring>()</argsstring>
        <name>createProgram</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Shaders.h" line="140" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="d8/d84/a00001_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>make a shader class </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="include/MACE/Graphics/Shaders.h" line="25" column="1" bodyfile="include/MACE/Graphics/Shaders.h" bodystart="25" bodyend="142"/>
    <listofallmembers>
      <member refid="d0/dc0/a00033_ada4e8597cf6cdd35ebbc84a825c588f4_1ada4e8597cf6cdd35ebbc84a825c588f4" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>bind</name></member>
      <member refid="d0/dc0/a00033_ab4c9999ede0f36708b55221436a54f70_1ab4c9999ede0f36708b55221436a54f70" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>createFragment</name></member>
      <member refid="d0/dc0/a00033_a7bc588e1ad571d027bff3ce5305a6b62_1a7bc588e1ad571d027bff3ce5305a6b62" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>createFragment</name></member>
      <member refid="d0/dc0/a00033_1a5c248bd09c05d1c89b947f70f0e01efc" prot="private" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>createProgram</name></member>
      <member refid="d0/dc0/a00033_1a86cf07c7865d08739ca9581e2c624202" prot="private" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>createShader</name></member>
      <member refid="d0/dc0/a00033_a0dbd21b7aa6174e1163fbfdbcf8e83b8_1a0dbd21b7aa6174e1163fbfdbcf8e83b8" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>createUniform</name></member>
      <member refid="d0/dc0/a00033_a9e433380d442b01f9b2bec847d5b398a_1a9e433380d442b01f9b2bec847d5b398a" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>createUniform</name></member>
      <member refid="d0/dc0/a00033_a5e6f5fdcfc1afa3f0167f06d997fbbd6_1a5e6f5fdcfc1afa3f0167f06d997fbbd6" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>createVertex</name></member>
      <member refid="d0/dc0/a00033_a31ac934a29270b0dc805f86e0ae7c70a_1a31ac934a29270b0dc805f86e0ae7c70a" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>createVertex</name></member>
      <member refid="d0/dc0/a00033_a3efbd29de3977984c7a4cda590aa3278_1a3efbd29de3977984c7a4cda590aa3278" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>destroy</name></member>
      <member refid="d0/dc0/a00033_1aa2fafb4fffa4f44e776f2378a8af0ce5" prot="private" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>fragId</name></member>
      <member refid="d0/dc0/a00033_a00fcb781fe5665f51572373c7861902a_1a00fcb781fe5665f51572373c7861902a" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>getFragmentID</name></member>
      <member refid="d0/dc0/a00033_a5f1ee3de3f2d6ab32d787e49dbae4f7c_1a5f1ee3de3f2d6ab32d787e49dbae4f7c" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>getProgramID</name></member>
      <member refid="d0/dc0/a00033_a3cf6d8ddd4397ec976a331a8be6e4944_1a3cf6d8ddd4397ec976a331a8be6e4944" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>getUniformLocation</name></member>
      <member refid="d0/dc0/a00033_a65241516801cad648a606eb53a404484_1a65241516801cad648a606eb53a404484" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>getUniformLocation</name></member>
      <member refid="d0/dc0/a00033_a5b3b32ed73505ca7784afac5d796a16d_1a5b3b32ed73505ca7784afac5d796a16d" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>getVertexID</name></member>
      <member refid="d0/dc0/a00033_1ace7ac1a20ec5197223e55d28f678b835" prot="private" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>id</name></member>
      <member refid="d0/dc0/a00033_a7bc5fc15808b30231eea9005ebd44355_1a7bc5fc15808b30231eea9005ebd44355" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>init</name></member>
      <member refid="d0/dc0/a00033_a9b56aa9cfd26169029ba6bd5e8e38e81_1a9b56aa9cfd26169029ba6bd5e8e38e81" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ac7ea46c731a6285267f42763822c2080_1ac7ea46c731a6285267f42763822c2080" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_aff9e925ae01cb023529aab7da793cdfa_1aff9e925ae01cb023529aab7da793cdfa" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a068661e83629e0ce19bcc34539a5410b_1a068661e83629e0ce19bcc34539a5410b" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a93ab9600742262095b501fac0413fd3b_1a93ab9600742262095b501fac0413fd3b" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a22865bc54ba9a29e80a5e734c25d9f4e_1a22865bc54ba9a29e80a5e734c25d9f4e" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a85c97483d10d880e265a6ff6d08d7efd_1a85c97483d10d880e265a6ff6d08d7efd" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a2a97617f01ccaaa28d0761af06bdbb97_1a2a97617f01ccaaa28d0761af06bdbb97" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_abef80c98854be80cbabe468b92c557e3_1abef80c98854be80cbabe468b92c557e3" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a2c52bee042d470133d4087885e35f328_1a2c52bee042d470133d4087885e35f328" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a7c65ea34cf03a8405ef873d56ebfa61c_1a7c65ea34cf03a8405ef873d56ebfa61c" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a2a7c5f30c885fa989a7a8e9829c4c667_1a2a7c5f30c885fa989a7a8e9829c4c667" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ae0af00505a4dca868a9071ac7210281f_1ae0af00505a4dca868a9071ac7210281f" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ab00c4aaec9df50a227a40e5815f2219a_1ab00c4aaec9df50a227a40e5815f2219a" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a331e61e28bafb57de038e4a7ade762f0_1a331e61e28bafb57de038e4a7ade762f0" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ac773a16f9292b9361a7f80f7ebf79c59_1ac773a16f9292b9361a7f80f7ebf79c59" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a31d0e379b1f06013ef41b01980842ccd_1a31d0e379b1f06013ef41b01980842ccd" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_aa80cc7be8ce4ef4b301efec47cae39c8_1aa80cc7be8ce4ef4b301efec47cae39c8" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a49ae565bd6fdd625f29666b987c87506_1a49ae565bd6fdd625f29666b987c87506" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a62baf05fa3e390d2e6d10db820e45131_1a62baf05fa3e390d2e6d10db820e45131" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ac65619891d762f91848e6bbfbaaf087c_1ac65619891d762f91848e6bbfbaaf087c" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_aab3832cc44a2898cd146eacb08565c6e_1aab3832cc44a2898cd146eacb08565c6e" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_afeb3a75b8d0f1145d617d94249449f3e_1afeb3a75b8d0f1145d617d94249449f3e" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_aed8e6148133e4bde1977d220ff2bb41e_1aed8e6148133e4bde1977d220ff2bb41e" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_aaedd8e0ef6f7931a97de44dfab964d3e_1aaedd8e0ef6f7931a97de44dfab964d3e" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a30b9bcd2ad66abd4005671c88c9b3ef8_1a30b9bcd2ad66abd4005671c88c9b3ef8" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a89dbe74d014e845d94dcc0830bb6fd44_1a89dbe74d014e845d94dcc0830bb6fd44" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a2eb8c0d22a3ef379173b997329ce5c6a_1a2eb8c0d22a3ef379173b997329ce5c6a" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_af234649932d9e781380133df7669f004_1af234649932d9e781380133df7669f004" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_aae55497b0dc747bcd3b7223be9fd9e7d_1aae55497b0dc747bcd3b7223be9fd9e7d" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_aaf94fd7a10429669f0f4f29c170257de_1aaf94fd7a10429669f0f4f29c170257de" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a6c7a9d043fcb3650cd19b4e80468527b_1a6c7a9d043fcb3650cd19b4e80468527b" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a2927e37626ecf6ea3a8e76b2ef994633_1a2927e37626ecf6ea3a8e76b2ef994633" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_af76dd34561f1b3ea74324e7b0b71ebcf_1af76dd34561f1b3ea74324e7b0b71ebcf" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a5af4881d61c602c9cf18f44a8b05eb0a_1a5af4881d61c602c9cf18f44a8b05eb0a" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a47434a585e5dde7b1b8430bdbde467fd_1a47434a585e5dde7b1b8430bdbde467fd" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a864ac93f5cac6088659ef989082c3d23_1a864ac93f5cac6088659ef989082c3d23" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a81088654e3ca5e34bad6bfc692cd4288_1a81088654e3ca5e34bad6bfc692cd4288" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a8e712a8e3fedbed535ada336dfc8c5ff_1a8e712a8e3fedbed535ada336dfc8c5ff" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a0a5b5ec7b2b193f65ca4ae2113748e27_1a0a5b5ec7b2b193f65ca4ae2113748e27" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ad7abacf9ede008ed68d6a4f180d16899_1ad7abacf9ede008ed68d6a4f180d16899" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a7646df2ea83b9cf6d117d0b395745b72_1a7646df2ea83b9cf6d117d0b395745b72" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_af5b575f566c36efb49fea7f96b1b0e5f_1af5b575f566c36efb49fea7f96b1b0e5f" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a6e514a09b946d80e69b358c3de0e7fc7_1a6e514a09b946d80e69b358c3de0e7fc7" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a0ea18c62ea7449e31d8434c228a5daa4_1a0ea18c62ea7449e31d8434c228a5daa4" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a90f25f7c7b523f9c7af6f83b91b909d6_1a90f25f7c7b523f9c7af6f83b91b909d6" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a8d558a65458b5b0bf3220572e92360d4_1a8d558a65458b5b0bf3220572e92360d4" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ab581b59d4df8d1fd15f80bc11e656489_1ab581b59d4df8d1fd15f80bc11e656489" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a1cc22976b1c31439eb0da06eb051b78e_1a1cc22976b1c31439eb0da06eb051b78e" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ac17e9b9f0f7a40e2ac7930d5bf9f3589_1ac17e9b9f0f7a40e2ac7930d5bf9f3589" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a856fa230c729c7e6161b57facec72235_1a856fa230c729c7e6161b57facec72235" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a588afa14f1e6fe3d23520a4326b8dc37_1a588afa14f1e6fe3d23520a4326b8dc37" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_aa263661a7dae88475ebc72958e809f85_1aa263661a7dae88475ebc72958e809f85" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_aeadfe77421bf7f29e48f4693ae25273d_1aeadfe77421bf7f29e48f4693ae25273d" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ad1a2e9572919c5d33cc691b3a1706bc8_1ad1a2e9572919c5d33cc691b3a1706bc8" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_abea959d4815e96b8f6410831908df11e_1abea959d4815e96b8f6410831908df11e" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ac1bc46b796fba38af7c38d6ff31faffd_1ac1bc46b796fba38af7c38d6ff31faffd" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a95ce6f91d7303dd4c02af74238a407fb_1a95ce6f91d7303dd4c02af74238a407fb" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ae3b98d4f62c8e41cee648cfe210bada7_1ae3b98d4f62c8e41cee648cfe210bada7" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ababc89e4828a07ae866e78818640fa92_1ababc89e4828a07ae866e78818640fa92" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_abec8d60b8042cd0beeb168217a677f94_1abec8d60b8042cd0beeb168217a677f94" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a764765aca2f28fe8249bf4a826a27562_1a764765aca2f28fe8249bf4a826a27562" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a6d5b95b01cedde8dd899779b8cba1f36_1a6d5b95b01cedde8dd899779b8cba1f36" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ad05f00eb80db18bb3a4f34be40e62f32_1ad05f00eb80db18bb3a4f34be40e62f32" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ac5febe69cc9bf7999acdc1062778c022_1ac5febe69cc9bf7999acdc1062778c022" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a194d1ff560ac9fbe2e170d560b89c60f_1a194d1ff560ac9fbe2e170d560b89c60f" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_adbd1966373cfb230e2ff8b94dfb1451f_1adbd1966373cfb230e2ff8b94dfb1451f" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_af6245896d5fc84a1d62ba71c3aab371a_1af6245896d5fc84a1d62ba71c3aab371a" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ae5f49622e67a2b43ce2fdb3be9935d10_1ae5f49622e67a2b43ce2fdb3be9935d10" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ab3b74d8919fc02db7c470fe33b92918e_1ab3b74d8919fc02db7c470fe33b92918e" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_a300eddfc73c2000af1a348279b799db5_1a300eddfc73c2000af1a348279b799db5" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_ae77ae33ec559e4932b98546fc027130e_1ae77ae33ec559e4932b98546fc027130e" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>setUniform</name></member>
      <member refid="d0/dc0/a00033_aea31705340f97facda89120cd65bb4ff_1aea31705340f97facda89120cd65bb4ff" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>ShaderProgram</name></member>
      <member refid="d0/dc0/a00033_ade6fbfa5b10ded6710062ac4a6bf5d70_1ade6fbfa5b10ded6710062ac4a6bf5d70" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>unbind</name></member>
      <member refid="d0/dc0/a00033_1ad59697d5502e685587c3bf3fcbfd9c7a" prot="private" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>uniforms</name></member>
      <member refid="d0/dc0/a00033_1a51eef64910e89bc51fd52ca934f16b19" prot="private" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>vertId</name></member>
      <member refid="d0/dc0/a00033_a2638a65b2d14c29ea50e047f8057774a_1a2638a65b2d14c29ea50e047f8057774a" prot="public" virt="non-virtual"><scope>mc::gfx::ShaderProgram</scope><name>~ShaderProgram</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
