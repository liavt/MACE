<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d1/dc6/a00037" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::ogl::Shader</compoundname>
    <basecompoundref refid="d0/d33/a00027" prot="public" virt="non-virtual">mc::gfx::ogl::Object</basecompoundref>
    <includes refid="d5/de0/a00050" local="no">OGL.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d1/dc6/a00037_1a6b9b99b3cb2834dea1a75aecbd640772" prot="private" static="no" mutable="no">
        <type><ref refid="d9/da4/a00078_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
        <definition>Enum mc::gfx::ogl::Shader::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1044" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="1044" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d1/dc6/a00037_a0bb5ed1ed763ca182e0cac44b15f7ab9_1a0bb5ed1ed763ca182e0cac44b15f7ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mc::gfx::ogl::Shader::Shader</definition>
        <argsstring>() noexcept</argsstring>
        <name>Shader</name>
        <briefdescription>
<para>Default constructor which sets <computeroutput>type</computeroutput> to <computeroutput>GL_FALSE</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If a function that requires <computeroutput>type</computeroutput> to be set is called, an error is thrown. </para><para>If this constructor is used, the <ref refid="d1/dc6/a00037_a4b63b19ee3f208ab4759e26fca38243a_1a4b63b19ee3f208ab4759e26fca38243a" kindref="member">Shader::setType(const Enum&amp;)</ref> function should be used later to set a type. <simplesect kind="see"><para><ref refid="d1/dc6/a00037_af2a2256e71ab671b6718af768e9f1d56_1af2a2256e71ab671b6718af768e9f1d56" kindref="member">Shader::Shader(const Enum&amp;)</ref> noexcept </para></simplesect>
<simplesect kind="see"><para><ref refid="d1/dc6/a00037" kindref="compound">Shader</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1007" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_af2a2256e71ab671b6718af768e9f1d56_1af2a2256e71ab671b6718af768e9f1d56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mc::gfx::ogl::Shader::Shader</definition>
        <argsstring>(const Enum &amp;type) noexcept</argsstring>
        <name>Shader</name>
        <param>
          <type>const <ref refid="d9/da4/a00078_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Constructor which sets the type of the <computeroutput><ref refid="d1/dc6/a00037" kindref="compound">Shader</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Should be used instead of <computeroutput><ref refid="d1/dc6/a00037_a0bb5ed1ed763ca182e0cac44b15f7ab9_1a0bb5ed1ed763ca182e0cac44b15f7ab9" kindref="member">Shader::Shader()</ref> noexcept</computeroutput> </para><para>The <computeroutput>type</computeroutput> must be a valid OpenGL constant representing a type of shader. If it is incorrect, an <computeroutput>OpenGLError</computeroutput> is thrown. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of <computeroutput><ref refid="d1/dc6/a00037" kindref="compound">Shader</ref></computeroutput>. Must be <computeroutput>GL_VERTEX_SHADER</computeroutput>, <computeroutput>GL_FRAGMENT_SHADER</computeroutput>, <computeroutput>GL_GEOMETRY_SHADER</computeroutput>, or the following if available: <computeroutput>GL_TESS_CONTROL_SHADER</computeroutput>, <computeroutput>GL_TESS_EVALUATION_SHADER</computeroutput>, and <computeroutput>GL_COMPUTE_SHADER</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d1/dc6/a00037_a4b63b19ee3f208ab4759e26fca38243a_1a4b63b19ee3f208ab4759e26fca38243a" kindref="member">Shader::setType(const Enum&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d1/dc6/a00037" kindref="compound">Shader</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1017" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_a22dbd7cb706cee95ef2cbc7dde4c35a9_1a22dbd7cb706cee95ef2cbc7dde4c35a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::init</definition>
        <argsstring>() override</argsstring>
        <name>init</name>
        <reimplements refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c">init</reimplements>
        <briefdescription>
<para>Calls the corresponding glCreate* function and assigns an ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">Object::destroy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67" kindref="member">Object::isCreated() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1019" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_a4d54fa6b35994a86abd910fafb6905e6_1a4d54fa6b35994a86abd910fafb6905e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::destroy</definition>
        <argsstring>() override</argsstring>
        <name>destroy</name>
        <reimplements refid="d0/d33/a00027_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d">destroy</reimplements>
        <briefdescription>
<para>Calls the corresponding glDestroy* function and deletes the ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67" kindref="member">Object::isCreated() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet (<ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> has not been called) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1020" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_a0d0c2e8aaf49b43df6974a48b435d6da_1a0d0c2e8aaf49b43df6974a48b435d6da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::setSource</definition>
        <argsstring>(const Size &amp;count, const char *strings[], const int lengths[])</argsstring>
        <name>setSource</name>
        <param>
          <type>const <ref refid="d9/da4/a00078_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref> &amp;</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strings</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const int</type>
          <declname>lengths</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glShaderSource">https://www.opengl.org/wiki/GLAPI/glShaderSource</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1026" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_a76e8985b5a7d7317b98a2486a3ca9e5b_1a76e8985b5a7d7317b98a2486a3ca9e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::setSource</definition>
        <argsstring>(const char string[], const int &amp;length)</argsstring>
        <name>setSource</name>
        <param>
          <type>const char</type>
          <declname>string</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1027" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_aa4ff58a573e9fa5327dce6d3b6b2ede6_1aa4ff58a573e9fa5327dce6d3b6b2ede6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::setSource</definition>
        <argsstring>(const std::string &amp;string)</argsstring>
        <name>setSource</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1028" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_ae2f6c8fa46734d253e586baf7f9b0b08_1ae2f6c8fa46734d253e586baf7f9b0b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::compile</definition>
        <argsstring>()</argsstring>
        <name>compile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glCompileShader">https://www.opengl.org/wiki/GLAPI/glCompileShader</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1033" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_ad78731430de11d793bd567a6c7ba86e7_1ad78731430de11d793bd567a6c7ba86e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Shader::isCreated</definition>
        <argsstring>() const  override</argsstring>
        <name>isCreated</name>
        <reimplements refid="d0/d33/a00027_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67">isCreated</reimplements>
        <briefdescription>
<para>Queries OpenGL whether this <ref refid="d0/d33/a00027" kindref="compound">Object</ref>&apos;s ID is a valid object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents memory </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1035" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_a4b63b19ee3f208ab4759e26fca38243a_1a4b63b19ee3f208ab4759e26fca38243a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::setType</definition>
        <argsstring>(const Enum &amp;newType)</argsstring>
        <name>setType</name>
        <param>
          <type>const <ref refid="d9/da4/a00078_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>newType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1037" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_a5bff900b6be7f3086065c7974f3c4f58_1a5bff900b6be7f3086065c7974f3c4f58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/da4/a00078_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
        <definition>Enum&amp; mc::gfx::ogl::Shader::getType</definition>
        <argsstring>()</argsstring>
        <name>getType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1038" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_a41104be5ff264679c5bc0e30e83a8a4f_1a41104be5ff264679c5bc0e30e83a8a4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d9/da4/a00078_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
        <definition>const Enum&amp; mc::gfx::ogl::Shader::getType</definition>
        <argsstring>() const </argsstring>
        <name>getType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1039" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_a5193fc0ab5342e0bc1823a06ed471fa3_1a5193fc0ab5342e0bc1823a06ed471fa3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Shader::operator==</definition>
        <argsstring>(const Shader &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">Shader</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1041" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_a38ef61f81db11e4951a0e2bfdcbb6b1b_1a38ef61f81db11e4951a0e2bfdcbb6b1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Shader::operator!=</definition>
        <argsstring>(const Shader &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d1/dc6/a00037" kindref="compound">Shader</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1042" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::ogl::Object::getID</definition>
        <argsstring>() const </argsstring>
        <name>getID</name>
        <briefdescription>
<para>Retrieves the current ID that this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents. </para>        </briefdescription>
        <detaileddescription>
<para>The ID is an unsigned number that acts like a pointer to OpenGL memory. It is assigned when <ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> is called. </para><para>If it is 0, the <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> is considered uncreated. </para><para>When using <ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>it will bind to this ID. <ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>will bind to ID 0, which is the equivelant of a null pointer. <simplesect kind="return"><para>The ID represented by this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Object::operator==</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Object::operator!=</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="162" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d1/dc6/a00037_1a0899273f842e1b692da3a08e162ee7f3" prot="private" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::bind</definition>
        <argsstring>() const  final</argsstring>
        <name>bind</name>
        <reimplements refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1">bind</reimplements>
        <briefdescription>
<para>Binds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> to be used in an OpenGL function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1047" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_1a91dc153976fbd78b0047c436c12967d6" prot="private" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::unbind</definition>
        <argsstring>() const  final</argsstring>
        <name>unbind</name>
        <reimplements refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63">unbind</reimplements>
        <briefdescription>
<para>Unbinds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> which is equivalent to binding ID 0. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1048" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dc6/a00037_1a7300aa8a77cecf30c62910c0f6a29583" prot="private" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::bindIndex</definition>
        <argsstring>(const Index &amp;id) const  final</argsstring>
        <name>bindIndex</name>
        <reimplements refid="d0/d33/a00027_a969d8bf457ee31a5cbca56c64f054e15_1a969d8bf457ee31a5cbca56c64f054e15">bindIndex</reimplements>
        <param>
          <type>const <ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Intended to be overloaded to bind to a certain index. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>and <ref refid="d0/d33/a00027_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>both use this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to bind to. If it is 0, it needs to be unbinded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1050" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d0/d33/a00027_aa6f2acefb1ac01ff347ff593738eab46_1aa6f2acefb1ac01ff347ff593738eab46" prot="protected" static="no" mutable="no">
        <type><ref refid="d9/da4/a00078_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::ogl::Object::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The ID of this `Object. </para>        </briefdescription>
        <detaileddescription>
<para>` Should be set in <ref refid="d0/d33/a00027_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> and become 0 in <ref refid="d0/d33/a00027_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">Object::destroy()</ref> </para><para><ref refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const </ref>returns this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="169" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a shader object in OpenGL. </para>    </briefdescription>
    <detaileddescription>
<para>A shader is a special program that gets executed during different parts of rendering. </para><para>The <computeroutput><ref refid="d1/dc6/a00037" kindref="compound">Shader</ref></computeroutput> class must be used with the <computeroutput><ref refid="d8/d41/a00038" kindref="compound">ShaderProgram</ref></computeroutput> class. </para><para>In order to work correctly, <ref refid="d1/dc6/a00037_a4b63b19ee3f208ab4759e26fca38243a_1a4b63b19ee3f208ab4759e26fca38243a" kindref="member">Shader::setType(const Enum&amp;)</ref> or <ref refid="d1/dc6/a00037_af2a2256e71ab671b6718af768e9f1d56_1af2a2256e71ab671b6718af768e9f1d56" kindref="member">Shader::Shader(const Enum&amp;)</ref> noexcept must be called and a type must be set. </para><para>Unlike other <computeroutput>Objects</computeroutput>, the default constructor of <computeroutput><ref refid="d1/dc6/a00037" kindref="compound">Shader</ref></computeroutput> should not be used. It is only implemented for compatibility reasons. The <computeroutput>type</computeroutput> of the shader must be set before most functions are called. If <computeroutput>type</computeroutput> is equal to <computeroutput>GL_FALSE</computeroutput> an error is thrown. </para><para>Even though it extends <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> it does not implement the <ref refid="d0/d33/a00027_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>or <computeroutput>unbind()</computeroutput> functions. Instead, add the shader to a <computeroutput><ref refid="d8/d41/a00038" kindref="compound">ShaderProgram</ref></computeroutput> and it will link from there. <simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/Shader">https://www.opengl.org/wiki/Shader</ulink> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLSL_Object#Program_objects">https://www.opengl.org/wiki/GLSL_Object#Program_objects</ulink> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="502">
        <label>mc::gfx::ogl::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
      <node id="501">
        <label>mc::gfx::ogl::Shader</label>
        <link refid="d1/dc6/a00037"/>
        <childnode refid="502" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="504">
        <label>mc::gfx::ogl::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
      <node id="503">
        <label>mc::gfx::ogl::Shader</label>
        <link refid="d1/dc6/a00037"/>
        <childnode refid="504" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/OGL.h" line="997" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="997" bodyend="1051"/>
    <listofallmembers>
      <member refid="d1/dc6/a00037_1a0899273f842e1b692da3a08e162ee7f3" prot="private" virt="virtual"><scope>mc::gfx::ogl::Shader</scope><name>bind</name></member>
      <member refid="d1/dc6/a00037_1a7300aa8a77cecf30c62910c0f6a29583" prot="private" virt="virtual"><scope>mc::gfx::ogl::Shader</scope><name>bindIndex</name></member>
      <member refid="d1/dc6/a00037_ae2f6c8fa46734d253e586baf7f9b0b08_1ae2f6c8fa46734d253e586baf7f9b0b08" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>compile</name></member>
      <member refid="d1/dc6/a00037_a4d54fa6b35994a86abd910fafb6905e6_1a4d54fa6b35994a86abd910fafb6905e6" prot="public" virt="virtual"><scope>mc::gfx::ogl::Shader</scope><name>destroy</name></member>
      <member refid="d0/d33/a00027_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>getID</name></member>
      <member refid="d1/dc6/a00037_a5bff900b6be7f3086065c7974f3c4f58_1a5bff900b6be7f3086065c7974f3c4f58" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>getType</name></member>
      <member refid="d1/dc6/a00037_a41104be5ff264679c5bc0e30e83a8a4f_1a41104be5ff264679c5bc0e30e83a8a4f" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>getType</name></member>
      <member refid="d0/d33/a00027_aa6f2acefb1ac01ff347ff593738eab46_1aa6f2acefb1ac01ff347ff593738eab46" prot="protected" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>id</name></member>
      <member refid="d1/dc6/a00037_a22dbd7cb706cee95ef2cbc7dde4c35a9_1a22dbd7cb706cee95ef2cbc7dde4c35a9" prot="public" virt="virtual"><scope>mc::gfx::ogl::Shader</scope><name>init</name></member>
      <member refid="d1/dc6/a00037_ad78731430de11d793bd567a6c7ba86e7_1ad78731430de11d793bd567a6c7ba86e7" prot="public" virt="virtual"><scope>mc::gfx::ogl::Shader</scope><name>isCreated</name></member>
      <member refid="d1/dc6/a00037_a38ef61f81db11e4951a0e2bfdcbb6b1b_1a38ef61f81db11e4951a0e2bfdcbb6b1b" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>operator!=</name></member>
      <member refid="d0/d33/a00027_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::ogl::Object::"><scope>mc::gfx::ogl::Shader</scope><name>operator!=</name></member>
      <member refid="d1/dc6/a00037_a5193fc0ab5342e0bc1823a06ed471fa3_1a5193fc0ab5342e0bc1823a06ed471fa3" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>operator==</name></member>
      <member refid="d0/d33/a00027_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::ogl::Object::"><scope>mc::gfx::ogl::Shader</scope><name>operator==</name></member>
      <member refid="d1/dc6/a00037_a0d0c2e8aaf49b43df6974a48b435d6da_1a0d0c2e8aaf49b43df6974a48b435d6da" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>setSource</name></member>
      <member refid="d1/dc6/a00037_a76e8985b5a7d7317b98a2486a3ca9e5b_1a76e8985b5a7d7317b98a2486a3ca9e5b" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>setSource</name></member>
      <member refid="d1/dc6/a00037_aa4ff58a573e9fa5327dce6d3b6b2ede6_1aa4ff58a573e9fa5327dce6d3b6b2ede6" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>setSource</name></member>
      <member refid="d1/dc6/a00037_a4b63b19ee3f208ab4759e26fca38243a_1a4b63b19ee3f208ab4759e26fca38243a" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>setType</name></member>
      <member refid="d1/dc6/a00037_a0bb5ed1ed763ca182e0cac44b15f7ab9_1a0bb5ed1ed763ca182e0cac44b15f7ab9" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>Shader</name></member>
      <member refid="d1/dc6/a00037_af2a2256e71ab671b6718af768e9f1d56_1af2a2256e71ab671b6718af768e9f1d56" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>Shader</name></member>
      <member refid="d1/dc6/a00037_1a6b9b99b3cb2834dea1a75aecbd640772" prot="private" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>type</name></member>
      <member refid="d1/dc6/a00037_1a91dc153976fbd78b0047c436c12967d6" prot="private" virt="virtual"><scope>mc::gfx::ogl::Shader</scope><name>unbind</name></member>
      <member refid="d0/d33/a00027_a4bf5ddbce67658a6dd14bedfa00bcac5_1a4bf5ddbce67658a6dd14bedfa00bcac5" prot="public" virt="virtual"><scope>mc::gfx::ogl::Shader</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
