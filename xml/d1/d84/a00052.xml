<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d1/d84/a00052" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::ogl::Shader</compoundname>
    <basecompoundref refid="d4/d8c/a00035" prot="public" virt="non-virtual">mc::gfx::ogl::Object</basecompoundref>
    <includes refid="d1/d1e/a00087" local="no">OGL.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d1/d84/a00052_1a6b9b99b3cb2834dea1a75aecbd640772" prot="private" static="no" mutable="no">
        <type><ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
        <definition>Enum mc::gfx::ogl::Shader::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1078" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="1078" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d1/d84/a00052_a0bb5ed1ed763ca182e0cac44b15f7ab9_1a0bb5ed1ed763ca182e0cac44b15f7ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mc::gfx::ogl::Shader::Shader</definition>
        <argsstring>() noexcept</argsstring>
        <name>Shader</name>
        <briefdescription>
<para>Default constructor which sets <computeroutput>type</computeroutput> to <computeroutput>GL_FALSE</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If a function that requires <computeroutput>type</computeroutput> to be set is called, an error is thrown. </para><para>If this constructor is used, the <ref refid="d1/d84/a00052_a97c6e01818e5ee6034657bb92f921567_1a97c6e01818e5ee6034657bb92f921567" kindref="member">Shader::setType(const Enum)</ref> function should be used later to set a type. <simplesect kind="see"><para><ref refid="d1/d84/a00052_a40cd10f8349c679821382a6c582d7707_1a40cd10f8349c679821382a6c582d7707" kindref="member">Shader::Shader(const Enum)</ref> noexcept </para></simplesect>
<simplesect kind="see"><para><ref refid="d1/d84/a00052" kindref="compound">Shader</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1015" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_a40cd10f8349c679821382a6c582d7707_1a40cd10f8349c679821382a6c582d7707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mc::gfx::ogl::Shader::Shader</definition>
        <argsstring>(const Enum type) noexcept</argsstring>
        <name>Shader</name>
        <param>
          <type>const <ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Constructor which sets the type of the <computeroutput><ref refid="d1/d84/a00052" kindref="compound">Shader</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Should be used instead of <computeroutput><ref refid="d1/d84/a00052_a0bb5ed1ed763ca182e0cac44b15f7ab9_1a0bb5ed1ed763ca182e0cac44b15f7ab9" kindref="member">Shader::Shader()</ref> noexcept</computeroutput> </para><para>The <computeroutput>type</computeroutput> must be a valid OpenGL constant representing a type of shader. If it is incorrect, an <computeroutput>OpenGLError</computeroutput> is thrown. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of <computeroutput><ref refid="d1/d84/a00052" kindref="compound">Shader</ref></computeroutput>. Must be <computeroutput>GL_VERTEX_SHADER</computeroutput>, <computeroutput>GL_FRAGMENT_SHADER</computeroutput>, <computeroutput>GL_GEOMETRY_SHADER</computeroutput>, or the following if available: <computeroutput>GL_TESS_CONTROL_SHADER</computeroutput>, <computeroutput>GL_TESS_EVALUATION_SHADER</computeroutput>, and <computeroutput>GL_COMPUTE_SHADER</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d1/d84/a00052_a97c6e01818e5ee6034657bb92f921567_1a97c6e01818e5ee6034657bb92f921567" kindref="member">Shader::setType(const Enum)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d1/d84/a00052" kindref="compound">Shader</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1025" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_a22dbd7cb706cee95ef2cbc7dde4c35a9_1a22dbd7cb706cee95ef2cbc7dde4c35a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::init</definition>
        <argsstring>() override</argsstring>
        <name>init</name>
        <reimplements refid="d4/d8c/a00035_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c">init</reimplements>
        <briefdescription>
<para>Calls the corresponding glCreate* function and assigns an ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">Object::destroy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67" kindref="member">Object::isCreated() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1027" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_a4d54fa6b35994a86abd910fafb6905e6_1a4d54fa6b35994a86abd910fafb6905e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::destroy</definition>
        <argsstring>() override</argsstring>
        <name>destroy</name>
        <reimplements refid="d4/d8c/a00035_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d">destroy</reimplements>
        <briefdescription>
<para>Calls the corresponding glDestroy* function and deletes the ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67" kindref="member">Object::isCreated() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> has not been created yet (<ref refid="d4/d8c/a00035_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> has not been called) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1028" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_ad33c091c53c8c0763e1823e1d1944155_1ad33c091c53c8c0763e1823e1d1944155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::setSource</definition>
        <argsstring>(const Size count, const char *strings[], const int lengths[])</argsstring>
        <name>setSource</name>
        <param>
          <type>const <ref refid="da/d72/a00124_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>strings</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const int</type>
          <declname>lengths</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glShaderSource">https://www.opengl.org/wiki/GLAPI/glShaderSource</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1034" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_a220c80924b237943e06bb85c552e5e09_1a220c80924b237943e06bb85c552e5e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::setSource</definition>
        <argsstring>(const char string[], const int length)</argsstring>
        <name>setSource</name>
        <param>
          <type>const char</type>
          <declname>string</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1035" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_aa4ff58a573e9fa5327dce6d3b6b2ede6_1aa4ff58a573e9fa5327dce6d3b6b2ede6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::setSource</definition>
        <argsstring>(const std::string &amp;string)</argsstring>
        <name>setSource</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1036" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_a4731211c42d26a700beb96042271ff6a_1a4731211c42d26a700beb96042271ff6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mc::gfx::ogl::Shader::getSource</definition>
        <argsstring>(const Size length, char *characters, int amount=0) const </argsstring>
        <name>getSource</name>
        <param>
          <type>const <ref refid="da/d72/a00124_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>characters</declname>
        </param>
        <param>
          <type>int</type>
          <declname>amount</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1041" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_a9f89a6c0147e35e30e0feda8e11327a7_1a9f89a6c0147e35e30e0feda8e11327a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::gfx::ogl::Shader::getParameter</definition>
        <argsstring>(const Enum param) const </argsstring>
        <name>getParameter</name>
        <param>
          <type>const <ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1046" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_aa286f874038be08430d0fe9a41845492_1aa286f874038be08430d0fe9a41845492" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::gfx::ogl::Shader::getInfoLogLength</definition>
        <argsstring>() const </argsstring>
        <name>getInfoLogLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1050" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_abcdb2aa8d8edb8003d5b29e49569fe1d_1abcdb2aa8d8edb8003d5b29e49569fe1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::gfx::ogl::Shader::getSourceLength</definition>
        <argsstring>() const </argsstring>
        <name>getSourceLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1054" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_a2139a5d653020924c011dd015afa4fb9_1a2139a5d653020924c011dd015afa4fb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Shader::isDeleted</definition>
        <argsstring>() const </argsstring>
        <name>isDeleted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1058" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_a4c182b27e3519952c398ac20b796eed8_1a4c182b27e3519952c398ac20b796eed8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Shader::isCompiled</definition>
        <argsstring>() const </argsstring>
        <name>isCompiled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1062" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_ae2f6c8fa46734d253e586baf7f9b0b08_1ae2f6c8fa46734d253e586baf7f9b0b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::compile</definition>
        <argsstring>()</argsstring>
        <name>compile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glCompileShader">https://www.opengl.org/wiki/GLAPI/glCompileShader</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1067" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_ad78731430de11d793bd567a6c7ba86e7_1ad78731430de11d793bd567a6c7ba86e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Shader::isCreated</definition>
        <argsstring>() const  override</argsstring>
        <name>isCreated</name>
        <reimplements refid="d4/d8c/a00035_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67">isCreated</reimplements>
        <briefdescription>
<para>Queries OpenGL whether this <ref refid="d4/d8c/a00035" kindref="compound">Object</ref>&apos;s ID is a valid object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether this <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> represents memory </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1069" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_a97c6e01818e5ee6034657bb92f921567_1a97c6e01818e5ee6034657bb92f921567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::setType</definition>
        <argsstring>(const Enum newType)</argsstring>
        <name>setType</name>
        <param>
          <type>const <ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
          <declname>newType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1071" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_a550f3a8601684e78eeae3cf99ddc80ac_1a550f3a8601684e78eeae3cf99ddc80ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
        <definition>Enum mc::gfx::ogl::Shader::getType</definition>
        <argsstring>()</argsstring>
        <name>getType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1072" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_a4e3b4f0475444f2861240a4bf6bb7d81_1a4e3b4f0475444f2861240a4bf6bb7d81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="da/d72/a00124_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
        <definition>const Enum mc::gfx::ogl::Shader::getType</definition>
        <argsstring>() const </argsstring>
        <name>getType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1073" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_a5193fc0ab5342e0bc1823a06ed471fa3_1a5193fc0ab5342e0bc1823a06ed471fa3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Shader::operator==</definition>
        <argsstring>(const Shader &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d1/d84/a00052" kindref="compound">Shader</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1075" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_a38ef61f81db11e4951a0e2bfdcbb6b1b_1a38ef61f81db11e4951a0e2bfdcbb6b1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Shader::operator!=</definition>
        <argsstring>(const Shader &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d1/d84/a00052" kindref="compound">Shader</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1076" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d8c/a00035_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d72/a00124_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::ogl::Object::getID</definition>
        <argsstring>() const </argsstring>
        <name>getID</name>
        <briefdescription>
<para>Retrieves the current ID that this <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> represents. </para>        </briefdescription>
        <detaileddescription>
<para>The ID is an unsigned number that acts like a pointer to OpenGL memory. It is assigned when <ref refid="d4/d8c/a00035_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> is called. </para><para>If it is 0, the <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> is considered uncreated. </para><para>When using <ref refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>it will bind to this ID. <ref refid="d4/d8c/a00035_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>will bind to ID 0, which is the equivelant of a null pointer. <simplesect kind="return"><para>The ID represented by this <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d8c/a00035_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Object::operator==</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d4/d8c/a00035" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d4/d8c/a00035_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d8c/a00035_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Object::operator!=</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d4/d8c/a00035" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="d4/d8c/a00035_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="190" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d1/d84/a00052_1a0899273f842e1b692da3a08e162ee7f3" prot="private" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::bind</definition>
        <argsstring>() const  final</argsstring>
        <name>bind</name>
        <reimplements refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1">bind</reimplements>
        <briefdescription>
<para>Binds this <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> to be used in an OpenGL function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> has not been created yet </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1081" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_1a91dc153976fbd78b0047c436c12967d6" prot="private" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::unbind</definition>
        <argsstring>() const  final</argsstring>
        <name>unbind</name>
        <reimplements refid="d4/d8c/a00035_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63">unbind</reimplements>
        <briefdescription>
<para>Unbinds this <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> which is equivalent to binding ID 0. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1082" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/d84/a00052_1a872378f88579ee80e2267f37dab30f99" prot="private" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::Shader::bindIndex</definition>
        <argsstring>(const Index id) const  final</argsstring>
        <name>bindIndex</name>
        <reimplements refid="d4/d8c/a00035_a5f9f3150ac508ecf142eff4f1bc9f424_1a5f9f3150ac508ecf142eff4f1bc9f424">bindIndex</reimplements>
        <param>
          <type>const <ref refid="da/d72/a00124_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Intended to be overloaded to bind to a certain index. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>and <ref refid="d4/d8c/a00035_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>both use this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to bind to. If it is 0, it needs to be unbinded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="1084" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d4/d8c/a00035_aa6f2acefb1ac01ff347ff593738eab46_1aa6f2acefb1ac01ff347ff593738eab46" prot="protected" static="no" mutable="no">
        <type><ref refid="da/d72/a00124_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::ogl::Object::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The ID of this `Object. </para>        </briefdescription>
        <detaileddescription>
<para>` Should be set in <ref refid="d4/d8c/a00035_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> and become 0 in <ref refid="d4/d8c/a00035_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">Object::destroy()</ref> </para><para><ref refid="d4/d8c/a00035_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const </ref>returns this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="197" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a shader object in OpenGL. </para>    </briefdescription>
    <detaileddescription>
<para>A shader is a special program that gets executed during different parts of rendering. </para><para>The <computeroutput><ref refid="d1/d84/a00052" kindref="compound">Shader</ref></computeroutput> class must be used with the <computeroutput><ref refid="dc/dee/a00053" kindref="compound">ShaderProgram</ref></computeroutput> class. </para><para>In order to work correctly, <ref refid="d1/d84/a00052_a97c6e01818e5ee6034657bb92f921567_1a97c6e01818e5ee6034657bb92f921567" kindref="member">Shader::setType(const Enum)</ref> or <ref refid="d1/d84/a00052_a40cd10f8349c679821382a6c582d7707_1a40cd10f8349c679821382a6c582d7707" kindref="member">Shader::Shader(const Enum)</ref> noexcept must be called and a type must be set. </para><para>Unlike other <computeroutput>Objects</computeroutput>, the default constructor of <computeroutput><ref refid="d1/d84/a00052" kindref="compound">Shader</ref></computeroutput> should not be used. It is only implemented for compatibility reasons. The <computeroutput>type</computeroutput> of the shader must be set before most functions are called. If <computeroutput>type</computeroutput> is equal to <computeroutput>GL_FALSE</computeroutput> an error is thrown. </para><para>Even though it extends <computeroutput><ref refid="d4/d8c/a00035" kindref="compound">Object</ref></computeroutput> it does not implement the <ref refid="d4/d8c/a00035_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>or <computeroutput>unbind()</computeroutput> functions. Instead, add the shader to a <computeroutput><ref refid="dc/dee/a00053" kindref="compound">ShaderProgram</ref></computeroutput> and it will link from there. <simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/Shader">https://www.opengl.org/wiki/Shader</ulink> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLSL_Object#Program_objects">https://www.opengl.org/wiki/GLSL_Object#Program_objects</ulink> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="898">
        <label>mc::gfx::ogl::Object</label>
        <link refid="d4/d8c/a00035"/>
      </node>
      <node id="897">
        <label>mc::gfx::ogl::Shader</label>
        <link refid="d1/d84/a00052"/>
        <childnode refid="898" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="900">
        <label>mc::gfx::ogl::Object</label>
        <link refid="d4/d8c/a00035"/>
      </node>
      <node id="899">
        <label>mc::gfx::ogl::Shader</label>
        <link refid="d1/d84/a00052"/>
        <childnode refid="900" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/OGL.h" line="1005" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="1005" bodyend="1085"/>
    <listofallmembers>
      <member refid="d1/d84/a00052_1a0899273f842e1b692da3a08e162ee7f3" prot="private" virt="virtual"><scope>mc::gfx::ogl::Shader</scope><name>bind</name></member>
      <member refid="d1/d84/a00052_1a872378f88579ee80e2267f37dab30f99" prot="private" virt="virtual"><scope>mc::gfx::ogl::Shader</scope><name>bindIndex</name></member>
      <member refid="d1/d84/a00052_ae2f6c8fa46734d253e586baf7f9b0b08_1ae2f6c8fa46734d253e586baf7f9b0b08" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>compile</name></member>
      <member refid="d1/d84/a00052_a4d54fa6b35994a86abd910fafb6905e6_1a4d54fa6b35994a86abd910fafb6905e6" prot="public" virt="virtual"><scope>mc::gfx::ogl::Shader</scope><name>destroy</name></member>
      <member refid="d4/d8c/a00035_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>getID</name></member>
      <member refid="d1/d84/a00052_aa286f874038be08430d0fe9a41845492_1aa286f874038be08430d0fe9a41845492" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>getInfoLogLength</name></member>
      <member refid="d1/d84/a00052_a9f89a6c0147e35e30e0feda8e11327a7_1a9f89a6c0147e35e30e0feda8e11327a7" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>getParameter</name></member>
      <member refid="d1/d84/a00052_a4731211c42d26a700beb96042271ff6a_1a4731211c42d26a700beb96042271ff6a" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>getSource</name></member>
      <member refid="d1/d84/a00052_abcdb2aa8d8edb8003d5b29e49569fe1d_1abcdb2aa8d8edb8003d5b29e49569fe1d" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>getSourceLength</name></member>
      <member refid="d1/d84/a00052_a550f3a8601684e78eeae3cf99ddc80ac_1a550f3a8601684e78eeae3cf99ddc80ac" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>getType</name></member>
      <member refid="d1/d84/a00052_a4e3b4f0475444f2861240a4bf6bb7d81_1a4e3b4f0475444f2861240a4bf6bb7d81" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>getType</name></member>
      <member refid="d4/d8c/a00035_aa6f2acefb1ac01ff347ff593738eab46_1aa6f2acefb1ac01ff347ff593738eab46" prot="protected" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>id</name></member>
      <member refid="d1/d84/a00052_a22dbd7cb706cee95ef2cbc7dde4c35a9_1a22dbd7cb706cee95ef2cbc7dde4c35a9" prot="public" virt="virtual"><scope>mc::gfx::ogl::Shader</scope><name>init</name></member>
      <member refid="d1/d84/a00052_a4c182b27e3519952c398ac20b796eed8_1a4c182b27e3519952c398ac20b796eed8" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>isCompiled</name></member>
      <member refid="d1/d84/a00052_ad78731430de11d793bd567a6c7ba86e7_1ad78731430de11d793bd567a6c7ba86e7" prot="public" virt="virtual"><scope>mc::gfx::ogl::Shader</scope><name>isCreated</name></member>
      <member refid="d1/d84/a00052_a2139a5d653020924c011dd015afa4fb9_1a2139a5d653020924c011dd015afa4fb9" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>isDeleted</name></member>
      <member refid="d1/d84/a00052_a38ef61f81db11e4951a0e2bfdcbb6b1b_1a38ef61f81db11e4951a0e2bfdcbb6b1b" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>operator!=</name></member>
      <member refid="d4/d8c/a00035_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::ogl::Object::"><scope>mc::gfx::ogl::Shader</scope><name>operator!=</name></member>
      <member refid="d1/d84/a00052_a5193fc0ab5342e0bc1823a06ed471fa3_1a5193fc0ab5342e0bc1823a06ed471fa3" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>operator==</name></member>
      <member refid="d4/d8c/a00035_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::ogl::Object::"><scope>mc::gfx::ogl::Shader</scope><name>operator==</name></member>
      <member refid="d1/d84/a00052_ad33c091c53c8c0763e1823e1d1944155_1ad33c091c53c8c0763e1823e1d1944155" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>setSource</name></member>
      <member refid="d1/d84/a00052_a220c80924b237943e06bb85c552e5e09_1a220c80924b237943e06bb85c552e5e09" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>setSource</name></member>
      <member refid="d1/d84/a00052_aa4ff58a573e9fa5327dce6d3b6b2ede6_1aa4ff58a573e9fa5327dce6d3b6b2ede6" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>setSource</name></member>
      <member refid="d1/d84/a00052_a97c6e01818e5ee6034657bb92f921567_1a97c6e01818e5ee6034657bb92f921567" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>setType</name></member>
      <member refid="d1/d84/a00052_a0bb5ed1ed763ca182e0cac44b15f7ab9_1a0bb5ed1ed763ca182e0cac44b15f7ab9" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>Shader</name></member>
      <member refid="d1/d84/a00052_a40cd10f8349c679821382a6c582d7707_1a40cd10f8349c679821382a6c582d7707" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>Shader</name></member>
      <member refid="d1/d84/a00052_1a6b9b99b3cb2834dea1a75aecbd640772" prot="private" virt="non-virtual"><scope>mc::gfx::ogl::Shader</scope><name>type</name></member>
      <member refid="d1/d84/a00052_1a91dc153976fbd78b0047c436c12967d6" prot="private" virt="virtual"><scope>mc::gfx::ogl::Shader</scope><name>unbind</name></member>
      <member refid="d4/d8c/a00035_a4bf5ddbce67658a6dd14bedfa00bcac5_1a4bf5ddbce67658a6dd14bedfa00bcac5" prot="public" virt="virtual"><scope>mc::gfx::ogl::Shader</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
