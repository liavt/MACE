<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d1/dea/a00054" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::ogl::VertexArray</compoundname>
    <basecompoundref refid="dc/d87/a00032" prot="public" virt="non-virtual">mc::gfx::ogl::Object</basecompoundref>
    <includes refid="de/de1/a00065" local="no">OGL.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d1/dea/a00054_1a24ebdbf6aac09e9a5ec4611a2638942f" prot="private" static="no" mutable="no">
        <type><ref refid="dd/d1b/a00015" kindref="compound">ElementBuffer</ref></type>
        <definition>ElementBuffer mc::gfx::ogl::VertexArray::indices</definition>
        <argsstring></argsstring>
        <name>indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="927" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="927" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/dea/a00054_1a5519c5413dfc866a346b9003ceecb813" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="d4/d6d/a00055" kindref="compound">VertexBuffer</ref> &gt;</type>
        <definition>std::vector&lt;VertexBuffer&gt; mc::gfx::ogl::VertexArray::buffers</definition>
        <argsstring></argsstring>
        <name>buffers</name>
        <initializer>= std::vector&lt;<ref refid="d4/d6d/a00055" kindref="compound">VertexBuffer</ref>&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="928" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="928" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/dea/a00054_1a79617a44429a00205ac254a6812d53f4" prot="private" static="no" mutable="no">
        <type><ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        <definition>Size mc::gfx::ogl::VertexArray::vertexNumber</definition>
        <argsstring></argsstring>
        <name>vertexNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="930" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="930" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d1/dea/a00054_a2e5f1ca422d96bc7861e29116b1bfb81_1a2e5f1ca422d96bc7861e29116b1bfb81" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::VertexArray::init</definition>
        <argsstring>() override</argsstring>
        <name>init</name>
        <reimplements refid="dc/d87/a00032_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c">init</reimplements>
        <briefdescription>
<para>Calls the corresponding glCreate* function and assigns an ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">Object::destroy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67" kindref="member">Object::isCreated() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="871" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_a1ea8420821e8d076d3b39ac39456537b_1a1ea8420821e8d076d3b39ac39456537b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::VertexArray::destroy</definition>
        <argsstring>() override</argsstring>
        <name>destroy</name>
        <reimplements refid="dc/d87/a00032_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d">destroy</reimplements>
        <briefdescription>
<para>Calls the corresponding glDestroy* function and deletes the ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67" kindref="member">Object::isCreated() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Object</ref></computeroutput> has not been created yet (<ref refid="dc/d87/a00032_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> has not been called) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="872" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_ab19cf7b7a163b0585b2f8b8c6550251b_1ab19cf7b7a163b0585b2f8b8c6550251b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::VertexArray::isCreated</definition>
        <argsstring>() const  override</argsstring>
        <name>isCreated</name>
        <reimplements refid="dc/d87/a00032_ac965ad8371e8691103fe2418152f9d67_1ac965ad8371e8691103fe2418152f9d67">isCreated</reimplements>
        <briefdescription>
<para>Queries OpenGL whether this <ref refid="dc/d87/a00032" kindref="compound">Object</ref>&apos;s ID is a valid object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether this <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Object</ref></computeroutput> represents memory </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="874" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_a6b6c9e9784fb18e6ddbd6a160b153abe_1a6b6c9e9784fb18e6ddbd6a160b153abe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::VertexArray::draw</definition>
        <argsstring>(const Enum type=GL_TRIANGLES) const </argsstring>
        <name>draw</name>
        <param>
          <type>const <ref refid="d9/df8/a00096_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref></type>
          <declname>type</declname>
          <defval>GL_TRIANGLES</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glDrawElements">https://www.opengl.org/wiki/GLAPI/glDrawElements</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="880" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_a32a897023c4852401ddab8664a2c40c5_1a32a897023c4852401ddab8664a2c40c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::VertexArray::loadVertices</definition>
        <argsstring>(const Size verticeSize, const float vertices[], const Index location=15, const Byte attributeSize=3)</argsstring>
        <name>loadVertices</name>
        <param>
          <type>const <ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>verticeSize</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>vertices</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const <ref refid="d9/df8/a00096_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>location</declname>
          <defval>15</defval>
        </param>
        <param>
          <type>const <ref refid="d9/df8/a00096_a7c6e1fbcd00ba27af6389a4a891788ca_1a7c6e1fbcd00ba27af6389a4a891788ca" kindref="member">Byte</ref></type>
          <declname>attributeSize</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d4/d6d/a00055" kindref="compound">VertexBuffer</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="886" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_a3ae4c47857605a7fa3aa056cf62d3238_1a3ae4c47857605a7fa3aa056cf62d3238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::VertexArray::loadIndices</definition>
        <argsstring>(const Size indiceNum, const unsigned int *indiceData)</argsstring>
        <name>loadIndices</name>
        <param>
          <type>const <ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>indiceNum</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>indiceData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d4/d6d/a00055" kindref="compound">VertexBuffer</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="891" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_ad4eb51ec059a94870c5dd357a6703ca7_1ad4eb51ec059a94870c5dd357a6703ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::VertexArray::storeDataInAttributeList</definition>
        <argsstring>(const Size dataSize, const GLvoid *data, const Index location=0, const Byte attributeSize=3)</argsstring>
        <name>storeDataInAttributeList</name>
        <param>
          <type>const <ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>dataSize</declname>
        </param>
        <param>
          <type>const GLvoid *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="d9/df8/a00096_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>location</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="d9/df8/a00096_a7c6e1fbcd00ba27af6389a4a891788ca_1a7c6e1fbcd00ba27af6389a4a891788ca" kindref="member">Byte</ref></type>
          <declname>attributeSize</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d4/d6d/a00055" kindref="compound">VertexBuffer</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="897" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_a35ffa9ced897f667d5cae79bfabd7b38_1a35ffa9ced897f667d5cae79bfabd7b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::VertexArray::addBuffer</definition>
        <argsstring>(const VertexBuffer &amp;newBuffer)</argsstring>
        <name>addBuffer</name>
        <param>
          <type>const <ref refid="d4/d6d/a00055" kindref="compound">VertexBuffer</ref> &amp;</type>
          <declname>newBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="902" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_aa1641edcb35d6f1f9c6e9800ffafd996_1aa1641edcb35d6f1f9c6e9800ffafd996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::VertexArray::setVertexNumber</definition>
        <argsstring>(const Size vertexNum)</argsstring>
        <name>setVertexNumber</name>
        <param>
          <type>const <ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>vertexNum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="904" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_a8a2635652fb0b34b6693f74b7b8d95da_1a8a2635652fb0b34b6693f74b7b8d95da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        <definition>Size mc::gfx::ogl::VertexArray::getVertexNumber</definition>
        <argsstring>()</argsstring>
        <name>getVertexNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="905" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_aec2a55a0ef933adacde7f3cd4ad267a7_1aec2a55a0ef933adacde7f3cd4ad267a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        <definition>const Size mc::gfx::ogl::VertexArray::getVertexNumber</definition>
        <argsstring>() const </argsstring>
        <name>getVertexNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="906" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_a5a05c7e3a7bda6613567460be3e2bef7_1a5a05c7e3a7bda6613567460be3e2bef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::VertexArray::setIndices</definition>
        <argsstring>(const ElementBuffer &amp;buffer)</argsstring>
        <name>setIndices</name>
        <param>
          <type>const <ref refid="dd/d1b/a00015" kindref="compound">ElementBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="908" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_a71f13fe1a17d70c6e2488e75d9877d5a_1a71f13fe1a17d70c6e2488e75d9877d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d1b/a00015" kindref="compound">ElementBuffer</ref> &amp;</type>
        <definition>ElementBuffer&amp; mc::gfx::ogl::VertexArray::getIndices</definition>
        <argsstring>()</argsstring>
        <name>getIndices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="909" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_abd29e22869199e6dfbe38debdb2c9c15_1abd29e22869199e6dfbe38debdb2c9c15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="dd/d1b/a00015" kindref="compound">ElementBuffer</ref> &amp;</type>
        <definition>const ElementBuffer&amp; mc::gfx::ogl::VertexArray::getIndices</definition>
        <argsstring>() const </argsstring>
        <name>getIndices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="910" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_ab38f6e4f638d5793fa691837b7a5bc3d_1ab38f6e4f638d5793fa691837b7a5bc3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::VertexArray::setBuffers</definition>
        <argsstring>(const std::vector&lt; VertexBuffer &gt; &amp;newBuffers)</argsstring>
        <name>setBuffers</name>
        <param>
          <type>const std::vector&lt; <ref refid="d4/d6d/a00055" kindref="compound">VertexBuffer</ref> &gt; &amp;</type>
          <declname>newBuffers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="912" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_a8c79d8d0ffe0bdb39f89e4de7ca88143_1a8c79d8d0ffe0bdb39f89e4de7ca88143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="d4/d6d/a00055" kindref="compound">VertexBuffer</ref> &gt; &amp;</type>
        <definition>std::vector&lt;VertexBuffer&gt;&amp; mc::gfx::ogl::VertexArray::getBuffers</definition>
        <argsstring>()</argsstring>
        <name>getBuffers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="913" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_ad275131e38080d91531c121ff11cb620_1ad275131e38080d91531c121ff11cb620" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="d4/d6d/a00055" kindref="compound">VertexBuffer</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;VertexBuffer&gt;&amp; mc::gfx::ogl::VertexArray::getBuffers</definition>
        <argsstring>() const </argsstring>
        <name>getBuffers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="914" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_aa33272510457f54f9f706c03beaf8f5b_1aa33272510457f54f9f706c03beaf8f5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::VertexArray::operator==</definition>
        <argsstring>(const VertexArray &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d1/dea/a00054" kindref="compound">VertexArray</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="dc/d87/a00032_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="919" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dea/a00054_ac71bd3e70562dfe5429663f3702e79f4_1ac71bd3e70562dfe5429663f3702e79f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::VertexArray::operator!=</definition>
        <argsstring>(const VertexArray &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d1/dea/a00054" kindref="compound">VertexArray</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="dc/d87/a00032_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="923" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d87/a00032_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void mc::gfx::ogl::Object::bind</definition>
        <argsstring>() const </argsstring>
        <name>bind</name>
        <reimplementedby refid="d1/dc6/a00037_1aa2aa180de0c314967fef3dc1f506695f">bind</reimplementedby>
        <reimplementedby refid="d6/d97/a00045_1a0899273f842e1b692da3a08e162ee7f3">bind</reimplementedby>
        <briefdescription>
<para>Binds this <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Object</ref></computeroutput> to be used in an OpenGL function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Object</ref></computeroutput> has not been created yet </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d87/a00032_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void mc::gfx::ogl::Object::unbind</definition>
        <argsstring>() const </argsstring>
        <name>unbind</name>
        <reimplementedby refid="d1/dc6/a00037_1ad05128a71051c75e7c6a66bf135f4ce5">unbind</reimplementedby>
        <reimplementedby refid="d6/d97/a00045_1a91dc153976fbd78b0047c436c12967d6">unbind</reimplementedby>
        <briefdescription>
<para>Unbinds this <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Object</ref></computeroutput> which is equivalent to binding ID 0. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d87/a00032_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/df8/a00096_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::ogl::Object::getID</definition>
        <argsstring>() const </argsstring>
        <name>getID</name>
        <briefdescription>
<para>Retrieves the current ID that this <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Object</ref></computeroutput> represents. </para>        </briefdescription>
        <detaileddescription>
<para>The ID is an unsigned number that acts like a pointer to OpenGL memory. It is assigned when <ref refid="dc/d87/a00032_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> is called. </para><para>If it is 0, the <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Object</ref></computeroutput> is considered uncreated. </para><para>When using <ref refid="dc/d87/a00032_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>it will bind to this ID. <ref refid="dc/d87/a00032_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>will bind to ID 0, which is the equivelant of a null pointer. <simplesect kind="return"><para>The ID represented by this <computeroutput><ref refid="dc/d87/a00032" kindref="compound">Object</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d87/a00032_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Object::operator==</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="dc/d87/a00032" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="dc/d87/a00032_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d87/a00032_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::ogl::Object::operator!=</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="dc/d87/a00032" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="dc/d87/a00032_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/d87/a00032_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="175" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d1/dea/a00054_1a008295676e3f4f9beb38d39b43adc9d1" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::ogl::VertexArray::bindIndex</definition>
        <argsstring>(const Index id) const  override</argsstring>
        <name>bindIndex</name>
        <reimplements refid="dc/d87/a00032_a5f9f3150ac508ecf142eff4f1bc9f424_1a5f9f3150ac508ecf142eff4f1bc9f424">bindIndex</reimplements>
        <param>
          <type>const <ref refid="d9/df8/a00096_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Intended to be overloaded to bind to a certain index. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="dc/d87/a00032_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" kindref="member">Object::bind() const </ref>and <ref refid="dc/d87/a00032_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" kindref="member">Object::unbind() const </ref>both use this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to bind to. If it is 0, it needs to be unbinded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="925" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="dc/d87/a00032_aa6f2acefb1ac01ff347ff593738eab46_1aa6f2acefb1ac01ff347ff593738eab46" prot="protected" static="no" mutable="no">
        <type><ref refid="d9/df8/a00096_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::ogl::Object::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The ID of this `Object. </para>        </briefdescription>
        <detaileddescription>
<para>` Should be set in <ref refid="dc/d87/a00032_a3d8fead77f923fc687b367c12f5e0f7c_1a3d8fead77f923fc687b367c12f5e0f7c" kindref="member">Object::init()</ref> and become 0 in <ref refid="dc/d87/a00032_aff0ae807b5e930697ea3766301588f6d_1aff0ae807b5e930697ea3766301588f6d" kindref="member">Object::destroy()</ref> </para><para><ref refid="dc/d87/a00032_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" kindref="member">Object::getID() const </ref>returns this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/OGL.h" line="182" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/Vertex_Specification#Vertex_Array_Object">https://www.opengl.org/wiki/Vertex_Specification#Vertex_Array_Object</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d6d/a00055" kindref="compound">VertexBuffer</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="669">
        <label>mc::gfx::ogl::Object</label>
        <link refid="dc/d87/a00032"/>
      </node>
      <node id="668">
        <label>mc::gfx::ogl::VertexArray</label>
        <link refid="d1/dea/a00054"/>
        <childnode refid="669" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="671">
        <label>mc::gfx::ogl::Object</label>
        <link refid="dc/d87/a00032"/>
      </node>
      <node id="670">
        <label>mc::gfx::ogl::VertexArray</label>
        <link refid="d1/dea/a00054"/>
        <childnode refid="671" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/OGL.h" line="869" column="1" bodyfile="include/MACE/Graphics/OGL.h" bodystart="869" bodyend="931"/>
    <listofallmembers>
      <member refid="d1/dea/a00054_a35ffa9ced897f667d5cae79bfabd7b38_1a35ffa9ced897f667d5cae79bfabd7b38" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>addBuffer</name></member>
      <member refid="dc/d87/a00032_a3f02451ab4df9d4d732d79ed2941dfb1_1a3f02451ab4df9d4d732d79ed2941dfb1" prot="public" virt="virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>bind</name></member>
      <member refid="d1/dea/a00054_1a008295676e3f4f9beb38d39b43adc9d1" prot="private" virt="virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>bindIndex</name></member>
      <member refid="d1/dea/a00054_1a5519c5413dfc866a346b9003ceecb813" prot="private" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>buffers</name></member>
      <member refid="d1/dea/a00054_a1ea8420821e8d076d3b39ac39456537b_1a1ea8420821e8d076d3b39ac39456537b" prot="public" virt="virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>destroy</name></member>
      <member refid="d1/dea/a00054_a6b6c9e9784fb18e6ddbd6a160b153abe_1a6b6c9e9784fb18e6ddbd6a160b153abe" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>draw</name></member>
      <member refid="d1/dea/a00054_a8c79d8d0ffe0bdb39f89e4de7ca88143_1a8c79d8d0ffe0bdb39f89e4de7ca88143" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>getBuffers</name></member>
      <member refid="d1/dea/a00054_ad275131e38080d91531c121ff11cb620_1ad275131e38080d91531c121ff11cb620" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>getBuffers</name></member>
      <member refid="dc/d87/a00032_a717ff2f0b9420b4ce0939ff51ed9d545_1a717ff2f0b9420b4ce0939ff51ed9d545" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>getID</name></member>
      <member refid="d1/dea/a00054_a71f13fe1a17d70c6e2488e75d9877d5a_1a71f13fe1a17d70c6e2488e75d9877d5a" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>getIndices</name></member>
      <member refid="d1/dea/a00054_abd29e22869199e6dfbe38debdb2c9c15_1abd29e22869199e6dfbe38debdb2c9c15" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>getIndices</name></member>
      <member refid="d1/dea/a00054_a8a2635652fb0b34b6693f74b7b8d95da_1a8a2635652fb0b34b6693f74b7b8d95da" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>getVertexNumber</name></member>
      <member refid="d1/dea/a00054_aec2a55a0ef933adacde7f3cd4ad267a7_1aec2a55a0ef933adacde7f3cd4ad267a7" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>getVertexNumber</name></member>
      <member refid="dc/d87/a00032_aa6f2acefb1ac01ff347ff593738eab46_1aa6f2acefb1ac01ff347ff593738eab46" prot="protected" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>id</name></member>
      <member refid="d1/dea/a00054_1a24ebdbf6aac09e9a5ec4611a2638942f" prot="private" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>indices</name></member>
      <member refid="d1/dea/a00054_a2e5f1ca422d96bc7861e29116b1bfb81_1a2e5f1ca422d96bc7861e29116b1bfb81" prot="public" virt="virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>init</name></member>
      <member refid="d1/dea/a00054_ab19cf7b7a163b0585b2f8b8c6550251b_1ab19cf7b7a163b0585b2f8b8c6550251b" prot="public" virt="virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>isCreated</name></member>
      <member refid="d1/dea/a00054_a3ae4c47857605a7fa3aa056cf62d3238_1a3ae4c47857605a7fa3aa056cf62d3238" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>loadIndices</name></member>
      <member refid="d1/dea/a00054_a32a897023c4852401ddab8664a2c40c5_1a32a897023c4852401ddab8664a2c40c5" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>loadVertices</name></member>
      <member refid="d1/dea/a00054_ac71bd3e70562dfe5429663f3702e79f4_1ac71bd3e70562dfe5429663f3702e79f4" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>operator!=</name></member>
      <member refid="dc/d87/a00032_a5ff3ea4d06441e968ab9f3933329a828_1a5ff3ea4d06441e968ab9f3933329a828" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::ogl::Object::"><scope>mc::gfx::ogl::VertexArray</scope><name>operator!=</name></member>
      <member refid="d1/dea/a00054_aa33272510457f54f9f706c03beaf8f5b_1aa33272510457f54f9f706c03beaf8f5b" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>operator==</name></member>
      <member refid="dc/d87/a00032_a75cf124fcf3b2ce36c402d9ff8b9447d_1a75cf124fcf3b2ce36c402d9ff8b9447d" prot="public" virt="non-virtual" ambiguityscope="mc::gfx::ogl::Object::"><scope>mc::gfx::ogl::VertexArray</scope><name>operator==</name></member>
      <member refid="d1/dea/a00054_ab38f6e4f638d5793fa691837b7a5bc3d_1ab38f6e4f638d5793fa691837b7a5bc3d" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>setBuffers</name></member>
      <member refid="d1/dea/a00054_a5a05c7e3a7bda6613567460be3e2bef7_1a5a05c7e3a7bda6613567460be3e2bef7" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>setIndices</name></member>
      <member refid="d1/dea/a00054_aa1641edcb35d6f1f9c6e9800ffafd996_1aa1641edcb35d6f1f9c6e9800ffafd996" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>setVertexNumber</name></member>
      <member refid="d1/dea/a00054_ad4eb51ec059a94870c5dd357a6703ca7_1ad4eb51ec059a94870c5dd357a6703ca7" prot="public" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>storeDataInAttributeList</name></member>
      <member refid="dc/d87/a00032_ae357cedf8793a3ccd358c0174d645a63_1ae357cedf8793a3ccd358c0174d645a63" prot="public" virt="virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>unbind</name></member>
      <member refid="d1/dea/a00054_1a79617a44429a00205ac254a6812d53f4" prot="private" virt="non-virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>vertexNumber</name></member>
      <member refid="dc/d87/a00032_a4bf5ddbce67658a6dd14bedfa00bcac5_1a4bf5ddbce67658a6dd14bedfa00bcac5" prot="public" virt="virtual"><scope>mc::gfx::ogl::VertexArray</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
