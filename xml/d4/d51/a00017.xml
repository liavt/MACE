<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d4/d51/a00017" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::FrameBuffer</compoundname>
    <basecompoundref refid="d0/d33/a00027" prot="public" virt="non-virtual">mc::gfx::Object</basecompoundref>
    <includes refid="d6/d97/a00045" local="no">Buffer.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d4/d51/a00017_a23458be9aeb4aa11c7eb7675241b6a39_1a23458be9aeb4aa11c7eb7675241b6a39" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::FrameBuffer::init</definition>
        <argsstring>() override</argsstring>
        <name>init</name>
        <reimplements refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914">init</reimplements>
        <briefdescription>
<para>Calls the corresponding glCreate* function and assigns an ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80" kindref="member">Object::destroy()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76" kindref="member">Object::isCreated() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d51/a00017_ad6344fcf3be630b66cc756c0e3ae4029_1ad6344fcf3be630b66cc756c0e3ae4029" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::FrameBuffer::destroy</definition>
        <argsstring>() override</argsstring>
        <name>destroy</name>
        <reimplements refid="d0/d33/a00027_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80">destroy</reimplements>
        <briefdescription>
<para>Calls the corresponding glDestroy* function and deletes the ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind</ref> const </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76" kindref="member">Object::isCreated() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet (<ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> has not been called) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d51/a00017_af0828c4dd326f069e7e9615dbd08f632_1af0828c4dd326f069e7e9615dbd08f632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::FrameBuffer::attachTexture</definition>
        <argsstring>(const GLenum &amp;target, const GLenum &amp;attachment, const GLuint &amp;textureID, const GLint &amp;level=0)</argsstring>
        <name>attachTexture</name>
        <param>
          <type>const GLenum &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const GLenum &amp;</type>
          <declname>attachment</declname>
        </param>
        <param>
          <type>const GLuint &amp;</type>
          <declname>textureID</declname>
        </param>
        <param>
          <type>const GLint &amp;</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Attaches a texture to this <computeroutput><ref refid="d4/d51/a00017" kindref="compound">FrameBuffer</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The framebuffer target. Must be <computeroutput>GL_DRAW_FRAMEBUFFER</computeroutput>, <computeroutput>GL_READ_FRAMEBUFFER</computeroutput> or <computeroutput>GL_FRAMEBUFFER</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attachment</parametername>
</parameternamelist>
<parameterdescription>
<para>Which attachment port to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>textureID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID for the <computeroutput><ref refid="d8/d41/a00038" kindref="compound">Texture</ref></computeroutput> to attach. See <ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Texture::getID() const</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Mipmap level to attach. Is 0 by default. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glFramebufferTexture">https://www.opengl.org/wiki/GLAPI/glFramebufferTexture</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d51/a00017_aa49107301cfbb0c90986424781304adf_1aa49107301cfbb0c90986424781304adf" kindref="member">setDrawBuffers(const Size&amp;, const GLenum*)</ref> </para></simplesect>
<xrefsect id="d8/d84/a00001_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Replace this with the actual <ref refid="d8/d41/a00038" kindref="compound">Texture</ref> class </para></xrefdescription></xrefsect><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d51/a00017_af4cb479dd83383250fc37dcf49c9ad3c_1af4cb479dd83383250fc37dcf49c9ad3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::FrameBuffer::attachTexture1D</definition>
        <argsstring>(const GLenum &amp;target, const GLenum &amp;attachment, const GLenum &amp;texTarget, const GLuint &amp;textureID, const GLint &amp;level=0)</argsstring>
        <name>attachTexture1D</name>
        <param>
          <type>const GLenum &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const GLenum &amp;</type>
          <declname>attachment</declname>
        </param>
        <param>
          <type>const GLenum &amp;</type>
          <declname>texTarget</declname>
        </param>
        <param>
          <type>const GLuint &amp;</type>
          <declname>textureID</declname>
        </param>
        <param>
          <type>const GLint &amp;</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Attaches a texture to this <computeroutput><ref refid="d4/d51/a00017" kindref="compound">FrameBuffer</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The framebuffer target. Must be <computeroutput>GL_DRAW_FRAMEBUFFER</computeroutput>, <computeroutput>GL_READ_FRAMEBUFFER</computeroutput> or <computeroutput>GL_FRAMEBUFFER</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attachment</parametername>
</parameternamelist>
<parameterdescription>
<para>Which attachment port to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>textureID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID for the <computeroutput><ref refid="d8/d41/a00038" kindref="compound">Texture</ref></computeroutput> to attach. See <ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Texture::getID() const</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Mipmap level to attach. Is 0 by default. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glFramebufferTexture">https://www.opengl.org/wiki/GLAPI/glFramebufferTexture</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d51/a00017_aa49107301cfbb0c90986424781304adf_1aa49107301cfbb0c90986424781304adf" kindref="member">setDrawBuffers(const Size&amp;, const GLenum*)</ref> </para></simplesect>
<xrefsect id="d8/d84/a00001_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Replace this with the actual <ref refid="d8/d41/a00038" kindref="compound">Texture</ref> class </para></xrefdescription></xrefsect><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texTarget</parametername>
</parameternamelist>
<parameterdescription>
<para>Target for the texture. If it is a cubemap, it must have a special target as specified in the OpenGL wiki link. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d51/a00017_ac849e55b1aab89440bcf809773ff36f8_1ac849e55b1aab89440bcf809773ff36f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::FrameBuffer::attachTexture2D</definition>
        <argsstring>(const GLenum &amp;target, const GLenum &amp;attachment, const GLenum &amp;texTarget, const GLuint &amp;textureID, const GLint &amp;level=0)</argsstring>
        <name>attachTexture2D</name>
        <param>
          <type>const GLenum &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const GLenum &amp;</type>
          <declname>attachment</declname>
        </param>
        <param>
          <type>const GLenum &amp;</type>
          <declname>texTarget</declname>
        </param>
        <param>
          <type>const GLuint &amp;</type>
          <declname>textureID</declname>
        </param>
        <param>
          <type>const GLint &amp;</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Attaches a texture to this <computeroutput><ref refid="d4/d51/a00017" kindref="compound">FrameBuffer</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The framebuffer target. Must be <computeroutput>GL_DRAW_FRAMEBUFFER</computeroutput>, <computeroutput>GL_READ_FRAMEBUFFER</computeroutput> or <computeroutput>GL_FRAMEBUFFER</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attachment</parametername>
</parameternamelist>
<parameterdescription>
<para>Which attachment port to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>textureID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID for the <computeroutput><ref refid="d8/d41/a00038" kindref="compound">Texture</ref></computeroutput> to attach. See <ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Texture::getID() const</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Mipmap level to attach. Is 0 by default. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glFramebufferTexture">https://www.opengl.org/wiki/GLAPI/glFramebufferTexture</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d51/a00017_aa49107301cfbb0c90986424781304adf_1aa49107301cfbb0c90986424781304adf" kindref="member">setDrawBuffers(const Size&amp;, const GLenum*)</ref> </para></simplesect>
<xrefsect id="d8/d84/a00001_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Replace this with the actual <ref refid="d8/d41/a00038" kindref="compound">Texture</ref> class </para></xrefdescription></xrefsect><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texTarget</parametername>
</parameternamelist>
<parameterdescription>
<para>Target for the texture. If it is a cubemap, it must have a special target as specified in the OpenGL wiki link. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d51/a00017_ad388bd1236c469aa1bd88b712f9c2de1_1ad388bd1236c469aa1bd88b712f9c2de1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::FrameBuffer::attachTexture3D</definition>
        <argsstring>(const GLenum &amp;target, const GLenum &amp;attachment, const GLenum &amp;texTarget, const GLuint &amp;textureID, const GLint &amp;level=0, const GLint &amp;layer=0)</argsstring>
        <name>attachTexture3D</name>
        <param>
          <type>const GLenum &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const GLenum &amp;</type>
          <declname>attachment</declname>
        </param>
        <param>
          <type>const GLenum &amp;</type>
          <declname>texTarget</declname>
        </param>
        <param>
          <type>const GLuint &amp;</type>
          <declname>textureID</declname>
        </param>
        <param>
          <type>const GLint &amp;</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const GLint &amp;</type>
          <declname>layer</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Attaches a texture to this <computeroutput><ref refid="d4/d51/a00017" kindref="compound">FrameBuffer</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The framebuffer target. Must be <computeroutput>GL_DRAW_FRAMEBUFFER</computeroutput>, <computeroutput>GL_READ_FRAMEBUFFER</computeroutput> or <computeroutput>GL_FRAMEBUFFER</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attachment</parametername>
</parameternamelist>
<parameterdescription>
<para>Which attachment port to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>textureID</parametername>
</parameternamelist>
<parameterdescription>
<para>ID for the <computeroutput><ref refid="d8/d41/a00038" kindref="compound">Texture</ref></computeroutput> to attach. See <ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Texture::getID() const</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Mipmap level to attach. Is 0 by default. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glFramebufferTexture">https://www.opengl.org/wiki/GLAPI/glFramebufferTexture</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d51/a00017_aa49107301cfbb0c90986424781304adf_1aa49107301cfbb0c90986424781304adf" kindref="member">setDrawBuffers(const Size&amp;, const GLenum*)</ref> </para></simplesect>
<xrefsect id="d8/d84/a00001_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Replace this with the actual <ref refid="d8/d41/a00038" kindref="compound">Texture</ref> class </para></xrefdescription></xrefsect><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texTarget</parametername>
</parameternamelist>
<parameterdescription>
<para>Target for the texture. If it is a cubemap, it must have a special target as specified in the OpenGL wiki link. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>Which layer of the 3-dimensional image to use. It is 0 by default. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d51/a00017_a72425ec025ea5b934b10849cb36735b8_1a72425ec025ea5b934b10849cb36735b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::FrameBuffer::attachTextureLayer</definition>
        <argsstring>(const GLenum &amp;target, const GLenum &amp;attachment, const GLuint &amp;texture, const GLint &amp;level=0, const GLint &amp;layer=0)</argsstring>
        <name>attachTextureLayer</name>
        <param>
          <type>const GLenum &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const GLenum &amp;</type>
          <declname>attachment</declname>
        </param>
        <param>
          <type>const GLuint &amp;</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const GLint &amp;</type>
          <declname>level</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const GLint &amp;</type>
          <declname>layer</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Attaches a single layer from a texture to this <computeroutput><ref refid="d4/d51/a00017" kindref="compound">FrameBuffer</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The framebuffer target. Must be <computeroutput>GL_DRAW_FRAMEBUFFER</computeroutput>, <computeroutput>GL_READ_FRAMEBUFFER</computeroutput> or <computeroutput>GL_FRAMEBUFFER</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attachment</parametername>
</parameternamelist>
<parameterdescription>
<para>Which attachment port to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>ID for the <computeroutput><ref refid="d8/d41/a00038" kindref="compound">Texture</ref></computeroutput> to attach. See <ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Texture::getID() const</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Mipmap level to attach. Is 0 by default. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>Which layer of the texture to use. It is 0 by default. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glFramebufferTextureLayer">https://www.opengl.org/wiki/GLAPI/glFramebufferTextureLayer</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d51/a00017_a134a6bd75a1b1da1e73e3760a65d729d_1a134a6bd75a1b1da1e73e3760a65d729d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::FrameBuffer::attachRenderbuffer</definition>
        <argsstring>(const GLenum &amp;target, const GLenum &amp;attachment, const RenderBuffer &amp;buffer)</argsstring>
        <name>attachRenderbuffer</name>
        <param>
          <type>const GLenum &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const GLenum &amp;</type>
          <declname>attachment</declname>
        </param>
        <param>
          <type>const <ref refid="dc/d87/a00032" kindref="compound">RenderBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Attaches a <computeroutput><ref refid="dc/d87/a00032" kindref="compound">RenderBuffer</ref></computeroutput> to this <computeroutput><ref refid="d4/d51/a00017" kindref="compound">FrameBuffer</ref></computeroutput> for rendering. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The framebuffer target. Must be <computeroutput>GL_DRAW_FRAMEBUFFER</computeroutput>, <computeroutput>GL_READ_FRAMEBUFFER</computeroutput> or <computeroutput>GL_FRAMEBUFFER</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attachment</parametername>
</parameternamelist>
<parameterdescription>
<para>Which attachment port to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The <computeroutput><ref refid="dc/d87/a00032" kindref="compound">RenderBuffer</ref></computeroutput> to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glFramebufferRenderbuffer">https://www.opengl.org/wiki/GLAPI/glFramebufferRenderbuffer</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d51/a00017_aa49107301cfbb0c90986424781304adf_1aa49107301cfbb0c90986424781304adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::FrameBuffer::setDrawBuffers</definition>
        <argsstring>(const Size &amp;arrSize, const GLenum *buffers)</argsstring>
        <name>setDrawBuffers</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref> &amp;</type>
          <declname>arrSize</declname>
        </param>
        <param>
          <type>const GLenum *</type>
          <declname>buffers</declname>
        </param>
        <briefdescription>
<para>Specifies what buffers to render to. </para>        </briefdescription>
        <detaileddescription>
<para>Takes in an array of attachments. A <computeroutput><ref refid="dc/d87/a00032" kindref="compound">RenderBuffer</ref></computeroutput> or <computeroutput><ref refid="d8/d41/a00038" kindref="compound">Texture</ref></computeroutput> can be attached to act as a draw buffer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arrSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the array of render buffers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffers</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first element of the array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glDrawBuffers">https://www.opengl.org/wiki/GLAPI/glDrawBuffers</ulink> </para></simplesect>
<simplesect kind="see"><para>FrameBuffer::attachTexture(const GLenum&amp;, const GLenum&amp;, const GLenum&amp;, const GLuint&amp;) </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d51/a00017_af4cb479dd83383250fc37dcf49c9ad3c_1af4cb479dd83383250fc37dcf49c9ad3c" kindref="member">FrameBuffer::attachTexture1D(const GLenum&amp;, const GLenum&amp;, const GLenum&amp;, const GLuint&amp;, const GLint&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d51/a00017_ac849e55b1aab89440bcf809773ff36f8_1ac849e55b1aab89440bcf809773ff36f8" kindref="member">FrameBuffer::attachTexture2D(const GLenum&amp;, const GLenum&amp;, const GLenum&amp;, const GLuint&amp;, const GLint&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para>FrameBuffer::attachTexture2D(const GLenum&amp;, const GLenum&amp;, const GLenum&amp;, const GLuint&amp;, const GLint&amp;, const GLint&amp;) </para></simplesect>
<simplesect kind="see"><para>FrameBuffer::attachTextureLayer(const GLenum&amp;, const GLenum&amp;, const GLuint&amp;, const GLint&amp;) </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d51/a00017_a134a6bd75a1b1da1e73e3760a65d729d_1a134a6bd75a1b1da1e73e3760a65d729d" kindref="member">FrameBuffer::attachRenderbuffer(const GLenum&amp;, const GLenum&amp;, const RenderBuffer&amp;)</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d51/a00017_a7c317ddb92624571e8f9e1957c41779a_1a7c317ddb92624571e8f9e1957c41779a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::FrameBuffer::setReadBuffer</definition>
        <argsstring>(const Enum &amp;mode)</argsstring>
        <name>setReadBuffer</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Select which color buffer to use for reading via <ref refid="d4/d51/a00017_a88381becfa466e1ef9984107d634fb30_1a88381becfa466e1ef9984107d634fb30" kindref="member">FrameBuffer::readPixels(const int&amp;, const int&amp;, const Size&amp;, const Size&amp;, const Enum&amp;, const Enum&amp;, void*) const</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Which attachment to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d4/d51/a00017_a0e15ca77bf4a21ae738b54cd286c3614_1a0e15ca77bf4a21ae738b54cd286c3614" kindref="member">FrameBuffer::setPixelStore(const Enum&amp;, const float&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/sdk/docs/man/html/glReadBuffer.xhtml">https://www.opengl.org/sdk/docs/man/html/glReadBuffer.xhtml</ulink> </para></simplesect>
<simplesect kind="see"><para>FrameBuffer::attachTexture(const GLenum&amp;, const GLenum&amp;, const GLenum&amp;, const GLuint&amp;) </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d51/a00017_af4cb479dd83383250fc37dcf49c9ad3c_1af4cb479dd83383250fc37dcf49c9ad3c" kindref="member">FrameBuffer::attachTexture1D(const GLenum&amp;, const GLenum&amp;, const GLenum&amp;, const GLuint&amp;, const GLint&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d51/a00017_ac849e55b1aab89440bcf809773ff36f8_1ac849e55b1aab89440bcf809773ff36f8" kindref="member">FrameBuffer::attachTexture2D(const GLenum&amp;, const GLenum&amp;, const GLenum&amp;, const GLuint&amp;, const GLint&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para>FrameBuffer::attachTexture2D(const GLenum&amp;, const GLenum&amp;, const GLenum&amp;, const GLuint&amp;, const GLint&amp;, const GLint&amp;) </para></simplesect>
<simplesect kind="see"><para>FrameBuffer::attachTextureLayer(const GLenum&amp;, const GLenum&amp;, const GLuint&amp;, const GLint&amp;) </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d51/a00017_a134a6bd75a1b1da1e73e3760a65d729d_1a134a6bd75a1b1da1e73e3760a65d729d" kindref="member">FrameBuffer::attachRenderbuffer(const GLenum&amp;, const GLenum&amp;, const RenderBuffer&amp;)</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d51/a00017_a88381becfa466e1ef9984107d634fb30_1a88381becfa466e1ef9984107d634fb30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::FrameBuffer::readPixels</definition>
        <argsstring>(const int &amp;x, const int &amp;y, const Size &amp;width, const Size &amp;height, const Enum &amp;format, const Enum &amp;type, void *data) const </argsstring>
        <name>readPixels</name>
        <param>
          <type>const int &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="d1/d51/a00079_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref> &amp;</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const <ref refid="d1/d51/a00079_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref> &amp;</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Read pixels from this <computeroutput><ref refid="d4/d51/a00017" kindref="compound">FrameBuffer</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinate of the lower-left pixel block you want to read. The origin is the lower left corner of the framebuffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinate of the lower-left pixel block you want to read. The origin is the lower left corner of the framebuffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the pixel block you want to read. A width and height of 1 means a single pixel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the pixel block you want to read. A width and height of 1 means a single pixel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format of the pixel data. Must be one of GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the pixel data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to where you want the data to be written to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/sdk/docs/man/html/glReadPixels.xhtml">https://www.opengl.org/sdk/docs/man/html/glReadPixels.xhtml</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d51/a00017_a0e15ca77bf4a21ae738b54cd286c3614_1a0e15ca77bf4a21ae738b54cd286c3614" kindref="member">FrameBuffer::setPixelStore(const Enum&amp;, const float&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d4/d51/a00017_a7c317ddb92624571e8f9e1957c41779a_1a7c317ddb92624571e8f9e1957c41779a" kindref="member">FrameBuffer::setReadBuffer(const Enum&amp;)</ref>; </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d51/a00017_a0e15ca77bf4a21ae738b54cd286c3614_1a0e15ca77bf4a21ae738b54cd286c3614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::FrameBuffer::setPixelStore</definition>
        <argsstring>(const Enum &amp;name, const float &amp;param)</argsstring>
        <name>setPixelStore</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Set the pixel storage mode for this <computeroutput><ref refid="d4/d51/a00017" kindref="compound">FrameBuffer</ref></computeroutput> for use in <ref refid="d4/d51/a00017_a88381becfa466e1ef9984107d634fb30_1a88381becfa466e1ef9984107d634fb30" kindref="member">FrameBuffer::readPixels(const int&amp;, const int&amp;, const Size&amp;, const Size&amp;, const Enum&amp;, const Enum&amp;, void*) const</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter to change </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>What to change it to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/sdk/docs/man/html/glPixelStore.xhtml">https://www.opengl.org/sdk/docs/man/html/glPixelStore.xhtml</ulink> </para></simplesect>
<simplesect kind="see"><para></para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d51/a00017_a8f1cb089ad74f1b224d5a7fd1d54f2e8_1a8f1cb089ad74f1b224d5a7fd1d54f2e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::FrameBuffer::setPixelStore</definition>
        <argsstring>(const Enum &amp;name, const int &amp;param)</argsstring>
        <name>setPixelStore</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Set the pixel storage mode for this <computeroutput><ref refid="d4/d51/a00017" kindref="compound">FrameBuffer</ref></computeroutput> for use in <ref refid="d4/d51/a00017_a88381becfa466e1ef9984107d634fb30_1a88381becfa466e1ef9984107d634fb30" kindref="member">FrameBuffer::readPixels(const int&amp;, const int&amp;, const Size&amp;, const Size&amp;, const Enum&amp;, const Enum&amp;, void*) const</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter to change </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>What to change it to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/sdk/docs/man/html/glPixelStore.xhtml">https://www.opengl.org/sdk/docs/man/html/glPixelStore.xhtml</ulink> </para></simplesect>
<simplesect kind="see"><para></para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d51/a00017_ae7548c9644247644f4f3fdcdff3759a9_1ae7548c9644247644f4f3fdcdff3759a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool mc::gfx::FrameBuffer::isCreated</definition>
        <argsstring>() const  override</argsstring>
        <name>isCreated</name>
        <reimplements refid="d0/d33/a00027_ad729e7f4f11794cdfedec12fa46e2e76_1ad729e7f4f11794cdfedec12fa46e2e76">isCreated</reimplements>
        <briefdescription>
<para>Queries OpenGL whether this <ref refid="d0/d33/a00027" kindref="compound">Object</ref>&apos;s ID is a valid object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents memory </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d4/d51/a00017_a1ea5631800390eb09b0ed72ee86461cc_1a1ea5631800390eb09b0ed72ee86461cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLenum</type>
        <definition>GLenum mc::gfx::FrameBuffer::checkStatus</definition>
        <argsstring>(const GLenum &amp;target)</argsstring>
        <name>checkStatus</name>
        <param>
          <type>const GLenum &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Queries OpenGL for the status of this `FrameBuffer. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>Can be used to detect whether this</computeroutput>FrameBuffer` encountered an error during creation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The framebuffer target. Must be <computeroutput>GL_DRAW_FRAMEBUFFER</computeroutput>, <computeroutput>GL_READ_FRAMEBUFFER</computeroutput> or <computeroutput>GL_FRAMEBUFFER</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <computeroutput><ref refid="d4/d51/a00017" kindref="compound">FrameBuffer</ref></computeroutput> status. The full list of enums is described in the OpenGL specification. </para></simplesect>
<simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/GLAPI/glCheckFramebufferStatus">https://www.opengl.org/wiki/GLAPI/glCheckFramebufferStatus</ulink> </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void mc::gfx::Object::bind</definition>
        <argsstring>() const </argsstring>
        <name>bind</name>
        <reimplementedby refid="df/d61/a00031_1a055cd452ca943cb84a4663d5dfca4f61">bind</reimplementedby>
        <briefdescription>
<para>Binds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> to be used in an OpenGL function. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind() const</ref> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> has not been created yet </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void mc::gfx::Object::unbind</definition>
        <argsstring>() const </argsstring>
        <name>unbind</name>
        <reimplementedby refid="df/d61/a00031_1a509b3f1d7b32a0b12060535698889b30">unbind</reimplementedby>
        <briefdescription>
<para>Unbinds this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> which is equivalent to binding ID 0. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::Object::getID</definition>
        <argsstring>() const </argsstring>
        <name>getID</name>
        <briefdescription>
<para>Retrieves the current ID that this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> represents. </para>        </briefdescription>
        <detaileddescription>
<para>The ID is an unsigned number that acts like a pointer to OpenGL memory. It is assigned when <ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> is called. </para><para>If it is 0, the <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> is considered uncreated. </para><para>When using <ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const </ref>it will bind to this ID. <ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind() const </ref>will bind to ID 0, which is the equivelant of a null pointer. <simplesect kind="return"><para>The ID represented by this <computeroutput><ref refid="d0/d33/a00027" kindref="compound">Object</ref></computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Object::operator==</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are equal. </para>        </briefdescription>
        <detaileddescription>
<para>Their ID is compared. <simplesect kind="see"><para><ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" kindref="member">Object::operator!=(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are the same </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d0/d33/a00027_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::gfx::Object::operator!=</definition>
        <argsstring>(const Object &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d0/d33/a00027" kindref="compound">Object</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares if 2 <computeroutput>Objects</computeroutput> are not equal. </para>        </briefdescription>
        <detaileddescription>
<para>Their ID is compared. <simplesect kind="see"><para><ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d0/d33/a00027_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" kindref="member">Object::operator==(const Object&amp;) const</ref> </para></simplesect>
<simplesect kind="return"><para>Whether <computeroutput>this</computeroutput> and <computeroutput>other</computeroutput> are different </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>What to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="116" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d4/d51/a00017_1a82139128700564e6e037bf2857ba3ad8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::FrameBuffer::bindIndex</definition>
        <argsstring>(const Index &amp;id) const  override</argsstring>
        <name>bindIndex</name>
        <reimplements refid="d0/d33/a00027_a45afac15d5bd595db56bad1a096befce_1a45afac15d5bd595db56bad1a096befce">bindIndex</reimplements>
        <param>
          <type>const <ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Intended to be overloaded to bind to a certain index. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" kindref="member">Object::bind() const </ref>and <ref refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" kindref="member">Object::unbind() const </ref>both use this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to bind to. If it is 0, it needs to be unbinded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="408" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d0/d33/a00027_a5c44ad260b3bd8a5825c434037d5f89f_1a5c44ad260b3bd8a5825c434037d5f89f" prot="protected" static="no" mutable="no">
        <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::gfx::Object::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The ID of this `Object. </para>        </briefdescription>
        <detaileddescription>
<para>` Should be set in <ref refid="d0/d33/a00027_ab2fb38f2d3ec9640f61c730456538914_1ab2fb38f2d3ec9640f61c730456538914" kindref="member">Object::init()</ref> and become 0 in <ref refid="d0/d33/a00027_a58c034fb6bdf87e3f0d312bd3a563e80_1a58c034fb6bdf87e3f0d312bd3a563e80" kindref="member">Object::destroy()</ref> </para><para><ref refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" kindref="member">Object::getID() const </ref>returns this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Buffer.h" line="123" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents an OpenGL Framebuffer <ref refid="d0/d33/a00027" kindref="compound">Object</ref> which allows rendering to a non-screen location. </para>    </briefdescription>
    <detaileddescription>
<para>This also allows rendering to a <computeroutput><ref refid="d8/d41/a00038" kindref="compound">Texture</ref></computeroutput> or <computeroutput><ref refid="dc/d87/a00032" kindref="compound">RenderBuffer</ref></computeroutput> object. </para><para>This is not a subclass of the <computeroutput><ref refid="de/d5e/a00007" kindref="compound">Buffer</ref></computeroutput> object as this is technically not an OpenGL buffer. The name is misleading.</para><para><simplesect kind="see"><para><ulink url="https://www.opengl.org/wiki/Framebuffer_Object">https://www.opengl.org/wiki/Framebuffer_Object</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="dc/d87/a00032" kindref="compound">RenderBuffer</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d8/d41/a00038" kindref="compound">Texture</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="359">
        <label>mc::gfx::FrameBuffer</label>
        <link refid="d4/d51/a00017"/>
        <childnode refid="360" relation="public-inheritance">
        </childnode>
      </node>
      <node id="360">
        <label>mc::gfx::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="361">
        <label>mc::gfx::FrameBuffer</label>
        <link refid="d4/d51/a00017"/>
        <childnode refid="362" relation="public-inheritance">
        </childnode>
      </node>
      <node id="362">
        <label>mc::gfx::Object</label>
        <link refid="d0/d33/a00027"/>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/Buffer.h" line="274" column="1" bodyfile="include/MACE/Graphics/Buffer.h" bodystart="274" bodyend="409"/>
    <listofallmembers>
      <member refid="d4/d51/a00017_a134a6bd75a1b1da1e73e3760a65d729d_1a134a6bd75a1b1da1e73e3760a65d729d" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>attachRenderbuffer</name></member>
      <member refid="d4/d51/a00017_af0828c4dd326f069e7e9615dbd08f632_1af0828c4dd326f069e7e9615dbd08f632" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>attachTexture</name></member>
      <member refid="d4/d51/a00017_af4cb479dd83383250fc37dcf49c9ad3c_1af4cb479dd83383250fc37dcf49c9ad3c" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>attachTexture1D</name></member>
      <member refid="d4/d51/a00017_ac849e55b1aab89440bcf809773ff36f8_1ac849e55b1aab89440bcf809773ff36f8" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>attachTexture2D</name></member>
      <member refid="d4/d51/a00017_ad388bd1236c469aa1bd88b712f9c2de1_1ad388bd1236c469aa1bd88b712f9c2de1" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>attachTexture3D</name></member>
      <member refid="d4/d51/a00017_a72425ec025ea5b934b10849cb36735b8_1a72425ec025ea5b934b10849cb36735b8" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>attachTextureLayer</name></member>
      <member refid="d0/d33/a00027_a2df5914839494c38664a4bd27dffd458_1a2df5914839494c38664a4bd27dffd458" prot="public" virt="virtual"><scope>mc::gfx::FrameBuffer</scope><name>bind</name></member>
      <member refid="d4/d51/a00017_1a82139128700564e6e037bf2857ba3ad8" prot="private" virt="virtual"><scope>mc::gfx::FrameBuffer</scope><name>bindIndex</name></member>
      <member refid="d4/d51/a00017_a1ea5631800390eb09b0ed72ee86461cc_1a1ea5631800390eb09b0ed72ee86461cc" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>checkStatus</name></member>
      <member refid="d4/d51/a00017_ad6344fcf3be630b66cc756c0e3ae4029_1ad6344fcf3be630b66cc756c0e3ae4029" prot="public" virt="virtual"><scope>mc::gfx::FrameBuffer</scope><name>destroy</name></member>
      <member refid="d0/d33/a00027_adcc524a5d4ce6e79e9c1893c0f935559_1adcc524a5d4ce6e79e9c1893c0f935559" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>getID</name></member>
      <member refid="d0/d33/a00027_a5c44ad260b3bd8a5825c434037d5f89f_1a5c44ad260b3bd8a5825c434037d5f89f" prot="protected" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>id</name></member>
      <member refid="d4/d51/a00017_a23458be9aeb4aa11c7eb7675241b6a39_1a23458be9aeb4aa11c7eb7675241b6a39" prot="public" virt="virtual"><scope>mc::gfx::FrameBuffer</scope><name>init</name></member>
      <member refid="d4/d51/a00017_ae7548c9644247644f4f3fdcdff3759a9_1ae7548c9644247644f4f3fdcdff3759a9" prot="public" virt="virtual"><scope>mc::gfx::FrameBuffer</scope><name>isCreated</name></member>
      <member refid="d0/d33/a00027_a46f8d2830121ba4397bbf6ab8c1ab439_1a46f8d2830121ba4397bbf6ab8c1ab439" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>operator!=</name></member>
      <member refid="d0/d33/a00027_adf01757b2750668b7fbb42b3677e8e70_1adf01757b2750668b7fbb42b3677e8e70" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>operator==</name></member>
      <member refid="d4/d51/a00017_a88381becfa466e1ef9984107d634fb30_1a88381becfa466e1ef9984107d634fb30" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>readPixels</name></member>
      <member refid="d4/d51/a00017_aa49107301cfbb0c90986424781304adf_1aa49107301cfbb0c90986424781304adf" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>setDrawBuffers</name></member>
      <member refid="d4/d51/a00017_a0e15ca77bf4a21ae738b54cd286c3614_1a0e15ca77bf4a21ae738b54cd286c3614" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>setPixelStore</name></member>
      <member refid="d4/d51/a00017_a8f1cb089ad74f1b224d5a7fd1d54f2e8_1a8f1cb089ad74f1b224d5a7fd1d54f2e8" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>setPixelStore</name></member>
      <member refid="d4/d51/a00017_a7c317ddb92624571e8f9e1957c41779a_1a7c317ddb92624571e8f9e1957c41779a" prot="public" virt="non-virtual"><scope>mc::gfx::FrameBuffer</scope><name>setReadBuffer</name></member>
      <member refid="d0/d33/a00027_a00c18026339561f7c4e705c417c5e596_1a00c18026339561f7c4e705c417c5e596" prot="public" virt="virtual"><scope>mc::gfx::FrameBuffer</scope><name>unbind</name></member>
      <member refid="d0/d33/a00027_a4ea5dacb16804b43f4be8c2567bbd48b_1a4ea5dacb16804b43f4be8c2567bbd48b" prot="public" virt="virtual"><scope>mc::gfx::FrameBuffer</scope><name>~Object</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
