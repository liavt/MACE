<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d5/d79/a00030" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>mc::Module</compoundname>
    <derivedcompoundref refid="de/d21/a00006" prot="public" virt="non-virtual">mc::AudioModule</derivedcompoundref>
    <derivedcompoundref refid="d4/d6d/a00055" prot="public" virt="non-virtual">mc::os::WindowModule</derivedcompoundref>
    <includes refid="d7/df7/a00058" local="no">Module.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d5/d79/a00030_a854aad3bb8a2f60446fb14aeb28967b6_1a854aad3bb8a2f60446fb14aeb28967b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void mc::Module::init</definition>
        <argsstring>()=0</argsstring>
        <name>init</name>
        <reimplementedby refid="de/d21/a00006_1a8fccff7e7f936471effc9e389e250619">init</reimplementedby>
        <reimplementedby refid="d4/d6d/a00055_aa14fd4f80a3b582f1584ecacbf541f54_1aa14fd4f80a3b582f1584ecacbf541f54">init</reimplementedby>
        <briefdescription>
<para>Called when <ref refid="d4/d3a/a00101_a87ae59d4d843c7d01b12f5dadc36c01a_1a87ae59d4d843c7d01b12f5dadc36c01a" kindref="member">MACE#init</ref> is called and this <computeroutput><ref refid="d5/d79/a00030" kindref="compound">Module</ref></computeroutput> is registered. </para>        </briefdescription>
        <detaileddescription>
<para>Use this to initialize variables, start streams, or launch a context. </para><para>Should only be called once. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/d79/a00030_a6417f3db90ae235fb1be01ed6a3d612c_1a6417f3db90ae235fb1be01ed6a3d612c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void mc::Module::update</definition>
        <argsstring>()=0</argsstring>
        <name>update</name>
        <reimplementedby refid="de/d21/a00006_1a993917a0ded345f43b774afe60d8bf35">update</reimplementedby>
        <reimplementedby refid="d4/d6d/a00055_a4e30b4c62fb168a976063b265dd50c38_1a4e30b4c62fb168a976063b265dd50c38">update</reimplementedby>
        <briefdescription>
<para>Called when <ref refid="d4/d3a/a00101_a857b4aaf5098870c36994338ded0eb88_1a857b4aaf5098870c36994338ded0eb88" kindref="member">MACE#update</ref> is called and this <computeroutput><ref refid="d5/d79/a00030" kindref="compound">Module</ref></computeroutput> is registered. </para>        </briefdescription>
        <detaileddescription>
<para>Use this update states, send messages, swap graphics buffers, render, process, or anything that needs to be periodically checked. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/d79/a00030_abf13bd45de10185d4139dfff22a555d2_1abf13bd45de10185d4139dfff22a555d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void mc::Module::destroy</definition>
        <argsstring>()=0</argsstring>
        <name>destroy</name>
        <reimplementedby refid="de/d21/a00006_1a3776d2be58b18d774e8ce9a965b65a06">destroy</reimplementedby>
        <reimplementedby refid="d4/d6d/a00055_a588d592078a0b1ca34b3cec75a2f4ae3_1a588d592078a0b1ca34b3cec75a2f4ae3">destroy</reimplementedby>
        <briefdescription>
<para>Called when <ref refid="d4/d3a/a00101_a2d1213f9aab871e066d5dbfb316c3dc2_1a2d1213f9aab871e066d5dbfb316c3dc2" kindref="member">MACE#destroy</ref> is called and this <computeroutput><ref refid="d5/d79/a00030" kindref="compound">Module</ref></computeroutput> is registered. </para>        </briefdescription>
        <detaileddescription>
<para>Use this to clear memory, close streams, or clean up anything that needs to be cleaned up. </para><para>Should only be called before the program is closed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/d79/a00030_aa6d981a55ad5c04a39768e3ddcb0ad49_1aa6d981a55ad5c04a39768e3ddcb0ad49" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string mc::Module::getName</definition>
        <argsstring>() const  =0</argsstring>
        <name>getName</name>
        <reimplementedby refid="de/d21/a00006_1aa0e7e1192438c1e97b328a329dc0f430">getName</reimplementedby>
        <reimplementedby refid="d4/d6d/a00055_abe1f3ab2d70e3e70ea9ff666842e8ef2_1abe1f3ab2d70e3e70ea9ff666842e8ef2">getName</reimplementedby>
        <briefdescription>
<para>Override this function and return a UNIQUE name for this <computeroutput><ref refid="d5/d79/a00030" kindref="compound">Module</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para>The name for your <computeroutput><ref refid="d5/d79/a00030" kindref="compound">Module</ref></computeroutput> is used in comparison, so make sure it is as unique as possible. </para><para>It is akin to a hashcode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="54" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract class used for doing a task in <ref refid="d4/d3a/a00101" kindref="compound">MACE</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>Plugged into <ref refid="d4/d3a/a00101" kindref="compound">MACE</ref> via <ref refid="d4/d3a/a00101_aea0de9ffe89afcdca1b6d0b087e9a009_1aea0de9ffe89afcdca1b6d0b087e9a009" kindref="member">addModule().</ref> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="552">
        <label>mc::os::WindowModule</label>
        <link refid="d4/d6d/a00055"/>
        <childnode refid="550" relation="public-inheritance">
        </childnode>
      </node>
      <node id="551">
        <label>mc::AudioModule</label>
        <link refid="de/d21/a00006"/>
        <childnode refid="550" relation="public-inheritance">
        </childnode>
      </node>
      <node id="550">
        <label>mc::Module</label>
        <link refid="d5/d79/a00030"/>
      </node>
    </inheritancegraph>
    <location file="include/MACE/Core/Module.h" line="22" column="1" bodyfile="include/MACE/Core/Module.h" bodystart="22" bodyend="55"/>
    <listofallmembers>
      <member refid="d5/d79/a00030_abf13bd45de10185d4139dfff22a555d2_1abf13bd45de10185d4139dfff22a555d2" prot="public" virt="pure-virtual"><scope>mc::Module</scope><name>destroy</name></member>
      <member refid="d5/d79/a00030_aa6d981a55ad5c04a39768e3ddcb0ad49_1aa6d981a55ad5c04a39768e3ddcb0ad49" prot="public" virt="pure-virtual"><scope>mc::Module</scope><name>getName</name></member>
      <member refid="d5/d79/a00030_a854aad3bb8a2f60446fb14aeb28967b6_1a854aad3bb8a2f60446fb14aeb28967b6" prot="public" virt="pure-virtual"><scope>mc::Module</scope><name>init</name></member>
      <member refid="d5/d79/a00030_a6417f3db90ae235fb1be01ed6a3d612c_1a6417f3db90ae235fb1be01ed6a3d612c" prot="public" virt="pure-virtual"><scope>mc::Module</scope><name>update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
