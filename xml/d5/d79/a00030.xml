<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d5/d79/a00030" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::RenderProtocol&lt; Entity2D &gt;</compoundname>
    <basecompoundref refid="dc/d3c/a00028" prot="public" virt="non-virtual">mc::gfx::RenderImpl</basecompoundref>
    <includes refid="dd/d32/a00041" local="no">Entity2D.h</includes>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d5/d79/a00030_1a0b89e976b890c3f3491925d9344bc916" prot="private" static="no" mutable="no">
        <type><ref refid="df/d61/a00031" kindref="compound">ShaderProgram</ref></type>
        <definition>ShaderProgram mc::gfx::RenderProtocol&lt; Entity2D &gt;::shaders2D</definition>
        <argsstring></argsstring>
        <name>shaders2D</name>
        <initializer>= <ref refid="df/d61/a00031" kindref="compound">ShaderProgram</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="58" column="1" bodyfile="include/MACE/Graphics/Entity2D.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d79/a00030_1af8166f52dd796e0d40cbbe3d07006471" prot="private" static="no" mutable="no">
        <type><ref refid="de/d8c/a00036" kindref="compound">VertexArray</ref></type>
        <definition>VertexArray mc::gfx::RenderProtocol&lt; Entity2D &gt;::square</definition>
        <argsstring></argsstring>
        <name>square</name>
        <initializer>= <ref refid="de/d8c/a00036" kindref="compound">VertexArray</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="59" column="1" bodyfile="include/MACE/Graphics/Entity2D.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d5/d79/a00030_a7e9d118a4f81190d9ebabf970afd7213_1a7e9d118a4f81190d9ebabf970afd7213" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; Entity2D &gt;::resize</definition>
        <argsstring>(const Size width, const Size height) override</argsstring>
        <name>resize</name>
        <reimplements refid="dc/d3c/a00028_ab941c45df034626848ed216b7199d40c_1ab941c45df034626848ed216b7199d40c">resize</reimplements>
        <param>
          <type>const <ref refid="d6/d2c/a00072_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d2c/a00072_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="note"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/d79/a00030_a2f738b2b7177dd79de63011ea246c25d_1a2f738b2b7177dd79de63011ea246c25d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; Entity2D &gt;::init</definition>
        <argsstring>(const Size originalWidth, const Size originalHeight) override</argsstring>
        <name>init</name>
        <reimplements refid="dc/d3c/a00028_a1de407db695c2148bf71c67883ffedb1_1a1de407db695c2148bf71c67883ffedb1">init</reimplements>
        <param>
          <type>const <ref refid="d6/d2c/a00072_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>originalWidth</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d2c/a00072_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>originalHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="note"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/d79/a00030_a2fb5afde4608667dac429efcd2d07438_1a2fb5afde4608667dac429efcd2d07438" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; Entity2D &gt;::setUp</definition>
        <argsstring>(os::WindowModule *win, RenderQueue *queue) override</argsstring>
        <name>setUp</name>
        <reimplements refid="dc/d3c/a00028_a13d3c43299a124a1b95d113c902e9476_1a13d3c43299a124a1b95d113c902e9476">setUp</reimplements>
        <param>
          <type><ref refid="d1/dc6/a00037" kindref="compound">os::WindowModule</ref> *</type>
          <declname>win</declname>
        </param>
        <param>
          <type><ref refid="d1/d6e/a00073_aa8d831470fc2c8d0246e9d04a3d68f5f_1aa8d831470fc2c8d0246e9d04a3d68f5f" kindref="member">RenderQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="note"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/d79/a00030_a2aa8c704dc99ff2589d10869a694a400_1a2aa8c704dc99ff2589d10869a694a400" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; Entity2D &gt;::render</definition>
        <argsstring>(os::WindowModule *win, GraphicsEntity *entity) override</argsstring>
        <name>render</name>
        <reimplements refid="dc/d3c/a00028_a06a982c8b438aaa052e1fa1d1fc995ae_1a06a982c8b438aaa052e1fa1d1fc995ae">render</reimplements>
        <param>
          <type><ref refid="d1/dc6/a00037" kindref="compound">os::WindowModule</ref> *</type>
          <declname>win</declname>
        </param>
        <param>
          <type><ref refid="dd/d1b/a00015" kindref="compound">GraphicsEntity</ref> *</type>
          <declname>entity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="note"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/d79/a00030_ade7012f8089ee90e548370ccdfb41008_1ade7012f8089ee90e548370ccdfb41008" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; Entity2D &gt;::tearDown</definition>
        <argsstring>(os::WindowModule *win, RenderQueue *queue) override</argsstring>
        <name>tearDown</name>
        <reimplements refid="dc/d3c/a00028_ac1b569053de9c46379c954f71e64659b_1ac1b569053de9c46379c954f71e64659b">tearDown</reimplements>
        <param>
          <type><ref refid="d1/dc6/a00037" kindref="compound">os::WindowModule</ref> *</type>
          <declname>win</declname>
        </param>
        <param>
          <type><ref refid="d1/d6e/a00073_aa8d831470fc2c8d0246e9d04a3d68f5f_1aa8d831470fc2c8d0246e9d04a3d68f5f" kindref="member">RenderQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="note"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/d79/a00030_a5d1a4c0291ceb2bba79f81e88c9d1bb2_1a5d1a4c0291ceb2bba79f81e88c9d1bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; Entity2D &gt;::destroy</definition>
        <argsstring>() override</argsstring>
        <name>destroy</name>
        <reimplements refid="dc/d3c/a00028_aa45e3ec6a2548c4dcb4bdbffa19fe0ee_1aa45e3ec6a2548c4dcb4bdbffa19fe0ee">destroy</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="note"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="55" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="note"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="387">
        <label>mc::gfx::RenderProtocol&lt; Entity2D &gt;</label>
        <link refid="d5/d79/a00030"/>
        <childnode refid="388" relation="public-inheritance">
        </childnode>
      </node>
      <node id="388">
        <label>mc::gfx::RenderImpl</label>
        <link refid="dc/d3c/a00028"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="389">
        <label>mc::gfx::RenderProtocol&lt; Entity2D &gt;</label>
        <link refid="d5/d79/a00030"/>
        <childnode refid="390" relation="public-inheritance">
        </childnode>
      </node>
      <node id="390">
        <label>mc::gfx::RenderImpl</label>
        <link refid="dc/d3c/a00028"/>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/Entity2D.h" line="43" column="1" bodyfile="include/MACE/Graphics/Entity2D.h" bodystart="43" bodyend="60"/>
    <listofallmembers>
      <member refid="d5/d79/a00030_a5d1a4c0291ceb2bba79f81e88c9d1bb2_1a5d1a4c0291ceb2bba79f81e88c9d1bb2" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol&lt; Entity2D &gt;</scope><name>destroy</name></member>
      <member refid="d5/d79/a00030_a2f738b2b7177dd79de63011ea246c25d_1a2f738b2b7177dd79de63011ea246c25d" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol&lt; Entity2D &gt;</scope><name>init</name></member>
      <member refid="d5/d79/a00030_a2aa8c704dc99ff2589d10869a694a400_1a2aa8c704dc99ff2589d10869a694a400" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol&lt; Entity2D &gt;</scope><name>render</name></member>
      <member refid="dc/d3c/a00028_ab9f74038bf9e1c44b26eebc57c3a9b47_1ab9f74038bf9e1c44b26eebc57c3a9b47" prot="public" virt="non-virtual"><scope>mc::gfx::RenderProtocol&lt; Entity2D &gt;</scope><name>RenderImpl</name></member>
      <member refid="d5/d79/a00030_a7e9d118a4f81190d9ebabf970afd7213_1a7e9d118a4f81190d9ebabf970afd7213" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol&lt; Entity2D &gt;</scope><name>resize</name></member>
      <member refid="d5/d79/a00030_a2fb5afde4608667dac429efcd2d07438_1a2fb5afde4608667dac429efcd2d07438" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol&lt; Entity2D &gt;</scope><name>setUp</name></member>
      <member refid="d5/d79/a00030_1a0b89e976b890c3f3491925d9344bc916" prot="private" virt="non-virtual"><scope>mc::gfx::RenderProtocol&lt; Entity2D &gt;</scope><name>shaders2D</name></member>
      <member refid="d5/d79/a00030_1af8166f52dd796e0d40cbbe3d07006471" prot="private" virt="non-virtual"><scope>mc::gfx::RenderProtocol&lt; Entity2D &gt;</scope><name>square</name></member>
      <member refid="d5/d79/a00030_ade7012f8089ee90e548370ccdfb41008_1ade7012f8089ee90e548370ccdfb41008" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol&lt; Entity2D &gt;</scope><name>tearDown</name></member>
      <member refid="dc/d3c/a00028_a1a83129c78f067dc116964ee24e15fb2_1a1a83129c78f067dc116964ee24e15fb2" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol&lt; Entity2D &gt;</scope><name>~RenderImpl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
