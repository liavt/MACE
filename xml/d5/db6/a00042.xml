<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d5/db6/a00042" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::RenderProtocol&lt; Letter &gt;</compoundname>
    <basecompoundref refid="d3/de7/a00039" prot="public" virt="non-virtual">mc::gfx::RenderImpl</basecompoundref>
    <includes refid="d1/d6f/a00063" local="no">Entity2D.h</includes>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d5/db6/a00042_1a7cfcc63dafeb34a17e30aea08cf583cf" prot="private" static="no" mutable="no">
        <type><ref refid="d3/dea/a00046" kindref="compound">SimpleQuadRenderer</ref></type>
        <definition>SimpleQuadRenderer mc::gfx::RenderProtocol&lt; Letter &gt;::renderer</definition>
        <argsstring></argsstring>
        <name>renderer</name>
        <initializer>= <ref refid="d3/dea/a00046" kindref="compound">SimpleQuadRenderer</ref>(true)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="286" column="1" bodyfile="include/MACE/Graphics/Entity2D.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d5/db6/a00042_ab667640c6ee8d39a867f915c15e34763_1ab667640c6ee8d39a867f915c15e34763" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; Letter &gt;::resize</definition>
        <argsstring>(const Size width, const Size height) override</argsstring>
        <name>resize</name>
        <reimplements refid="d3/de7/a00039_ab941c45df034626848ed216b7199d40c_1ab941c45df034626848ed216b7199d40c">resize</reimplements>
        <param>
          <type>const <ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type>const <ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a22a95178025b8c055d05a13e31d2062d_1a22a95178025b8c055d05a13e31d2062d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; Letter &gt;::init</definition>
        <argsstring>(const Size originalWidth, const Size originalHeight) override</argsstring>
        <name>init</name>
        <reimplements refid="d3/de7/a00039_a1de407db695c2148bf71c67883ffedb1_1a1de407db695c2148bf71c67883ffedb1">init</reimplements>
        <param>
          <type>const <ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>originalWidth</declname>
        </param>
        <param>
          <type>const <ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
          <declname>originalHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a486a19d4c62bf1db6f6ebbae4a4d4865_1a486a19d4c62bf1db6f6ebbae4a4d4865" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; Letter &gt;::setUp</definition>
        <argsstring>(os::WindowModule *win, RenderQueue *queue) override</argsstring>
        <name>setUp</name>
        <reimplements refid="d3/de7/a00039_a13d3c43299a124a1b95d113c902e9476_1a13d3c43299a124a1b95d113c902e9476">setUp</reimplements>
        <param>
          <type><ref refid="d4/d6d/a00055" kindref="compound">os::WindowModule</ref> *</type>
          <declname>win</declname>
        </param>
        <param>
          <type><ref refid="d1/d44/a00098_aa8d831470fc2c8d0246e9d04a3d68f5f_1aa8d831470fc2c8d0246e9d04a3d68f5f" kindref="member">RenderQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_ac961b9da517c4d5f9040cf8c5c4da091_1ac961b9da517c4d5f9040cf8c5c4da091" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; Letter &gt;::render</definition>
        <argsstring>(os::WindowModule *win, GraphicsEntity *entity) override</argsstring>
        <name>render</name>
        <reimplements refid="d3/de7/a00039_a06a982c8b438aaa052e1fa1d1fc995ae_1a06a982c8b438aaa052e1fa1d1fc995ae">render</reimplements>
        <param>
          <type><ref refid="d4/d6d/a00055" kindref="compound">os::WindowModule</ref> *</type>
          <declname>win</declname>
        </param>
        <param>
          <type><ref refid="de/d11/a00021" kindref="compound">GraphicsEntity</ref> *</type>
          <declname>entity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_a0af6d8bca5482dddceb4077b157909a4_1a0af6d8bca5482dddceb4077b157909a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; Letter &gt;::tearDown</definition>
        <argsstring>(os::WindowModule *win, RenderQueue *queue) override</argsstring>
        <name>tearDown</name>
        <reimplements refid="d3/de7/a00039_ac1b569053de9c46379c954f71e64659b_1ac1b569053de9c46379c954f71e64659b">tearDown</reimplements>
        <param>
          <type><ref refid="d4/d6d/a00055" kindref="compound">os::WindowModule</ref> *</type>
          <declname>win</declname>
        </param>
        <param>
          <type><ref refid="d1/d44/a00098_aa8d831470fc2c8d0246e9d04a3d68f5f_1aa8d831470fc2c8d0246e9d04a3d68f5f" kindref="member">RenderQueue</ref> *</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d5/db6/a00042_ab0414b1d55e9c95325453448084f5d18_1ab0414b1d55e9c95325453448084f5d18" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; Letter &gt;::destroy</definition>
        <argsstring>() override</argsstring>
        <name>destroy</name>
        <reimplements refid="d3/de7/a00039_aa45e3ec6a2548c4dcb4bdbffa19fe0ee_1aa45e3ec6a2548c4dcb4bdbffa19fe0ee">destroy</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity2D.h" line="284" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="627">
        <label>mc::gfx::RenderImpl</label>
        <link refid="d3/de7/a00039"/>
      </node>
      <node id="626">
        <label>mc::gfx::RenderProtocol&lt; Letter &gt;</label>
        <link refid="d5/db6/a00042"/>
        <childnode refid="627" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="629">
        <label>mc::gfx::RenderImpl</label>
        <link refid="d3/de7/a00039"/>
      </node>
      <node id="628">
        <label>mc::gfx::RenderProtocol&lt; Letter &gt;</label>
        <link refid="d5/db6/a00042"/>
        <childnode refid="629" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/Entity2D.h" line="272" column="1" bodyfile="include/MACE/Graphics/Entity2D.h" bodystart="272" bodyend="287"/>
    <listofallmembers>
      <member refid="d5/db6/a00042_ab0414b1d55e9c95325453448084f5d18_1ab0414b1d55e9c95325453448084f5d18" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol&lt; Letter &gt;</scope><name>destroy</name></member>
      <member refid="d5/db6/a00042_a22a95178025b8c055d05a13e31d2062d_1a22a95178025b8c055d05a13e31d2062d" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol&lt; Letter &gt;</scope><name>init</name></member>
      <member refid="d5/db6/a00042_ac961b9da517c4d5f9040cf8c5c4da091_1ac961b9da517c4d5f9040cf8c5c4da091" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol&lt; Letter &gt;</scope><name>render</name></member>
      <member refid="d5/db6/a00042_1a7cfcc63dafeb34a17e30aea08cf583cf" prot="private" virt="non-virtual"><scope>mc::gfx::RenderProtocol&lt; Letter &gt;</scope><name>renderer</name></member>
      <member refid="d3/de7/a00039_ab9f74038bf9e1c44b26eebc57c3a9b47_1ab9f74038bf9e1c44b26eebc57c3a9b47" prot="public" virt="non-virtual"><scope>mc::gfx::RenderProtocol&lt; Letter &gt;</scope><name>RenderImpl</name></member>
      <member refid="d5/db6/a00042_ab667640c6ee8d39a867f915c15e34763_1ab667640c6ee8d39a867f915c15e34763" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol&lt; Letter &gt;</scope><name>resize</name></member>
      <member refid="d5/db6/a00042_a486a19d4c62bf1db6f6ebbae4a4d4865_1a486a19d4c62bf1db6f6ebbae4a4d4865" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol&lt; Letter &gt;</scope><name>setUp</name></member>
      <member refid="d5/db6/a00042_a0af6d8bca5482dddceb4077b157909a4_1a0af6d8bca5482dddceb4077b157909a4" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol&lt; Letter &gt;</scope><name>tearDown</name></member>
      <member refid="d3/de7/a00039_a1a83129c78f067dc116964ee24e15fb2_1a1a83129c78f067dc116964ee24e15fb2" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol&lt; Letter &gt;</scope><name>~RenderImpl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
