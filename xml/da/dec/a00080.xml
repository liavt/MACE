<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="da/dec/a00080" kind="namespace" language="C++">
    <compoundname>mc::gfx</compoundname>
    <innerclass refid="de/d5e/a00007" prot="public">mc::gfx::Buffer</innerclass>
    <innerclass refid="d4/dee/a00008" prot="public">mc::gfx::CallbackEntity</innerclass>
    <innerclass refid="d7/dec/a00010" prot="public">mc::gfx::Component</innerclass>
    <innerclass refid="da/d45/a00011" prot="public">mc::gfx::CopyReadBuffer</innerclass>
    <innerclass refid="df/d86/a00012" prot="public">mc::gfx::CopyWriteBuffer</innerclass>
    <innerclass refid="d7/dd4/a00013" prot="public">mc::gfx::ElementBuffer</innerclass>
    <innerclass refid="d2/de7/a00014" prot="public">mc::gfx::Entity</innerclass>
    <innerclass refid="dd/d1b/a00015" prot="public">mc::gfx::Entity2D</innerclass>
    <innerclass refid="d4/d51/a00017" prot="public">mc::gfx::FrameBuffer</innerclass>
    <innerclass refid="d1/d2b/a00018" prot="public">mc::gfx::GraphicsEntity</innerclass>
    <innerclass refid="dd/da2/a00019" prot="public">mc::gfx::Group</innerclass>
    <innerclass refid="db/db2/a00020" prot="public">mc::gfx::Image</innerclass>
    <innerclass refid="d0/d33/a00027" prot="public">mc::gfx::Object</innerclass>
    <innerclass refid="dc/d3c/a00028" prot="public">mc::gfx::PixelPackBuffer</innerclass>
    <innerclass refid="d5/d16/a00029" prot="public">mc::gfx::PixelUnpackBuffer</innerclass>
    <innerclass refid="df/d61/a00031" prot="public">mc::gfx::QueryObject</innerclass>
    <innerclass refid="dc/d87/a00032" prot="public">mc::gfx::RenderBuffer</innerclass>
    <innerclass refid="d0/dc0/a00033" prot="public">mc::gfx::Renderer</innerclass>
    <innerclass refid="db/df3/a00034" prot="public">mc::gfx::RenderImpl</innerclass>
    <innerclass refid="d4/d8c/a00035" prot="public">mc::gfx::RenderProtocol</innerclass>
    <innerclass refid="de/d8c/a00036" prot="public">mc::gfx::RenderProtocol&lt; Entity2D &gt;</innerclass>
    <innerclass refid="d1/dc6/a00037" prot="public">mc::gfx::ShaderProgram</innerclass>
    <innerclass refid="d8/d41/a00038" prot="public">mc::gfx::Texture</innerclass>
    <innerclass refid="db/d3a/a00040" prot="public">mc::gfx::UniformBuffer</innerclass>
    <innerclass refid="d5/db6/a00042" prot="public">mc::gfx::VertexArray</innerclass>
    <innerclass refid="d6/d42/a00043" prot="public">mc::gfx::VertexBuffer</innerclass>
    <innernamespace refid="d8/d53/a00081">mc::gfx::ssl</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="da/dec/a00080_a6179dec54918a9dc1c86f419bc000343_1a6179dec54918a9dc1c86f419bc000343" prot="public" static="no">
        <type><ref refid="de/d21/a00006" kindref="compound">BitField</ref></type>
        <definition>using mc::gfx::EntityProperties = typedef BitField</definition>
        <argsstring></argsstring>
        <name>EntityProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Entity.h" line="22" column="1" bodyfile="include/MACE/Graphics/Entity.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/dec/a00080_a5ec3c90c72c1f476325a75981f887846_1a5ec3c90c72c1f476325a75981f887846" prot="public" static="no">
        <type><ref refid="d7/d7a/a00016" kindref="compound">Exception</ref></type>
        <definition>using mc::gfx::GLError = typedef Exception</definition>
        <argsstring></argsstring>
        <name>GLError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/GraphicsConstants.h" line="20" column="1" bodyfile="include/MACE/Graphics/GraphicsConstants.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/dec/a00080_a528a122e45ab2808323ee471e9a86797_1a528a122e45ab2808323ee471e9a86797" prot="public" static="no">
        <type><ref refid="d7/d7a/a00016" kindref="compound">Exception</ref></type>
        <definition>using mc::gfx::ShaderError = typedef Exception</definition>
        <argsstring></argsstring>
        <name>ShaderError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/GraphicsConstants.h" line="22" column="1" bodyfile="include/MACE/Graphics/GraphicsConstants.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/dec/a00080_aa8d831470fc2c8d0246e9d04a3d68f5f_1aa8d831470fc2c8d0246e9d04a3d68f5f" prot="public" static="no">
        <type>std::deque&lt; std::pair&lt; <ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref>, <ref refid="d1/d2b/a00018" kindref="compound">GraphicsEntity</ref> * &gt;&gt;</type>
        <definition>using mc::gfx::RenderQueue = typedef std::deque&lt;std::pair&lt;Index, GraphicsEntity*&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>RenderQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="27" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/dec/a00080_a76c7ba19bf08d8dbfefd32eebda71744_1a76c7ba19bf08d8dbfefd32eebda71744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::checkGLError</definition>
        <argsstring>()</argsstring>
        <name>checkGLError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/GraphicsConstants.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/dec/a00080_a03d92c41bbd9a64c1706292fe4c3c217_1a03d92c41bbd9a64c1706292fe4c3c217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::throwShaderError</definition>
        <argsstring>(const Index &amp;shaderId, const Enum &amp;type, const std::string &amp;message)</argsstring>
        <name>throwShaderError</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;</type>
          <declname>shaderId</declname>
        </param>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/GraphicsConstants.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="da/dec/a00080_a15996c355485bf87f30f008457a54ca2_1a15996c355485bf87f30f008457a54ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::gfx::throwShaderError</definition>
        <argsstring>(const Index &amp;shaderId, const Enum &amp;type)</argsstring>
        <name>throwShaderError</name>
        <param>
          <type>const <ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref> &amp;</type>
          <declname>shaderId</declname>
        </param>
        <param>
          <type>const <ref refid="d1/d51/a00079_a566eb8c7b00951108f89aef1bd02d493_1a566eb8c7b00951108f89aef1bd02d493" kindref="member">Enum</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/GraphicsConstants.h" line="35" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Namespace containing classes used for Graphics in MACE. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/MACE/Graphics/Buffer.h" line="20" column="1"/>
  </compounddef>
</doxygen>
