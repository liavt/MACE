<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="dd/d32/a00041" kind="class" language="C++" prot="public">
    <compoundname>mc::gfx::RenderProtocol</compoundname>
    <basecompoundref refid="db/d3a/a00040" prot="public" virt="non-virtual">mc::gfx::RenderImpl</basecompoundref>
    <includes refid="d9/db3/a00066" local="no">Renderer.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dd/d32/a00041_acffe593147fc5558d65a1e495c1e4de1_1acffe593147fc5558d65a1e495c1e4de1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; T &gt;::resize</definition>
        <argsstring>(const Size, const Size) override</argsstring>
        <name>resize</name>
        <reimplements refid="db/d3a/a00040_a6bd329f3d60c5ea961bda5f29c3231a8_1a6bd329f3d60c5ea961bda5f29c3231a8">resize</reimplements>
        <param>
          <type>const <ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        </param>
        <param>
          <type>const <ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="175" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_af4126f9f608c452128d5ae4d310cba54_1af4126f9f608c452128d5ae4d310cba54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; T &gt;::init</definition>
        <argsstring>(const Size, const Size) override</argsstring>
        <name>init</name>
        <reimplements refid="db/d3a/a00040_a4fd8e0a36eb1e0e32b2966c68a9d1f2f_1a4fd8e0a36eb1e0e32b2966c68a9d1f2f">init</reimplements>
        <param>
          <type>const <ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        </param>
        <param>
          <type>const <ref refid="d9/df8/a00096_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="177" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_af3478fe346e01afb2908d6f7e34e5674_1af3478fe346e01afb2908d6f7e34e5674" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; T &gt;::initEntity</definition>
        <argsstring>(GraphicsEntity *) override</argsstring>
        <name>initEntity</name>
        <reimplements refid="db/d3a/a00040_aa4cc0dfa80d8fa019a2dfc673c1b5747_1aa4cc0dfa80d8fa019a2dfc673c1b5747">initEntity</reimplements>
        <param>
          <type><ref refid="d7/de0/a00022" kindref="compound">GraphicsEntity</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="178" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a90100403ef1d81460b9b24abe90e03ba_1a90100403ef1d81460b9b24abe90e03ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; T &gt;::setUp</definition>
        <argsstring>(os::WindowModule *, RenderQueue *) override</argsstring>
        <name>setUp</name>
        <reimplements refid="db/d3a/a00040_a09de296a552820e6739bc9227e57b56d_1a09de296a552820e6739bc9227e57b56d">setUp</reimplements>
        <param>
          <type><ref refid="d9/d2e/a00056" kindref="compound">os::WindowModule</ref> *</type>
        </param>
        <param>
          <type><ref refid="d1/d44/a00098_aa8d831470fc2c8d0246e9d04a3d68f5f_1aa8d831470fc2c8d0246e9d04a3d68f5f" kindref="member">RenderQueue</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="180" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_ae710e7f3e338567c02efb264f6cbd5dd_1ae710e7f3e338567c02efb264f6cbd5dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; T &gt;::renderEntity</definition>
        <argsstring>(os::WindowModule *, GraphicsEntity *) override</argsstring>
        <name>renderEntity</name>
        <reimplements refid="db/d3a/a00040_a9f00ce6cfcc7306ad6b69b182ab2928f_1a9f00ce6cfcc7306ad6b69b182ab2928f">renderEntity</reimplements>
        <param>
          <type><ref refid="d9/d2e/a00056" kindref="compound">os::WindowModule</ref> *</type>
        </param>
        <param>
          <type><ref refid="d7/de0/a00022" kindref="compound">GraphicsEntity</ref> *</type>
          <declname>entity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="181" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a62069cbbaddd980bb02daceafe8c4538_1a62069cbbaddd980bb02daceafe8c4538" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; T &gt;::tearDown</definition>
        <argsstring>(os::WindowModule *, RenderQueue *) override</argsstring>
        <name>tearDown</name>
        <reimplements refid="db/d3a/a00040_acbce840815446695a44776cb15537b2e_1acbce840815446695a44776cb15537b2e">tearDown</reimplements>
        <param>
          <type><ref refid="d9/d2e/a00056" kindref="compound">os::WindowModule</ref> *</type>
        </param>
        <param>
          <type><ref refid="d1/d44/a00098_aa8d831470fc2c8d0246e9d04a3d68f5f_1aa8d831470fc2c8d0246e9d04a3d68f5f" kindref="member">RenderQueue</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="182" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a2e9c06972639b6e5f6182302acc259ec_1a2e9c06972639b6e5f6182302acc259ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; T &gt;::cleanEntity</definition>
        <argsstring>(GraphicsEntity *) override</argsstring>
        <name>cleanEntity</name>
        <reimplements refid="db/d3a/a00040_a992cd784efc111151a4bb6c699821e37_1a992cd784efc111151a4bb6c699821e37">cleanEntity</reimplements>
        <param>
          <type><ref refid="d7/de0/a00022" kindref="compound">GraphicsEntity</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="184" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="184" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a341f82638122be6c2a693ecdf5c3e6c8_1a341f82638122be6c2a693ecdf5c3e6c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; T &gt;::destroy</definition>
        <argsstring>() override</argsstring>
        <name>destroy</name>
        <reimplements refid="db/d3a/a00040_aa45e3ec6a2548c4dcb4bdbffa19fe0ee_1aa45e3ec6a2548c4dcb4bdbffa19fe0ee">destroy</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="186" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a15a1ba89268e1a29266e9c75d719f75e_1a15a1ba89268e1a29266e9c75d719f75e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void mc::gfx::RenderProtocol&lt; T &gt;::destroyEntity</definition>
        <argsstring>(GraphicsEntity *) override</argsstring>
        <name>destroyEntity</name>
        <reimplements refid="db/d3a/a00040_a8865aa2228ff0bc7479dfd0126a1d3b9_1a8865aa2228ff0bc7479dfd0126a1d3b9">destroyEntity</reimplements>
        <param>
          <type><ref refid="d7/de0/a00022" kindref="compound">GraphicsEntity</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Graphics/Renderer.h" line="187" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="187" bodyend="187"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>This should only be used internally or by advanced users. Misuse can cause undefined behavior </para></simplesect>
<simplesect kind="attention"><para>This uses an OpenGL function and must be called in a thread with an OpenGL context. Otherwise, an error will be thrown. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>GL_INVALID_OPERATION</parametername>
</parameternamelist>
<parameterdescription>
<para>If the current thread does not have an OpenGL context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="602">
        <label>mc::gfx::RenderImpl</label>
        <link refid="db/d3a/a00040"/>
      </node>
      <node id="601">
        <label>mc::gfx::RenderProtocol&lt; T &gt;</label>
        <link refid="dd/d32/a00041"/>
        <childnode refid="602" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="604">
        <label>mc::gfx::RenderImpl</label>
        <link refid="db/d3a/a00040"/>
      </node>
      <node id="603">
        <label>mc::gfx::RenderProtocol&lt; T &gt;</label>
        <link refid="dd/d32/a00041"/>
        <childnode refid="604" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Graphics/Renderer.h" line="171" column="1" bodyfile="include/MACE/Graphics/Renderer.h" bodystart="171" bodyend="188"/>
    <listofallmembers>
      <member refid="dd/d32/a00041_a2e9c06972639b6e5f6182302acc259ec_1a2e9c06972639b6e5f6182302acc259ec" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol</scope><name>cleanEntity</name></member>
      <member refid="dd/d32/a00041_a341f82638122be6c2a693ecdf5c3e6c8_1a341f82638122be6c2a693ecdf5c3e6c8" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol</scope><name>destroy</name></member>
      <member refid="dd/d32/a00041_a15a1ba89268e1a29266e9c75d719f75e_1a15a1ba89268e1a29266e9c75d719f75e" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol</scope><name>destroyEntity</name></member>
      <member refid="dd/d32/a00041_af4126f9f608c452128d5ae4d310cba54_1af4126f9f608c452128d5ae4d310cba54" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol</scope><name>init</name></member>
      <member refid="dd/d32/a00041_af3478fe346e01afb2908d6f7e34e5674_1af3478fe346e01afb2908d6f7e34e5674" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol</scope><name>initEntity</name></member>
      <member refid="dd/d32/a00041_ae710e7f3e338567c02efb264f6cbd5dd_1ae710e7f3e338567c02efb264f6cbd5dd" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol</scope><name>renderEntity</name></member>
      <member refid="db/d3a/a00040_ab9f74038bf9e1c44b26eebc57c3a9b47_1ab9f74038bf9e1c44b26eebc57c3a9b47" prot="public" virt="non-virtual"><scope>mc::gfx::RenderProtocol</scope><name>RenderImpl</name></member>
      <member refid="dd/d32/a00041_acffe593147fc5558d65a1e495c1e4de1_1acffe593147fc5558d65a1e495c1e4de1" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol</scope><name>resize</name></member>
      <member refid="dd/d32/a00041_a90100403ef1d81460b9b24abe90e03ba_1a90100403ef1d81460b9b24abe90e03ba" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol</scope><name>setUp</name></member>
      <member refid="dd/d32/a00041_a62069cbbaddd980bb02daceafe8c4538_1a62069cbbaddd980bb02daceafe8c4538" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol</scope><name>tearDown</name></member>
      <member refid="db/d3a/a00040_a1a83129c78f067dc116964ee24e15fb2_1a1a83129c78f067dc116964ee24e15fb2" prot="public" virt="virtual"><scope>mc::gfx::RenderProtocol</scope><name>~RenderImpl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
