<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="dd/d32/a00041" kind="struct" language="C++" prot="public">
    <compoundname>mc::Vector</compoundname>
    <includes refid="d9/da5/a00075" local="no">Vector.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type><ref refid="d1/d51/a00079_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="dd/d32/a00041_aa8f8d6fd2301a3407b9e6dd60e9d7ea0_1aa8f8d6fd2301a3407b9e6dd60e9d7ea0" prot="protected" static="no" mutable="no">
        <type>std::array&lt; T, N &gt;</type>
        <definition>std::array&lt;T, N&gt; mc::Vector&lt; T, N &gt;::content</definition>
        <argsstring></argsstring>
        <name>content</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="536" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="536" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dd/d32/a00041_a7c2fa3ae75ebb6d155aa3e3aa140ce09_1a7c2fa3ae75ebb6d155aa3e3aa140ce09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mc::Vector&lt; T, N &gt;::Vector</definition>
        <argsstring>()</argsstring>
        <name>Vector</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Constructs an empty <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="81" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a417fb70d18a6f7c59b42c451dd396189_1a417fb70d18a6f7c59b42c451dd396189" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mc::Vector&lt; T, N &gt;::Vector</definition>
        <argsstring>(const T arr[N])</argsstring>
        <name>Vector</name>
        <param>
          <type>const T</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Consructs a <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> from the contents of an array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>An equally-sized array whose contents will be filled into a <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="89" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a417ea1abf7c631482d80c04b05003bb2_1a417ea1abf7c631482d80c04b05003bb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mc::Vector&lt; T, N &gt;::Vector</definition>
        <argsstring>(const std::array&lt; T, N &gt; &amp;contents)</argsstring>
        <name>Vector</name>
        <param>
          <type>const std::array&lt; T, N &gt; &amp;</type>
          <declname>contents</declname>
        </param>
        <briefdescription>
<para>Consructs a <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> from the contents of an <computeroutput>std::array</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>contents</parametername>
</parameternamelist>
<parameterdescription>
<para>An equally-sized <computeroutput>std::array</computeroutput> whose contents will be filled into a <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="99" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_ad81a516cd25fe7e71ae9a1a01c8e74c5_1ad81a516cd25fe7e71ae9a1a01c8e74c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mc::Vector&lt; T, N &gt;::Vector</definition>
        <argsstring>(const std::initializer_list&lt; T &gt; args)</argsstring>
        <name>Vector</name>
        <param>
          <type>const std::initializer_list&lt; T &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="103" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="103" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a9cd50db0b1a697ff4368a1072e99182d_1a9cd50db0b1a697ff4368a1072e99182d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mc::Vector&lt; T, N &gt;::Vector</definition>
        <argsstring>(const Vector &amp;obj)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Copies the contents of a <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> into a new <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> to clone </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="117" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_ad8649fb50d1cebdc4f7e2886f445560a_1ad8649fb50d1cebdc4f7e2886f445560a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::array&lt; T, N &gt; &amp;</type>
        <definition>std::array&lt; T, N&gt;&amp; mc::Vector&lt; T, N &gt;::getContents</definition>
        <argsstring>()</argsstring>
        <name>getContents</name>
        <briefdescription>
<para>Retrieves the contents of this <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An <computeroutput>std::array</computeroutput> of this <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> contents </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a2e674c851be8cf10808c86895e9ca86f_1a2e674c851be8cf10808c86895e9ca86f" kindref="member">setContents(std::array&lt;T,N&gt;)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="124" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="124" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_aac3af5465ade1ef1c7b41b579fb6099e_1aac3af5465ade1ef1c7b41b579fb6099e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::array&lt; T, N &gt; &amp;</type>
        <definition>const std::array&lt; T, N&gt;&amp; mc::Vector&lt; T, N &gt;::getContents</definition>
        <argsstring>() const </argsstring>
        <name>getContents</name>
        <briefdescription>
<para><computeroutput>const</computeroutput> version of <computeroutput><ref refid="dd/d32/a00041_ad8649fb50d1cebdc4f7e2886f445560a_1ad8649fb50d1cebdc4f7e2886f445560a" kindref="member">getContents()</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <computeroutput>const std::array</computeroutput> of this <computeroutput>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> contents </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a2e674c851be8cf10808c86895e9ca86f_1a2e674c851be8cf10808c86895e9ca86f" kindref="member">setContents(std::array&lt;T,N&gt;)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="133" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a2e674c851be8cf10808c86895e9ca86f_1a2e674c851be8cf10808c86895e9ca86f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; T, N &gt;::setContents</definition>
        <argsstring>(const std::array&lt; T, N &gt; contents)</argsstring>
        <name>setContents</name>
        <param>
          <type>const std::array&lt; T, N &gt;</type>
          <declname>contents</declname>
        </param>
        <briefdescription>
<para>Copies the contents of an <computeroutput>std::array</computeroutput> into this <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>contents</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>std::array</computeroutput> whose data will be dumped into this <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="140" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a57b55a629453b1d1e80d81c56269e833_1a57b55a629453b1d1e80d81c56269e833" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; T, N &gt;::setContents</definition>
        <argsstring>(const T arr[N])</argsstring>
        <name>setContents</name>
        <param>
          <type>const T</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Copies the contents of an array into this <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>An equally sized array whose contents will cloned in this <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="147" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="147" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a6f08e4cabe236a4f317bc2b0f8f3d96c_1a6f08e4cabe236a4f317bc2b0f8f3d96c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="d1/d51/a00079_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        <definition>constexpr Size mc::Vector&lt; T, N &gt;::size</definition>
        <argsstring>() const  noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Retrieves how many elements this <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> holds. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>How large this <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> is </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="157" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a699b2e331ade356257fb185280019b87_1a699b2e331ade356257fb185280019b87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; mc::Vector&lt; T, N &gt;::get</definition>
        <argsstring>(Index i)</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get the value at a position. </para>        </briefdescription>
        <detaileddescription>
<para>Slower than <computeroutput>operator[]</computeroutput> because it does bounds checking. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>Index</computeroutput> of the requested data, zero-indexed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value located at <computeroutput>i</computeroutput> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>i</computeroutput> is greater than <computeroutput><ref refid="dd/d32/a00041_a6f08e4cabe236a4f317bc2b0f8f3d96c_1a6f08e4cabe236a4f317bc2b0f8f3d96c" kindref="member">size()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>i</computeroutput> is less than 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[](Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="170" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a7595892f896b87fbb58d2c36be3389a8_1a7595892f896b87fbb58d2c36be3389a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; mc::Vector&lt; T, N &gt;::get</definition>
        <argsstring>(Index i) const </argsstring>
        <name>get</name>
        <param>
          <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para><computeroutput>const</computeroutput> version of <computeroutput><ref refid="dd/d32/a00041_a699b2e331ade356257fb185280019b87_1a699b2e331ade356257fb185280019b87" kindref="member">get(Index)</ref>,</computeroutput> in case a <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> is declared <computeroutput>const</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>Index</computeroutput> of the requested data, zero-indexed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <computeroutput>const</computeroutput> value located at <computeroutput>i</computeroutput> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>i</computeroutput> is greater than <computeroutput><ref refid="dd/d32/a00041_a6f08e4cabe236a4f317bc2b0f8f3d96c_1a6f08e4cabe236a4f317bc2b0f8f3d96c" kindref="member">size()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>i</computeroutput> is less than 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[](Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="182" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a4e214d776fd7b7e4b163c0ebb23ec3c4_1a4e214d776fd7b7e4b163c0ebb23ec3c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; T, N &gt;::set</definition>
        <argsstring>(Index position, T value)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set data at a certain position to equal a new value. </para>        </briefdescription>
        <detaileddescription>
<para>Slower than <computeroutput>operator[]</computeroutput> because it does bounds checking. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to put the new value, zero indexed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>What to put in <computeroutput>position</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>i</computeroutput> is greater than <computeroutput><ref refid="dd/d32/a00041_a6f08e4cabe236a4f317bc2b0f8f3d96c_1a6f08e4cabe236a4f317bc2b0f8f3d96c" kindref="member">size()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>i</computeroutput> is less than 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[](Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="194" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_abb14d1d219fbd5cc3c9a6c50e4334986_1abb14d1d219fbd5cc3c9a6c50e4334986" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* mc::Vector&lt; T, N &gt;::flatten</definition>
        <argsstring>(T arr[N]) const </argsstring>
        <name>flatten</name>
        <param>
          <type>T</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Creates an array with the data of this <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput>, in O(N) time. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to <computeroutput>arr</computeroutput> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>The array to fill </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="204" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="204" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; mc::Vector&lt; T, N &gt;::operator[]</definition>
        <argsstring>(Index i)</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Retrieves the content at a certain <computeroutput>Index</computeroutput>, zero indexed. </para>        </briefdescription>
        <detaileddescription>
<para>This operator is faster than <computeroutput><ref refid="dd/d32/a00041_a699b2e331ade356257fb185280019b87_1a699b2e331ade356257fb185280019b87" kindref="member">get(Index)</ref>,</computeroutput> as it doesn&apos;t do bounds checking. However, accessing an invalid index will be undefined. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to retrieve the data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The data at <computeroutput>i</computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_af56e7800e947754a7c7e508301ee3f9a_1af56e7800e947754a7c7e508301ee3f9a" kindref="member">operator[](Index) const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="217" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="217" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_af56e7800e947754a7c7e508301ee3f9a_1af56e7800e947754a7c7e508301ee3f9a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; mc::Vector&lt; T, N &gt;::operator[]</definition>
        <argsstring>(Index i) const </argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para><computeroutput>const</computeroutput> version of <computeroutput><ref refid="dd/d32/a00041_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[](Index)</ref></computeroutput> used if a <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> is declared <computeroutput>const</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to retrieve the data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The data at <computeroutput>i</computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[](Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="226" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a7eb2384ab474fa1a0ba5171a49139e5c_1a7eb2384ab474fa1a0ba5171a49139e5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>T &amp;</type>
        <definition>virtual T&amp; mc::Vector&lt; T, N &gt;::operator()</definition>
        <argsstring>(Index i)</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Retrieves content at a certain <computeroutput>Index</computeroutput>, not zero indexed. </para>        </briefdescription>
        <detaileddescription>
<para>Equal to<programlisting><codeline><highlight class="normal">vector[i-1]</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Not zero indexed <computeroutput>Index</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value at <computeroutput>i-1</computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" kindref="member">operator[](Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="240" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="240" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a572904b63c9e2d35ca6625ad2f2b1627_1a572904b63c9e2d35ca6625ad2f2b1627" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; mc::Vector&lt; T, N &gt;::operator()</definition>
        <argsstring>(Index i) const </argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="d1/d51/a00079_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para><computeroutput>const</computeroutput> version of <computeroutput><ref refid="dd/d32/a00041_a7eb2384ab474fa1a0ba5171a49139e5c_1a7eb2384ab474fa1a0ba5171a49139e5c" kindref="member">operator()(Index)</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Not zero indexed <computeroutput>Index</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value at <computeroutput>i-1</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="249" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a41f3ca26b2d43a91797df7499afcc5c5_1a41f3ca26b2d43a91797df7499afcc5c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></type>
        <definition>Vector mc::Vector&lt; T, N &gt;::operator+</definition>
        <argsstring>(const Vector&lt; T, N &gt; &amp;right) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Adds 2 <computeroutput>Vectors</computeroutput> together. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in o(N) time</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> that was created by adding 2 <computeroutput>Vectors</computeroutput> together </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> <ref refid="d2/db1/a00070" kindref="compound">math</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="262" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="262" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_ac486a0798fd812967cb543c23bf60e3b_1ac486a0798fd812967cb543c23bf60e3b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></type>
        <definition>Vector mc::Vector&lt; T, N &gt;::operator-</definition>
        <argsstring>(const Vector&lt; T, N &gt; &amp;right) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Subtracts 2 <computeroutput>Vectors</computeroutput> together. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in o(N) time</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> that was created by subtracting 2 <computeroutput>Vectors</computeroutput> together </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> <ref refid="d2/db1/a00070" kindref="compound">math</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="278" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="278" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a743ef1fe1d428bd3fabc37adb783aca9_1a743ef1fe1d428bd3fabc37adb783aca9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></type>
        <definition>Vector mc::Vector&lt; T, N &gt;::operator*</definition>
        <argsstring>(const Vector&lt; T, 3 &gt; &amp;right) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, 3 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Calculates the cross product of 2 <computeroutput>Vectors</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cross product </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> <ref refid="d2/db1/a00070" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para>cross(const Vector&amp;, const Vector&amp;) </para></simplesect>
<simplesect kind="see"><para>operator*(const T) </para></simplesect>
<simplesect kind="see"><para>operator%(const Vector&amp;) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="295" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="295" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a44697f39e17748dcc4379a714216618b_1a44697f39e17748dcc4379a714216618b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T mc::Vector&lt; T, N &gt;::operator%</definition>
        <argsstring>(const Vector&lt; T, 3 &gt; &amp;right) const </argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, 3 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Calculates the dot product of 2 <computeroutput>Vectors</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para>This is done in o(N) time</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dot product </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041" kindref="compound">Vector</ref> for an explanation of <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> <ref refid="d2/db1/a00070" kindref="compound">math</ref> </para></simplesect>
<simplesect kind="see"><para>cross(const Vector&amp;, const Vector&amp;) </para></simplesect>
<simplesect kind="see"><para>operator*(const T) </para></simplesect>
<simplesect kind="see"><para>operator*(const Vector&amp;) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="326" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="326" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a073741c6651aad098b8ee5adea09eaa4_1a073741c6651aad098b8ee5adea09eaa4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></type>
        <definition>Vector mc::Vector&lt; T, N &gt;::operator*</definition>
        <argsstring>(const T scalar) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const T</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Multiplies a <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> by a scalar. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>What to multiply this <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> by </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> scaled. </para></simplesect>
<simplesect kind="see"><para>operator*(const Vector&amp;) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="343" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="343" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_ab8095bda1d18b74aafc434a0f1b2bcd4_1ab8095bda1d18b74aafc434a0f1b2bcd4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></type>
        <definition>Vector mc::Vector&lt; T, N &gt;::operator/</definition>
        <argsstring>(const T scalar) const </argsstring>
        <name>operator/</name>
        <param>
          <type>const T</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Divides a <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> by a scalar. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>What to divided this <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> by </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> scaled. </para></simplesect>
<simplesect kind="see"><para>operator*(const T&amp;) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="359" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="359" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_add67c85219f90da24ad00508be384ab4_1add67c85219f90da24ad00508be384ab4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; T, N &gt;::operator+=</definition>
        <argsstring>(const Vector&lt; T, N &gt; &amp;right)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Adds a <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> to this one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a41f3ca26b2d43a91797df7499afcc5c5_1a41f3ca26b2d43a91797df7499afcc5c5" kindref="member">operator+(const Vector&lt;T,N&gt;&amp;) const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="372" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="372" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a4a0aee255e45235c029a51cad50b4f2c_1a4a0aee255e45235c029a51cad50b4f2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; T, N &gt;::operator-=</definition>
        <argsstring>(const Vector&lt; T, N &gt; &amp;right)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Subtracts a <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> from this one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> to subtract </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_ac486a0798fd812967cb543c23bf60e3b_1ac486a0798fd812967cb543c23bf60e3b" kindref="member">operator-(const Vector&lt;T,N&gt;&amp;) const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="381" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="381" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a2727025232d2c2c491b871299babcdbc_1a2727025232d2c2c491b871299babcdbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; T, N &gt;::operator*=</definition>
        <argsstring>(const Vector&lt; T, N &gt; &amp;right)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Multiplies a <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> by this one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> to multiply </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a41f3ca26b2d43a91797df7499afcc5c5_1a41f3ca26b2d43a91797df7499afcc5c5" kindref="member">operator+(const Vector&lt;T,N&gt;&amp;) const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="390" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="390" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_aaa157b6d3969ccd93e40efd9c6656333_1aaa157b6d3969ccd93e40efd9c6656333" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; T, N &gt;::operator/=</definition>
        <argsstring>(const Vector&lt; T, N &gt; &amp;right)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Divides a <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> by this one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> to divide </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a41f3ca26b2d43a91797df7499afcc5c5_1a41f3ca26b2d43a91797df7499afcc5c5" kindref="member">operator+(const Vector&lt;T,N&gt;&amp;) const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="399" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="399" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_af95e59326592e258341dfd2a02d628ff_1af95e59326592e258341dfd2a02d628ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mc::Vector&lt; T, N &gt;::operator*=</definition>
        <argsstring>(const T &amp;scalar)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const T &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Scales this <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>How much to scale </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a743ef1fe1d428bd3fabc37adb783aca9_1a743ef1fe1d428bd3fabc37adb783aca9" kindref="member">operator*(const Vector&lt;T,3&gt;&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a073741c6651aad098b8ee5adea09eaa4_1a073741c6651aad098b8ee5adea09eaa4" kindref="member">operator*(const T) const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="408" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="408" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a4ea0c891100c07ca827fb2b63ff4ab40_1a4ea0c891100c07ca827fb2b63ff4ab40" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::Vector&lt; T, N &gt;::operator==</definition>
        <argsstring>(const Vector&lt; T, N &gt; &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares whether 2 <computeroutput>Vectors</computeroutput> have the same values. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> to compare <computeroutput>this</computeroutput> against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the 2 are equal, <computeroutput>false</computeroutput> otherwise </para></simplesect>
<simplesect kind="see"><para>operator!=(const Vector&lt;T,N&gt;) const </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a3cf2432f2b843c9fd3a90ab73e600ee0_1a3cf2432f2b843c9fd3a90ab73e600ee0" kindref="member">operator&lt;(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_af3d351c9d80e71ce467749dd6587b49f_1af3d351c9d80e71ce467749dd6587b49f" kindref="member">operator&gt;=(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a796b41e71ce3fec49a5b1891c13290ee_1a796b41e71ce3fec49a5b1891c13290ee" kindref="member">operator&lt;=(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_afd548f2844ce721daa85501dedc8fd6f_1afd548f2844ce721daa85501dedc8fd6f" kindref="member">operator&gt;(const Vector&amp;) const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="424" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="424" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a4be78cbc5b6bcbe9488f5c3cd8ffa2e9_1a4be78cbc5b6bcbe9488f5c3cd8ffa2e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::Vector&lt; T, N &gt;::operator!=</definition>
        <argsstring>(const Vector&lt; T, N &gt; &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares whether 2 <computeroutput>Vectors</computeroutput> don&apos;t have the same values. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> to compare <computeroutput>this</computeroutput> against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the 2 are not equal, <computeroutput>false</computeroutput> otherwise </para></simplesect>
<simplesect kind="see"><para>operator==(const Vector&lt;T,N&gt;) const </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a3cf2432f2b843c9fd3a90ab73e600ee0_1a3cf2432f2b843c9fd3a90ab73e600ee0" kindref="member">operator&lt;(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_af3d351c9d80e71ce467749dd6587b49f_1af3d351c9d80e71ce467749dd6587b49f" kindref="member">operator&gt;=(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a796b41e71ce3fec49a5b1891c13290ee_1a796b41e71ce3fec49a5b1891c13290ee" kindref="member">operator&lt;=(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_afd548f2844ce721daa85501dedc8fd6f_1afd548f2844ce721daa85501dedc8fd6f" kindref="member">operator&gt;(const Vector&amp;) const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="445" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="445" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_afd548f2844ce721daa85501dedc8fd6f_1afd548f2844ce721daa85501dedc8fd6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::Vector&lt; T, N &gt;::operator&gt;</definition>
        <argsstring>(const Vector&lt; T, N &gt; &amp;other) const </argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares the <computeroutput>&gt;</computeroutput> operator on 2 <computeroutput>Vectors</computeroutput> elements. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> to compare against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the <computeroutput>&gt;</computeroutput> operator on each element </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a3cf2432f2b843c9fd3a90ab73e600ee0_1a3cf2432f2b843c9fd3a90ab73e600ee0" kindref="member">operator&lt;(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_af3d351c9d80e71ce467749dd6587b49f_1af3d351c9d80e71ce467749dd6587b49f" kindref="member">operator&gt;=(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a796b41e71ce3fec49a5b1891c13290ee_1a796b41e71ce3fec49a5b1891c13290ee" kindref="member">operator&lt;=(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a4ea0c891100c07ca827fb2b63ff4ab40_1a4ea0c891100c07ca827fb2b63ff4ab40" kindref="member">operator==(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a4be78cbc5b6bcbe9488f5c3cd8ffa2e9_1a4be78cbc5b6bcbe9488f5c3cd8ffa2e9" kindref="member">operator!=(const Vector&amp;) const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="461" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="461" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_af3d351c9d80e71ce467749dd6587b49f_1af3d351c9d80e71ce467749dd6587b49f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::Vector&lt; T, N &gt;::operator&gt;=</definition>
        <argsstring>(const Vector&lt; T, N &gt; &amp;other) const </argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares the <computeroutput>&gt;=</computeroutput> operator on 2 <computeroutput>Vectors</computeroutput> elements. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> to compare against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the <computeroutput>&gt;=</computeroutput> operator on each element </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a3cf2432f2b843c9fd3a90ab73e600ee0_1a3cf2432f2b843c9fd3a90ab73e600ee0" kindref="member">operator&lt;(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_afd548f2844ce721daa85501dedc8fd6f_1afd548f2844ce721daa85501dedc8fd6f" kindref="member">operator&gt;(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a796b41e71ce3fec49a5b1891c13290ee_1a796b41e71ce3fec49a5b1891c13290ee" kindref="member">operator&lt;=(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a4ea0c891100c07ca827fb2b63ff4ab40_1a4ea0c891100c07ca827fb2b63ff4ab40" kindref="member">operator==(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a4be78cbc5b6bcbe9488f5c3cd8ffa2e9_1a4be78cbc5b6bcbe9488f5c3cd8ffa2e9" kindref="member">operator!=(const Vector&amp;) const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="482" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="482" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a3cf2432f2b843c9fd3a90ab73e600ee0_1a3cf2432f2b843c9fd3a90ab73e600ee0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::Vector&lt; T, N &gt;::operator&lt;</definition>
        <argsstring>(const Vector&lt; T, N &gt; &amp;other) const </argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares the <computeroutput>&lt;</computeroutput> operator on 2 <computeroutput>Vectors</computeroutput> elements. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> to compare against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the <computeroutput>&lt;</computeroutput> operator on each element </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a796b41e71ce3fec49a5b1891c13290ee_1a796b41e71ce3fec49a5b1891c13290ee" kindref="member">operator&lt;=(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_af3d351c9d80e71ce467749dd6587b49f_1af3d351c9d80e71ce467749dd6587b49f" kindref="member">operator&gt;=(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_afd548f2844ce721daa85501dedc8fd6f_1afd548f2844ce721daa85501dedc8fd6f" kindref="member">operator&gt;(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a4ea0c891100c07ca827fb2b63ff4ab40_1a4ea0c891100c07ca827fb2b63ff4ab40" kindref="member">operator==(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a4be78cbc5b6bcbe9488f5c3cd8ffa2e9_1a4be78cbc5b6bcbe9488f5c3cd8ffa2e9" kindref="member">operator!=(const Vector&amp;) const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="498" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="498" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="dd/d32/a00041_a796b41e71ce3fec49a5b1891c13290ee_1a796b41e71ce3fec49a5b1891c13290ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::Vector&lt; T, N &gt;::operator&lt;=</definition>
        <argsstring>(const Vector&lt; T, N &gt; &amp;other) const </argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares the <computeroutput>&lt;=</computeroutput> operator on 2 <computeroutput>Vectors</computeroutput> elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> to compare against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the <computeroutput>&lt;=</computeroutput> operator on each element </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a3cf2432f2b843c9fd3a90ab73e600ee0_1a3cf2432f2b843c9fd3a90ab73e600ee0" kindref="member">operator&lt;(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_af3d351c9d80e71ce467749dd6587b49f_1af3d351c9d80e71ce467749dd6587b49f" kindref="member">operator&gt;=(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_afd548f2844ce721daa85501dedc8fd6f_1afd548f2844ce721daa85501dedc8fd6f" kindref="member">operator&gt;(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a4ea0c891100c07ca827fb2b63ff4ab40_1a4ea0c891100c07ca827fb2b63ff4ab40" kindref="member">operator==(const Vector&amp;) const</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="dd/d32/a00041_a4be78cbc5b6bcbe9488f5c3cd8ffa2e9_1a4be78cbc5b6bcbe9488f5c3cd8ffa2e9" kindref="member">operator!=(const Vector&amp;) const</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="512" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="512" bodyend="514"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="dd/d32/a00041_a0bf7bca5cdd4235d9d8c0707a83bbbf0_1a0bf7bca5cdd4235d9d8c0707a83bbbf0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;output, const Vector&lt; T, N &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const <ref refid="dd/d32/a00041" kindref="compound">Vector</ref>&lt; T, N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Operator used to output to <computeroutput>std::cout</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This is done in O(N) time <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>std::ostream</computeroutput> the <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> was inserted into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> which will be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>output</computeroutput> for chaining </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Utility/Vector.h" line="524" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="524" bodyend="533"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>1-dimensional vector class that supports mathmatical operations. </para>    </briefdescription>
    <detaileddescription>
<para><computeroutput>Vectors</computeroutput> can be added, subtracted, and multiplied. by other <computeroutput>Vectors</computeroutput> of equal width. Additionally, they can also be operated by a <computeroutput><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref></computeroutput> of equal width. <computeroutput>Vectors</computeroutput> CANNOT be divided. </para><para><computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> math is done by adding the adjacent values of both vectors together. For example, we want to add these 2 <computeroutput>Vectors</computeroutput> together: <programlisting><codeline><highlight class="normal">left<sp/>=<sp/>[55,42,-12,23]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">right<sp/>=<sp/>[3,7,5,9]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">result<sp/>=<sp/>left<sp/>+<sp/>right</highlight></codeline>
</programlisting> The result would be every value across from eachother added together, as so: <programlisting><codeline><highlight class="normal">result<sp/>=<sp/>[left[1]+right[1],left[2]+right[2],left[3]+right[3],left[4]+right[4]]</highlight></codeline>
</programlisting> or <programlisting><codeline><highlight class="normal">result<sp/>=<sp/>[58,49,-7,32]</highlight></codeline>
</programlisting> Multiplication, and subtraction are the same concept. To do math with MACE, all you need to do is to use the mathmatical operators. </para><para>Examples: <programlisting><codeline><highlight class="normal">Vector&lt;int,3&gt;<sp/>vector<sp/>=<sp/>Vector&lt;int,3&gt;();//Create<sp/>a<sp/>Vector<sp/>of<sp/>3<sp/>ints</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>array[]<sp/>=<sp/>{1,2,3};</highlight></codeline>
<codeline><highlight class="normal">vector<sp/>=<sp/>array;//Generate<sp/>Vector<sp/>from<sp/>array</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">vector.get(i);//Get<sp/>int<sp/>from<sp/>position<sp/>i</highlight></codeline>
<codeline><highlight class="normal">vector[i];//get<sp/>int<sp/>from<sp/>position<sp/>i</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">vector.set(i,v);//Set<sp/>int<sp/>at<sp/>position<sp/>i<sp/>to<sp/>equal<sp/>v</highlight></codeline>
<codeline><highlight class="normal">vector[i]=v;//set<sp/>int<sp/>at<sp/>position<sp/>i<sp/>to<sp/>equal<sp/>v</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">vector.size()<sp/>//Get<sp/>how<sp/>many<sp/>elements<sp/>the<sp/>Vector<sp/>has</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//Iterate<sp/>through<sp/>a<sp/>Vector:</highlight></codeline>
<codeline><highlight class="normal">for(Index<sp/>i<sp/>=0;i&lt;vector.size();i++){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>value<sp/>=<sp/>vector[i];</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="see"><para><ref refid="d3/dfe/a00025" kindref="compound">Matrix</ref> </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>what the <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> is made of and calculates with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>width of the <computeroutput><ref refid="dd/d32/a00041" kindref="compound">Vector</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="513">
        <label>mc::Matrix&lt; T, W, H &gt;</label>
        <link refid="d3/dfe/a00025"/>
        <childnode refid="512" relation="public-inheritance">
        </childnode>
      </node>
      <node id="514">
        <label>mc::Vector&lt; float, 3 &gt;</label>
        <link refid="dd/d32/a00041"/>
        <childnode refid="511" relation="template-instance">
          <edgelabel>&lt; float, 3 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="512">
        <label>mc::Vector&lt; MatrixRow&lt; T, H &gt;, W &gt;</label>
        <link refid="dd/d32/a00041"/>
        <childnode refid="511" relation="template-instance">
          <edgelabel>&lt; MatrixRow&lt; T, H &gt;, W &gt;</edgelabel>
        </childnode>
      </node>
      <node id="511">
        <label>mc::Vector&lt; T, N &gt;</label>
        <link refid="dd/d32/a00041"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="517">
        <label>T</label>
      </node>
      <node id="518">
        <label>std::array&lt; T &gt;</label>
        <childnode refid="517" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="516">
        <label>std::array&lt; T, N &gt;</label>
        <childnode refid="517" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="518" relation="template-instance">
          <edgelabel>&lt; T, N &gt;</edgelabel>
        </childnode>
      </node>
      <node id="515">
        <label>mc::Vector&lt; T, N &gt;</label>
        <link refid="dd/d32/a00041"/>
        <childnode refid="516" relation="usage">
          <edgelabel>content</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/MACE/Utility/Vector.h" line="76" column="1" bodyfile="include/MACE/Utility/Vector.h" bodystart="76" bodyend="537"/>
    <listofallmembers>
      <member refid="dd/d32/a00041_aa8f8d6fd2301a3407b9e6dd60e9d7ea0_1aa8f8d6fd2301a3407b9e6dd60e9d7ea0" prot="protected" virt="non-virtual"><scope>mc::Vector</scope><name>content</name></member>
      <member refid="dd/d32/a00041_abb14d1d219fbd5cc3c9a6c50e4334986_1abb14d1d219fbd5cc3c9a6c50e4334986" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>flatten</name></member>
      <member refid="dd/d32/a00041_a699b2e331ade356257fb185280019b87_1a699b2e331ade356257fb185280019b87" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>get</name></member>
      <member refid="dd/d32/a00041_a7595892f896b87fbb58d2c36be3389a8_1a7595892f896b87fbb58d2c36be3389a8" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>get</name></member>
      <member refid="dd/d32/a00041_ad8649fb50d1cebdc4f7e2886f445560a_1ad8649fb50d1cebdc4f7e2886f445560a" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>getContents</name></member>
      <member refid="dd/d32/a00041_aac3af5465ade1ef1c7b41b579fb6099e_1aac3af5465ade1ef1c7b41b579fb6099e" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>getContents</name></member>
      <member refid="dd/d32/a00041_a4be78cbc5b6bcbe9488f5c3cd8ffa2e9_1a4be78cbc5b6bcbe9488f5c3cd8ffa2e9" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator!=</name></member>
      <member refid="dd/d32/a00041_a44697f39e17748dcc4379a714216618b_1a44697f39e17748dcc4379a714216618b" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator%</name></member>
      <member refid="dd/d32/a00041_a7eb2384ab474fa1a0ba5171a49139e5c_1a7eb2384ab474fa1a0ba5171a49139e5c" prot="public" virt="virtual"><scope>mc::Vector</scope><name>operator()</name></member>
      <member refid="dd/d32/a00041_a572904b63c9e2d35ca6625ad2f2b1627_1a572904b63c9e2d35ca6625ad2f2b1627" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator()</name></member>
      <member refid="dd/d32/a00041_a743ef1fe1d428bd3fabc37adb783aca9_1a743ef1fe1d428bd3fabc37adb783aca9" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator*</name></member>
      <member refid="dd/d32/a00041_a073741c6651aad098b8ee5adea09eaa4_1a073741c6651aad098b8ee5adea09eaa4" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator*</name></member>
      <member refid="dd/d32/a00041_a2727025232d2c2c491b871299babcdbc_1a2727025232d2c2c491b871299babcdbc" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator*=</name></member>
      <member refid="dd/d32/a00041_af95e59326592e258341dfd2a02d628ff_1af95e59326592e258341dfd2a02d628ff" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator*=</name></member>
      <member refid="dd/d32/a00041_a41f3ca26b2d43a91797df7499afcc5c5_1a41f3ca26b2d43a91797df7499afcc5c5" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator+</name></member>
      <member refid="dd/d32/a00041_add67c85219f90da24ad00508be384ab4_1add67c85219f90da24ad00508be384ab4" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator+=</name></member>
      <member refid="dd/d32/a00041_ac486a0798fd812967cb543c23bf60e3b_1ac486a0798fd812967cb543c23bf60e3b" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator-</name></member>
      <member refid="dd/d32/a00041_a4a0aee255e45235c029a51cad50b4f2c_1a4a0aee255e45235c029a51cad50b4f2c" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator-=</name></member>
      <member refid="dd/d32/a00041_ab8095bda1d18b74aafc434a0f1b2bcd4_1ab8095bda1d18b74aafc434a0f1b2bcd4" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator/</name></member>
      <member refid="dd/d32/a00041_aaa157b6d3969ccd93e40efd9c6656333_1aaa157b6d3969ccd93e40efd9c6656333" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator/=</name></member>
      <member refid="dd/d32/a00041_a3cf2432f2b843c9fd3a90ab73e600ee0_1a3cf2432f2b843c9fd3a90ab73e600ee0" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator&lt;</name></member>
      <member refid="dd/d32/a00041_a0bf7bca5cdd4235d9d8c0707a83bbbf0_1a0bf7bca5cdd4235d9d8c0707a83bbbf0" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator&lt;&lt;</name></member>
      <member refid="dd/d32/a00041_a796b41e71ce3fec49a5b1891c13290ee_1a796b41e71ce3fec49a5b1891c13290ee" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator&lt;=</name></member>
      <member refid="dd/d32/a00041_a4ea0c891100c07ca827fb2b63ff4ab40_1a4ea0c891100c07ca827fb2b63ff4ab40" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator==</name></member>
      <member refid="dd/d32/a00041_afd548f2844ce721daa85501dedc8fd6f_1afd548f2844ce721daa85501dedc8fd6f" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator&gt;</name></member>
      <member refid="dd/d32/a00041_af3d351c9d80e71ce467749dd6587b49f_1af3d351c9d80e71ce467749dd6587b49f" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator&gt;=</name></member>
      <member refid="dd/d32/a00041_a8955aa9951f184610444f10051699211_1a8955aa9951f184610444f10051699211" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator[]</name></member>
      <member refid="dd/d32/a00041_af56e7800e947754a7c7e508301ee3f9a_1af56e7800e947754a7c7e508301ee3f9a" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>operator[]</name></member>
      <member refid="dd/d32/a00041_a4e214d776fd7b7e4b163c0ebb23ec3c4_1a4e214d776fd7b7e4b163c0ebb23ec3c4" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>set</name></member>
      <member refid="dd/d32/a00041_a2e674c851be8cf10808c86895e9ca86f_1a2e674c851be8cf10808c86895e9ca86f" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>setContents</name></member>
      <member refid="dd/d32/a00041_a57b55a629453b1d1e80d81c56269e833_1a57b55a629453b1d1e80d81c56269e833" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>setContents</name></member>
      <member refid="dd/d32/a00041_a6f08e4cabe236a4f317bc2b0f8f3d96c_1a6f08e4cabe236a4f317bc2b0f8f3d96c" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>size</name></member>
      <member refid="dd/d32/a00041_a7c2fa3ae75ebb6d155aa3e3aa140ce09_1a7c2fa3ae75ebb6d155aa3e3aa140ce09" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>Vector</name></member>
      <member refid="dd/d32/a00041_a417fb70d18a6f7c59b42c451dd396189_1a417fb70d18a6f7c59b42c451dd396189" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>Vector</name></member>
      <member refid="dd/d32/a00041_a417ea1abf7c631482d80c04b05003bb2_1a417ea1abf7c631482d80c04b05003bb2" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>Vector</name></member>
      <member refid="dd/d32/a00041_ad81a516cd25fe7e71ae9a1a01c8e74c5_1ad81a516cd25fe7e71ae9a1a01c8e74c5" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>Vector</name></member>
      <member refid="dd/d32/a00041_a9cd50db0b1a697ff4368a1072e99182d_1a9cd50db0b1a697ff4368a1072e99182d" prot="public" virt="non-virtual"><scope>mc::Vector</scope><name>Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
