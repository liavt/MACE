<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d9/d47/a00129" kind="namespace" language="C++">
    <compoundname>mc::MACE</compoundname>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="d9/d47/a00129_afcfdeec968c968d489dde613ce789ce9_1afcfdeec968c968d489dde613ce789ce9" prot="public" static="no">
        <name>Flags</name>
        <enumvalue id="d9/d47/a00129_afcfdeec968c968d489dde613ce789ce9_1afcfdeec968c968d489dde613ce789ce9a90234a0141370a88d28e7af1a100b1a0" prot="public">
          <name>INIT</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Parameter for <computeroutput><ref refid="d9/d47/a00129_ab3e55fff8ea5b23c91d5131f90269f0f_1ab3e55fff8ea5b23c91d5131f90269f0f" kindref="member">MACE.getFlag(const Byte)</ref></computeroutput>. </para>          </briefdescription>
          <detaileddescription>
<para>Is <computeroutput>true</computeroutput> if <computeroutput><ref refid="d9/d47/a00129_a87ae59d4d843c7d01b12f5dadc36c01a_1a87ae59d4d843c7d01b12f5dadc36c01a" kindref="member">MACE.init()</ref></computeroutput> has been called. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d47/a00129_afcfdeec968c968d489dde613ce789ce9_1afcfdeec968c968d489dde613ce789ce9adcd35d2ecf556a4ef723c2d0562ab9ce" prot="public">
          <name>DESTROYED</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Parameter for <computeroutput><ref refid="d9/d47/a00129_ab3e55fff8ea5b23c91d5131f90269f0f_1ab3e55fff8ea5b23c91d5131f90269f0f" kindref="member">MACE.getFlag(const Byte)</ref></computeroutput>. </para>          </briefdescription>
          <detaileddescription>
<para>Is <computeroutput>true</computeroutput> if <computeroutput><ref refid="d9/d47/a00129_a2d1213f9aab871e066d5dbfb316c3dc2_1a2d1213f9aab871e066d5dbfb316c3dc2" kindref="member">MACE.destroy()</ref></computeroutput> has been called. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="d9/d47/a00129_afcfdeec968c968d489dde613ce789ce9_1afcfdeec968c968d489dde613ce789ce9aec288622b83544edd0572deca59e2e3b" prot="public">
          <name>STOP_REQUESTED</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Parameter for <computeroutput><ref refid="d9/d47/a00129_ab3e55fff8ea5b23c91d5131f90269f0f_1ab3e55fff8ea5b23c91d5131f90269f0f" kindref="member">MACE.getFlag(const Byte)</ref></computeroutput>. </para>          </briefdescription>
          <detaileddescription>
<para>Is <computeroutput>true</computeroutput> if <computeroutput><ref refid="d9/d47/a00129_a9799613939f37db68ef0fc865976a6f9_1a9799613939f37db68ef0fc865976a6f9" kindref="member">MACE.requestStop()</ref></computeroutput> has been called. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="79" column="1" bodyfile="include/MACE/Core/Module.h" bodystart="79" bodyend="92"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d9/d47/a00129_aea0de9ffe89afcdca1b6d0b087e9a009_1aea0de9ffe89afcdca1b6d0b087e9a009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d72/a00124_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
        <definition>Index mc::MACE::addModule</definition>
        <argsstring>(Module &amp;m)</argsstring>
        <name>addModule</name>
        <param>
          <type><ref refid="db/df3/a00034" kindref="compound">Module</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Register a <ref refid="db/df3/a00034" kindref="compound">Module</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Registered <computeroutput>Modules</computeroutput> will have <computeroutput><ref refid="d9/d47/a00129_a857b4aaf5098870c36994338ded0eb88_1a857b4aaf5098870c36994338ded0eb88" kindref="member">update()</ref>, <ref refid="d9/d47/a00129_a87ae59d4d843c7d01b12f5dadc36c01a_1a87ae59d4d843c7d01b12f5dadc36c01a" kindref="member">init()</ref>,</computeroutput> and <computeroutput><ref refid="d9/d47/a00129_a2d1213f9aab871e066d5dbfb316c3dc2_1a2d1213f9aab871e066d5dbfb316c3dc2" kindref="member">destroy()</ref></computeroutput> are respectivaly called when <computeroutput><ref refid="d9/d47/a00129_a857b4aaf5098870c36994338ded0eb88_1a857b4aaf5098870c36994338ded0eb88" kindref="member">MACE.update()</ref>, <ref refid="d9/d47/a00129_a87ae59d4d843c7d01b12f5dadc36c01a_1a87ae59d4d843c7d01b12f5dadc36c01a" kindref="member">MACE.init()</ref>,</computeroutput> and <computeroutput><ref refid="d9/d47/a00129_a2d1213f9aab871e066d5dbfb316c3dc2_1a2d1213f9aab871e066d5dbfb316c3dc2" kindref="member">MACE.destroy()</ref></computeroutput> are called. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref>.</computeroutput> If the <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> referenced leaves scope or gets deallocated, a <computeroutput>read access violation will occur.</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Location of the <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> in the sslBuffer. This index can be used in various other methods. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_a5ad573cde11aef0981ac8efd4d2a9038_1a5ad573cde11aef0981ac8efd4d2a9038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::MACE::removeModule</definition>
        <argsstring>(const Module &amp;m)</argsstring>
        <name>removeModule</name>
        <param>
          <type>const <ref refid="db/df3/a00034" kindref="compound">Module</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Remove a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> by reference. </para>        </briefdescription>
        <detaileddescription>
<para>This is generally more safe than <computeroutput><ref refid="d9/d47/a00129_a295f7353bf36639159a5a17d6db7cdd4_1a295f7353bf36639159a5a17d6db7cdd4" kindref="member">removeModule(std::string)</ref></computeroutput> as this checks by reference, not by name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to <ref refid="db/df3/a00034" kindref="compound">Module</ref> in the sslBuffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ObjectNotFoundInArray</parametername>
</parameternamelist>
<parameterdescription>
<para>if the referenced <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> doesn&apos;t exist. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_a295f7353bf36639159a5a17d6db7cdd4_1a295f7353bf36639159a5a17d6db7cdd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::MACE::removeModule</definition>
        <argsstring>(const std::string module)</argsstring>
        <name>removeModule</name>
        <param>
          <type>const std::string</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>Remove a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> by name. </para>        </briefdescription>
        <detaileddescription>
<para>It will find the <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> based on their <ref refid="db/df3/a00034_aa6d981a55ad5c04a39768e3ddcb0ad49_1aa6d981a55ad5c04a39768e3ddcb0ad49" kindref="member">getName()</ref> function, so if there are multiple <computeroutput>Modules</computeroutput> with the same name, this function may produce unexpected behavior. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>module</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ObjectNotFoundInArray</parametername>
</parameternamelist>
<parameterdescription>
<para>if a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> with the given name doesn&apos;t exist. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_a66a02fa4e3b8565e0ff208dde7acca1f_1a66a02fa4e3b8565e0ff208dde7acca1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::MACE::removeModule</definition>
        <argsstring>(const Index i)</argsstring>
        <name>removeModule</name>
        <param>
          <type>const <ref refid="da/d72/a00124_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Remove a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> by it&apos;s index. </para>        </briefdescription>
        <detaileddescription>
<para>The index is provided from <ref refid="d9/d47/a00129_aea0de9ffe89afcdca1b6d0b087e9a009_1aea0de9ffe89afcdca1b6d0b087e9a009" kindref="member">addModule(Module&amp;)</ref> or <ref refid="" kindref="compound">indexOf(Module&amp;)</ref> <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>i&lt;0</computeroutput> or <computeroutput>i&gt;<ref refid="d9/d47/a00129_ad141f291a6f0cb71214e89963488d0fd_1ad141f291a6f0cb71214e89963488d0fd" kindref="member">numberOfModules()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> to delete </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_a6f45a34fe3200aad38df5807c2fabe60_1a6f45a34fe3200aad38df5807c2fabe60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="db/df3/a00034" kindref="compound">Module</ref> *</type>
        <definition>Module* mc::MACE::getModule</definition>
        <argsstring>(const std::string keyword)</argsstring>
        <name>getModule</name>
        <param>
          <type>const std::string</type>
          <declname>keyword</declname>
        </param>
        <briefdescription>
<para>Retrieve a pointer to a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> with the specified name. </para>        </briefdescription>
        <detaileddescription>
<para>It will find the <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> based on their <ref refid="db/df3/a00034_aa6d981a55ad5c04a39768e3ddcb0ad49_1aa6d981a55ad5c04a39768e3ddcb0ad49" kindref="member">getName()</ref> function, so if there are multiple <computeroutput>Modules</computeroutput> with the same name, this function may produce unexpected behavior. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ObjectNotFoundInArray</parametername>
</parameternamelist>
<parameterdescription>
<para>if there is no <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> with the specified name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> whose <computeroutput>getName()</computeroutput> function returns the specified keyword </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyword</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to look for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d9/d47/a00129_af154f2f1770d5c065e9c82a19ee28989_1af154f2f1770d5c065e9c82a19ee28989" kindref="member">getModule(Index)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_af154f2f1770d5c065e9c82a19ee28989_1af154f2f1770d5c065e9c82a19ee28989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="db/df3/a00034" kindref="compound">Module</ref> *</type>
        <definition>Module* mc::MACE::getModule</definition>
        <argsstring>(const Index i)</argsstring>
        <name>getModule</name>
        <param>
          <type>const <ref refid="da/d72/a00124_a5cd2bc023fe3e9f155cb6baf56f045d9_1a5cd2bc023fe3e9f155cb6baf56f045d9" kindref="member">Index</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Retrieves the <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> at a certain index. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> at the specified location </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid index to a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IndexOutOfBounds</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>i&lt;0</computeroutput> or <computeroutput>i&gt;<ref refid="d9/d47/a00129_ad141f291a6f0cb71214e89963488d0fd_1ad141f291a6f0cb71214e89963488d0fd" kindref="member">numberOfModules()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_aacd35b086ab835aa8ef1b667929a6ac0_1aacd35b086ab835aa8ef1b667929a6ac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::MACE::moduleExists</definition>
        <argsstring>(const std::string module)</argsstring>
        <name>moduleExists</name>
        <param>
          <type>const std::string</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>Checks whether a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> exists via it&apos;s <computeroutput>getName()</computeroutput> function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>module</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to search for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if there is a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> with the specified name, <computeroutput>false</computeroutput> otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_a38d27a4213c37804c8fccbbee9c71d37_1a38d27a4213c37804c8fccbbee9c71d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::MACE::moduleExists</definition>
        <argsstring>(const Module *module)</argsstring>
        <name>moduleExists</name>
        <param>
          <type>const <ref refid="db/df3/a00034" kindref="compound">Module</ref> *</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>Checks whether a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> exists via a pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>module</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> to search for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> exists, <computeroutput>false</computeroutput> otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_ad141f291a6f0cb71214e89963488d0fd_1ad141f291a6f0cb71214e89963488d0fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d72/a00124_ad1c06461067735b3b17e0df612532c4e_1ad1c06461067735b3b17e0df612532c4e" kindref="member">Size</ref></type>
        <definition>Size mc::MACE::numberOfModules</definition>
        <argsstring>()</argsstring>
        <name>numberOfModules</name>
        <briefdescription>
<para>Retrieves the amount of <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> currently being updated by <computeroutput><ref refid="d9/d47/a00129" kindref="compound">MACE</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>Size</computeroutput> of the internal <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> sslBuffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_a734fb5c7243af7ea1dba2dd6e0ec0771_1a734fb5c7243af7ea1dba2dd6e0ec0771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::MACE::indexOf</definition>
        <argsstring>(const Module &amp;m)</argsstring>
        <name>indexOf</name>
        <param>
          <type>const <ref refid="db/df3/a00034" kindref="compound">Module</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Retrieves the location of a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> in the sslBuffer. </para>        </briefdescription>
        <detaileddescription>
<para>Equivalent to calling<programlisting><codeline><highlight class="normal">indexOf(m.getName());</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="db/df3/a00034" kindref="compound">Module</ref> to find the index of. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Location of the <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref>,</computeroutput> or <computeroutput>-1</computeroutput> if it doesnt exist. </para></simplesect>
<simplesect kind="see"><para>indexOf(Module&amp;) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_ab82bf0c2f56023c6cfb4c76397fe3dd1_1ab82bf0c2f56023c6cfb4c76397fe3dd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mc::MACE::indexOf</definition>
        <argsstring>(const std::string name)</argsstring>
        <name>indexOf</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Find a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> with the specified name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to search for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Location of a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> whose <computeroutput>getName()</computeroutput> function returns <computeroutput>name,</computeroutput> or <computeroutput>-1</computeroutput> if wasn&apos;t found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_ac4beb3f22191b1ea322d12e7e02f079b_1ac4beb3f22191b1ea322d12e7e02f079b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::MACE::assertModule</definition>
        <argsstring>(const std::string module, std::string errorMessage)</argsstring>
        <name>assertModule</name>
        <param>
          <type>const std::string</type>
          <declname>module</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>errorMessage</declname>
        </param>
        <briefdescription>
<para>Require that a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> with the specified name exists, or throw an exception. </para>        </briefdescription>
        <detaileddescription>
<para>If your <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> depends on another <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref>,</computeroutput> use this function to require your dependencies. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>module</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to assertion </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errorMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>What to print if the assertion fails </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>AssertionError</parametername>
</parameternamelist>
<parameterdescription>
<para>if there isn&apos;t a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> with the requested name. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_ab658f04ce1ee017dcb1f76c2784ab558_1ab658f04ce1ee017dcb1f76c2784ab558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::MACE::assertModule</definition>
        <argsstring>(const std::string module)</argsstring>
        <name>assertModule</name>
        <param>
          <type>const std::string</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>Overloads <ref refid="d9/d47/a00129_ac4beb3f22191b1ea322d12e7e02f079b_1ac4beb3f22191b1ea322d12e7e02f079b" kindref="member">assertModule(std::string,std::string)</ref> with <computeroutput>errorMessage</computeroutput> being <computeroutput>The specified <ref refid="db/df3/a00034" kindref="compound">Module</ref> does not exist!</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>module</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput> to assertion </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d9/d47/a00129_ac4beb3f22191b1ea322d12e7e02f079b_1ac4beb3f22191b1ea322d12e7e02f079b" kindref="member">assertModule(std::string,std::string)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_a87ae59d4d843c7d01b12f5dadc36c01a_1a87ae59d4d843c7d01b12f5dadc36c01a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::MACE::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
<para>Initializes <ref refid="d9/d47/a00129" kindref="compound">MACE</ref> and calls <ref refid="db/df3/a00034_a854aad3bb8a2f60446fb14aeb28967b6_1a854aad3bb8a2f60446fb14aeb28967b6" kindref="member">init()</ref> on all registered `Modules. </para>        </briefdescription>
        <detaileddescription>
<para>` </para><para>Should be called at the start of the program. <simplesect kind="see"><para><ref refid="d9/d47/a00129_aea0de9ffe89afcdca1b6d0b087e9a009_1aea0de9ffe89afcdca1b6d0b087e9a009" kindref="member">addModule(Module&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d9/d47/a00129" kindref="compound">MACE</ref> for an optimal main loop </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_a857b4aaf5098870c36994338ded0eb88_1a857b4aaf5098870c36994338ded0eb88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::MACE::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <briefdescription>
<para>Update <ref refid="d9/d47/a00129" kindref="compound">MACE</ref> and all <computeroutput>Modules</computeroutput> registered, and checks if a close has been requested. </para>        </briefdescription>
        <detaileddescription>
<para>Should be called in your main loop. <simplesect kind="return"><para><computeroutput>true</computeroutput> if it updated succesfully. <computeroutput>false</computeroutput> if an error occurred, or a close has been requested from a <computeroutput><ref refid="db/df3/a00034" kindref="compound">Module</ref></computeroutput>. When this returns <computeroutput>false</computeroutput>, you should end the main loop and call <computeroutput><ref refid="d9/d47/a00129_a2d1213f9aab871e066d5dbfb316c3dc2_1a2d1213f9aab871e066d5dbfb316c3dc2" kindref="member">destroy()</ref></computeroutput> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>InitializationError</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput><ref refid="d9/d47/a00129_a87ae59d4d843c7d01b12f5dadc36c01a_1a87ae59d4d843c7d01b12f5dadc36c01a" kindref="member">init()</ref></computeroutput> has not been called yet or <computeroutput><ref refid="d9/d47/a00129_a2d1213f9aab871e066d5dbfb316c3dc2_1a2d1213f9aab871e066d5dbfb316c3dc2" kindref="member">destroy()</ref></computeroutput> has been called. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d9/d47/a00129_aea0de9ffe89afcdca1b6d0b087e9a009_1aea0de9ffe89afcdca1b6d0b087e9a009" kindref="member">addModule(Module&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d9/d47/a00129" kindref="compound">MACE</ref> for an optimal main loop </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_a2d1213f9aab871e066d5dbfb316c3dc2_1a2d1213f9aab871e066d5dbfb316c3dc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::MACE::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <briefdescription>
<para>Destroys <ref refid="d9/d47/a00129" kindref="compound">MACE</ref> and calls <ref refid="db/df3/a00034_abf13bd45de10185d4139dfff22a555d2_1abf13bd45de10185d4139dfff22a555d2" kindref="member">destroy()</ref> on all registered `Modules. </para>        </briefdescription>
        <detaileddescription>
<para>` </para><para>Should be called at the end of the program after <computeroutput><ref refid="d9/d47/a00129_a7a12d5c692e104287e3b0ea5f5c9a250_1a7a12d5c692e104287e3b0ea5f5c9a250" kindref="member">MACE.isRunning()</ref></computeroutput> is <computeroutput>false</computeroutput> <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>InitializationError</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput><ref refid="d9/d47/a00129_a87ae59d4d843c7d01b12f5dadc36c01a_1a87ae59d4d843c7d01b12f5dadc36c01a" kindref="member">init()</ref></computeroutput> has not been called yet </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="d9/d47/a00129_aea0de9ffe89afcdca1b6d0b087e9a009_1aea0de9ffe89afcdca1b6d0b087e9a009" kindref="member">addModule(Module&amp;)</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d9/d47/a00129" kindref="compound">MACE</ref> for an optimal main loop </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_a7a12d5c692e104287e3b0ea5f5c9a250_1a7a12d5c692e104287e3b0ea5f5c9a250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::MACE::isRunning</definition>
        <argsstring>()</argsstring>
        <name>isRunning</name>
        <briefdescription>
<para>Checks whether the <computeroutput><ref refid="d9/d47/a00129" kindref="compound">MACE</ref></computeroutput> is ready to be updated. </para>        </briefdescription>
        <detaileddescription>
<para>Will return true if <computeroutput><ref refid="d9/d47/a00129_a87ae59d4d843c7d01b12f5dadc36c01a_1a87ae59d4d843c7d01b12f5dadc36c01a" kindref="member">MACE::init()</ref></computeroutput> has been called, and <computeroutput><ref refid="d9/d47/a00129_a2d1213f9aab871e066d5dbfb316c3dc2_1a2d1213f9aab871e066d5dbfb316c3dc2" kindref="member">MACE::destroy()</ref></computeroutput> and <computeroutput><ref refid="d9/d47/a00129_a9799613939f37db68ef0fc865976a6f9_1a9799613939f37db68ef0fc865976a6f9" kindref="member">MACE::requestStop()</ref></computeroutput> have not been called. <simplesect kind="return"><para>If <computeroutput><ref refid="d9/d47/a00129_a857b4aaf5098870c36994338ded0eb88_1a857b4aaf5098870c36994338ded0eb88" kindref="member">update()</ref></computeroutput> should be called. If this returns <computeroutput>false</computeroutput>, you should exit the main loop and call <computeroutput><ref refid="d9/d47/a00129_a2d1213f9aab871e066d5dbfb316c3dc2_1a2d1213f9aab871e066d5dbfb316c3dc2" kindref="member">destroy()</ref></computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="d9/d47/a00129_a9799613939f37db68ef0fc865976a6f9_1a9799613939f37db68ef0fc865976a6f9" kindref="member">MACE::requestStop()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="d9/d47/a00129" kindref="compound">MACE</ref> for an optimal main loop </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_a9799613939f37db68ef0fc865976a6f9_1a9799613939f37db68ef0fc865976a6f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::MACE::requestStop</definition>
        <argsstring>()</argsstring>
        <name>requestStop</name>
        <briefdescription>
<para>Tell the <computeroutput><ref refid="d9/d47/a00129" kindref="compound">MACE</ref></computeroutput> to destroy. </para>        </briefdescription>
        <detaileddescription>
<para>This is not a guarentee, as it is up to the client running the main loop to actually shut down the program. Use of this function makes <computeroutput><ref refid="d9/d47/a00129_a857b4aaf5098870c36994338ded0eb88_1a857b4aaf5098870c36994338ded0eb88" kindref="member">update()</ref></computeroutput> and <computeroutput><ref refid="d9/d47/a00129_a7a12d5c692e104287e3b0ea5f5c9a250_1a7a12d5c692e104287e3b0ea5f5c9a250" kindref="member">isRunning()</ref></computeroutput> return <computeroutput>false</computeroutput>, <simplesect kind="see"><para><ref refid="d9/d47/a00129" kindref="compound">MACE</ref> for an optimal main loop </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_ab3e55fff8ea5b23c91d5131f90269f0f_1ab3e55fff8ea5b23c91d5131f90269f0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mc::MACE::getFlag</definition>
        <argsstring>(const Byte flag)</argsstring>
        <name>getFlag</name>
        <param>
          <type>const <ref refid="da/d72/a00124_a7c6e1fbcd00ba27af6389a4a891788ca_1a7c6e1fbcd00ba27af6389a4a891788ca" kindref="member">Byte</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Retrieve an internal flag about the current state of the <computeroutput><ref refid="d9/d47/a00129" kindref="compound">MACE</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Example usage:<programlisting><codeline><highlight class="normal">mc::MACE::getFlag(SYSTEM_FLAG_INIT);//get<sp/>whether<sp/>init()<sp/>has<sp/>been<sp/>called</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Location of the flag to retrieve. Locations are stored as <computeroutput>const Index</computeroutput> and start with <computeroutput>SYSTEM_FLAG_</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the specified flag is <computeroutput>true</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/d47/a00129_aa158d8fd1f20207165ba8a6800d36044_1aa158d8fd1f20207165ba8a6800d36044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::MACE::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>&quot;Resets&quot; the <computeroutput><ref refid="d9/d47/a00129" kindref="compound">MACE</ref></computeroutput> to its default state. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>Modules</computeroutput> are cleared, and all flags are set to 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/Module.h" line="248" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Core class of <ref refid="d9/d47/a00129" kindref="compound">MACE</ref>, managing <computeroutput>Modules</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para><computeroutput><ref refid="d9/d47/a00129_a87ae59d4d843c7d01b12f5dadc36c01a_1a87ae59d4d843c7d01b12f5dadc36c01a" kindref="member">init()</ref></computeroutput> should be called after all <computeroutput>Modules</computeroutput> are added and before the main loop. <computeroutput><ref refid="d9/d47/a00129_a857b4aaf5098870c36994338ded0eb88_1a857b4aaf5098870c36994338ded0eb88" kindref="member">update()</ref></computeroutput> should be called in the loop, and <computeroutput><ref refid="d9/d47/a00129_a2d1213f9aab871e066d5dbfb316c3dc2_1a2d1213f9aab871e066d5dbfb316c3dc2" kindref="member">destroy()</ref></computeroutput> should be called at the end of your program. </para><para>If <computeroutput><ref refid="d9/d47/a00129_a7a12d5c692e104287e3b0ea5f5c9a250_1a7a12d5c692e104287e3b0ea5f5c9a250" kindref="member">isRunning()</ref></computeroutput> returns <computeroutput>false</computeroutput>, you should end your program and call <computeroutput><ref refid="d9/d47/a00129_a2d1213f9aab871e066d5dbfb316c3dc2_1a2d1213f9aab871e066d5dbfb316c3dc2" kindref="member">destroy()</ref></computeroutput> </para><para>Your main loop should look like this:<programlisting><codeline><highlight class="normal">//add<sp/>modules<sp/>that<sp/>you<sp/>need</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">mc::MACE::init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">while(mc::MACE::isRunning()){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mc::MACE::update();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">mc::MACE::destroy();</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <location file="include/MACE/Core/Module.h" line="78" column="1"/>
  </compounddef>
</doxygen>
