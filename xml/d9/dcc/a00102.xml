<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="d9/dcc/a00102" kind="namespace" language="C++">
    <compoundname>mc::os</compoundname>
    <innerclass refid="d9/d2e/a00056" prot="public">mc::os::WindowModule</innerclass>
    <innernamespace refid="d5/d1e/a00103">mc::os::Input</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="d9/dcc/a00102_ae1554c02627e42cccb39b91daf0671bb_1ae1554c02627e42cccb39b91daf0671bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tm *</type>
        <definition>std::tm* mc::os::localtime</definition>
        <argsstring>(std::tm *result, const std::time_t *time)</argsstring>
        <name>localtime</name>
        <param>
          <type>std::tm *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const std::time_t *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/System.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/a00102_a4e12ed8528ae6b574f739bf660a19a9a_1a4e12ed8528ae6b574f739bf660a19a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tm *</type>
        <definition>std::tm* mc::os::gmtime</definition>
        <argsstring>(std::tm *result, const std::time_t *time)</argsstring>
        <name>gmtime</name>
        <param>
          <type>std::tm *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const std::time_t *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/System.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/a00102_a7bd61ca55cef4b73ba0678e48af8ed12_1a7bd61ca55cef4b73ba0678e48af8ed12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mc::os::ctime</definition>
        <argsstring>(char *buffer, std::size_t bufSize, const std::time_t *time)</argsstring>
        <name>ctime</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>bufSize</declname>
        </param>
        <param>
          <type>const std::time_t *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/System.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/a00102_a4a747d94471822f20503b6ed5166feec_1a4a747d94471822f20503b6ed5166feec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* mc::os::asctime</definition>
        <argsstring>(char *buffer, std::size_t bufSize, const std::tm *time)</argsstring>
        <name>asctime</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>bufSize</declname>
        </param>
        <param>
          <type>const std::tm *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/System.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/a00102_a98a4b7e648b5ff638827f5538f940a9e_1a98a4b7e648b5ff638827f5538f940a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE* mc::os::fopen</definition>
        <argsstring>(FILE **result, const char *filename, const char *mode)</argsstring>
        <name>fopen</name>
        <param>
          <type>FILE **</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/System.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/a00102_ac0a8a7d68544550a1767a3f59456a334_1ac0a8a7d68544550a1767a3f59456a334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t mc::os::mbsrtowcs</definition>
        <argsstring>(std::size_t *returnValue, wchar_t *wcstr, std::size_t sizeInWords, const char **mbstr, std::size_t count, mbstate_t *mbstate)</argsstring>
        <name>mbsrtowcs</name>
        <param>
          <type>std::size_t *</type>
          <declname>returnValue</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>wcstr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>sizeInWords</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>mbstr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>mbstate_t *</type>
          <declname>mbstate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/System.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/a00102_a104db37ac588d6d412e71b82d5721df2_1a104db37ac588d6d412e71b82d5721df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::os::assert</definition>
        <argsstring>(const bool cond, const std::string &amp;message)</argsstring>
        <name>assert</name>
        <param>
          <type>const bool</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/System.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/a00102_a559b61a43e1ba39fb4f6b3d93408fedc_1a559b61a43e1ba39fb4f6b3d93408fedc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mc::os::assert</definition>
        <argsstring>(const bool cond, const char *message=&quot;Assertion failed&quot;)</argsstring>
        <name>assert</name>
        <param>
          <type>const bool</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
          <defval>&quot;Assertion failed&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MACE/Core/System.h" line="41" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Namespace with functions related to the operating system like keyboard input, mouse, and windows. </para>    </briefdescription>
    <detaileddescription>
<para>Also contains cross-platform safer versions of many std functions.</para><para><xrefsect id="d8/d84/a00001_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>Add function for pausing the console </para><para>Add memory functions like memcpy and memmove </para></xrefdescription></xrefsect></para>    </detaileddescription>
    <location file="include/MACE/Core/System.h" line="30" column="1"/>
  </compounddef>
</doxygen>
