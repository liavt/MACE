/*
The MIT License (MIT)

Copyright (c) 2016 Liav Turkia

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
*/
#include <MACE/Graphics/Shaders.h>
#include <MACE/Graphics/GraphicsConstants.h>
#include <iostream>

namespace mc {
	namespace gfx {
		int ShaderProgram::createShader(const char code[], const GLenum & type) {
			if( id == -1 )createProgram();
			const int shaderId = glCreateShader(type);

			checkGLError();

			if( shaderId == 0 ) {
				throwShaderError(shaderId, type, "Failed to retrieve shader ID");
			}

			glShaderSource(shaderId, 1, &code, 0);
			glCompileShader(shaderId);

			GLint result = -1;
			glGetShaderiv(shaderId, GL_COMPILE_STATUS, &result);
			if( result == 0 ) {
				throwShaderError(shaderId, type, "Shader failed to compile");
			}

			glAttachShader(id, shaderId);

			return shaderId;
		}
		void ShaderProgram::createProgram() {
			id = glCreateProgram();
			checkGLError();
			if( id == 0 ) {
				throwShaderError(id, GL_PROGRAM, "Failed to retrieve program ID");
			}
		}
		ShaderProgram::ShaderProgram() {}
		ShaderProgram::~ShaderProgram() {}
		void ShaderProgram::init() {
			if( id == 0 )createProgram();

			glLinkProgram(id);

			GLint result = -1;
			glGetProgramiv(id, GL_LINK_STATUS, &result);
			if( result == 0 ) {
				throwShaderError(id, GL_PROGRAM, "The shader program was unable to link with result " + std::to_string(result));
			}

			checkGLError();

			glValidateProgram(id);

			glGetProgramiv(id, GL_VALIDATE_STATUS, &result);
			if( result == 0 ) {
				throwShaderError(id, GL_PROGRAM, "The shader program failed validation." + std::to_string(result));
			}
		}
		void ShaderProgram::destroy() {
			if( id > 0 ) {
				unbind();
				if( vertId != 0 ) {
					glDetachShader(id, vertId);
				}
				if( fragId != 0 ) {
					glDetachShader(id, fragId);
				}
				glDeleteProgram(id);
			}
			checkGLError();
		}
		void ShaderProgram::bind() const {
			glUseProgram(id);
		}
		void ShaderProgram::unbind() const {
			glUseProgram(0);
		}
		void ShaderProgram::createFragment(const char shader[]) {
			fragId = createShader(shader, GL_FRAGMENT_SHADER);
		}
		void ShaderProgram::createFragment(const std::string & shader) {
			createFragment(shader.c_str());
		}
		void ShaderProgram::createVertex(const char shader[]) {
			vertId = createShader(shader, GL_VERTEX_SHADER);
		}

		void ShaderProgram::createVertex(const std::string & shader) {
			createVertex(shader.c_str());
		}

		void ShaderProgram::createUniform(const std::string& name) {
			int location = glGetUniformLocation(id, name.data());
			if( location < 0 ) {
				throw ShaderError("Error finding uniform with name " + std::string(name));
			}
			uniforms[name] = location;
		}

		void ShaderProgram::createUniform(const char * name) {
			createUniform(std::string(name));
		}

		int ShaderProgram::getUniformLocation(const std::string& name) {
			return uniforms[name];
		}

		int ShaderProgram::getUniformLocation(const char * name) {
			return uniforms[name];
		}

		int ShaderProgram::getProgramID() const {
			return id;
		}

		int ShaderProgram::getVertexID() const {
			return vertId;
		}

		int ShaderProgram::getFragmentID() const {
			return fragId;
		}

		//Autogenerated definitions.

		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<float, 4, 4>& m) { setUniform(name, true, m); }

		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<float, 4, 4>& m) { float flattenedData[4 * 4]; glUniformMatrix4fv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }

		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<float, 3, 3>& m) { setUniform(name, true, m); }

		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<float, 3, 3>& m) { float flattenedData[3 * 3]; glUniformMatrix3fv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }

		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<float, 2, 2>& m) { setUniform(name, true, m); }

		//setUniform with float matrices

		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<float, 2, 2>& m) { float flattenedData[2 * 2]; glUniformMatrix2fv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }
		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<float, 2, 3>& m) { float flattenedData[2 * 3]; glUniformMatrix2x3fv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }
		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<float, 2, 3>& m) { setUniform(name, true, m); }
		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<float, 3, 2>& m) { float flattenedData[3 * 2]; glUniformMatrix3x2fv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }
		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<float, 3, 2>& m) { setUniform(name, true, m); }
		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<float, 2, 4>& m) { float flattenedData[2 * 4]; glUniformMatrix2x4fv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }
		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<float, 2, 4>& m) { setUniform(name, true, m); }
		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<float, 3, 4>& m) { float flattenedData[3 * 4]; glUniformMatrix3x4fv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }
		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<float, 3, 4>& m) { setUniform(name, true, m); }
		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<float, 4, 3>& m) { float flattenedData[4 * 3]; glUniformMatrix4x3fv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }
		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<float, 4, 3>& m) { setUniform(name, true, m); }

		//setUniform with double matrices

		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<double, 2, 2>& m) { double flattenedData[2 * 2]; glUniformMatrix2dv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }
		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<double, 2, 2>& m) { setUniform(name, true, m); }
		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<double, 3, 3>& m) { double flattenedData[3 * 3]; glUniformMatrix3dv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }
		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<double, 3, 3>& m) { setUniform(name, true, m); }
		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<double, 4, 4>& m) { double flattenedData[4 * 4]; glUniformMatrix4dv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }
		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<double, 4, 4>& m) { setUniform(name, true, m); }
		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<double, 2, 3>& m) { double flattenedData[2 * 3]; glUniformMatrix2x3dv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }
		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<double, 2, 3>& m) { setUniform(name, true, m); }
		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<double, 3, 2>& m) { double flattenedData[3 * 2]; glUniformMatrix3x2dv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }
		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<double, 3, 2>& m) { setUniform(name, true, m); }
		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<double, 2, 4>& m) { double flattenedData[2 * 4]; glUniformMatrix2x4dv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }
		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<double, 2, 4>& m) { setUniform(name, true, m); }
		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<double, 3, 4>& m) { double flattenedData[3 * 4]; glUniformMatrix3x4dv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }
		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<double, 3, 4>& m) { setUniform(name, true, m); }
		inline void ShaderProgram::setUniform(char * name, const bool transpose, const mc::Matrix<double, 4, 3>& m) { double flattenedData[4 * 3]; glUniformMatrix4x3dv(uniforms[name], 1, transpose, m.flatten(flattenedData)); }
		inline void ShaderProgram::setUniform(char * name, const mc::Matrix<double, 4, 3>& m) { setUniform(name, true, m); }

		//setUniform with float

		inline void ShaderProgram::setUniform(char * name, const float a) { glUniform1f(uniforms[name], a); }
		inline void ShaderProgram::setUniform(char * name, const float a, const float b) { glUniform2f(uniforms[name], a, b); }
		inline void ShaderProgram::setUniform(char * name, const float a, const float b, const float c) { glUniform3f(uniforms[name], a, b, c); }
		inline void ShaderProgram::setUniform(char * name, const float a, const float b, const float c, const float d) { glUniform4f(uniforms[name], a, b, c, d); }
		inline void ShaderProgram::setUniform(char * name, const Size arraySize, const float * a) { glUniform1fv(uniforms[name], arraySize, a); }
		inline void ShaderProgram::setUniform(char * name, const Size componentSize, const Size arraySize, const float * a) { if( componentSize == 1 ) glUniform1fv(uniforms[name], arraySize, a); else if( componentSize == 2 ) glUniform2fv(uniforms[name], arraySize, a); else if( componentSize == 3 ) glUniform3fv(uniforms[name], arraySize, a); else if( componentSize == 4 ) glUniform4fv(uniforms[name], arraySize, a); }

		//setUniform with double

		inline void ShaderProgram::setUniform(char * name, const double a) { glUniform1d(uniforms[name], a); }
		inline void ShaderProgram::setUniform(char * name, const double a, const double b) { glUniform2d(uniforms[name], a, b); }
		inline void ShaderProgram::setUniform(char * name, const double a, const double b, const double c) { glUniform3d(uniforms[name], a, b, c); }
		inline void ShaderProgram::setUniform(char * name, const double a, const double b, const double c, const double d) { glUniform4d(uniforms[name], a, b, c, d); }
		inline void ShaderProgram::setUniform(char * name, const Size arraySize, const double * a) { glUniform1dv(uniforms[name], arraySize, a); }
		inline void ShaderProgram::setUniform(char * name, const Size componentSize, const Size arraySize, const double * a) { if( componentSize == 1 ) glUniform1dv(uniforms[name], arraySize, a); else if( componentSize == 2 ) glUniform2dv(uniforms[name], arraySize, a); else if( componentSize == 3 ) glUniform3dv(uniforms[name], arraySize, a); else if( componentSize == 4 ) glUniform4dv(uniforms[name], arraySize, a); }

		//setUniform with int

		inline void ShaderProgram::setUniform(char * name, const int a) { glUniform1i(uniforms[name], a); }
		inline void ShaderProgram::setUniform(char * name, const int a, const int b) { glUniform2i(uniforms[name], a, b); }
		inline void ShaderProgram::setUniform(char * name, const int a, const int b, const int c) { glUniform3i(uniforms[name], a, b, c); }
		inline void ShaderProgram::setUniform(char * name, const int a, const int b, const int c, const int d) { glUniform4i(uniforms[name], a, b, c, d); }
		inline void ShaderProgram::setUniform(char * name, const Size arraySize, const int * a) { glUniform1iv(uniforms[name], arraySize, a); }
		inline void ShaderProgram::setUniform(char * name, const Size componentSize, const Size arraySize, const int * a) { if( componentSize == 1 ) glUniform1iv(uniforms[name], arraySize, a); else if( componentSize == 2 ) glUniform2iv(uniforms[name], arraySize, a); else if( componentSize == 3 ) glUniform3iv(uniforms[name], arraySize, a); else if( componentSize == 4 ) glUniform4iv(uniforms[name], arraySize, a); }

		//setUniform with unsigned int

		inline void ShaderProgram::setUniform(char * name, const unsigned int a) { glUniform1ui(uniforms[name], a); }
		inline void ShaderProgram::setUniform(char * name, const unsigned int a, const unsigned int b) { glUniform2ui(uniforms[name], a, b); }
		inline void ShaderProgram::setUniform(char * name, const unsigned int a, const unsigned int b, const unsigned int c) { glUniform3ui(uniforms[name], a, b, c); }
		inline void ShaderProgram::setUniform(char * name, const unsigned int a, const unsigned int b, const unsigned int c, const unsigned int d) { glUniform4ui(uniforms[name], a, b, c, d); }
		inline void ShaderProgram::setUniform(char * name, const Size arraySize, const unsigned int * a) { glUniform1uiv(uniforms[name], arraySize, a); }
		inline void ShaderProgram::setUniform(char * name, const Size componentSize, const Size arraySize, const unsigned int * a) { if( componentSize == 1 ) glUniform1uiv(uniforms[name], arraySize, a); else if( componentSize == 2 ) glUniform2uiv(uniforms[name], arraySize, a); else if( componentSize == 3 ) glUniform3uiv(uniforms[name], arraySize, a); else if( componentSize == 4 ) glUniform4uiv(uniforms[name], arraySize, a); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<unsigned int, 4> v) { glUniform4ui(uniforms[name], v[0], v[1], v[2], v[3]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<unsigned int, 3> v) { glUniform3ui(uniforms[name], v[0], v[1], v[2]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<unsigned int, 2> v) { glUniform2ui(uniforms[name], v[0], v[1]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<unsigned int, 1> v) { glUniform1ui(uniforms[name], v[0]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<int, 4> v) { glUniform4i(uniforms[name], v[0], v[1], v[2], v[3]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<int, 3> v) { glUniform3i(uniforms[name], v[0], v[1], v[2]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<int, 2> v) { glUniform2i(uniforms[name], v[0], v[1]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<int, 1> v) { glUniform1i(uniforms[name], v[0]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<double, 4> v) { glUniform4d(uniforms[name], v[0], v[1], v[2], v[3]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<double, 3> v) { glUniform3d(uniforms[name], v[0], v[1], v[2]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<double, 2> v) { glUniform2d(uniforms[name], v[0], v[1]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<double, 1> v) { glUniform1d(uniforms[name], v[0]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<float, 4> v) { glUniform4f(uniforms[name], v[0], v[1], v[2], v[3]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<float, 3> v) { glUniform3f(uniforms[name], v[0], v[1], v[2]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<float, 2> v) { glUniform2f(uniforms[name], v[0], v[1]); }
		inline void ShaderProgram::setUniform(char * name, const mc::Vector<float, 1> v) { glUniform1f(uniforms[name], v[0]); }
	}
}