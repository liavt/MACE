.TH "mc::math" 3 "Sat Dec 17 2016" "Version Alpha" "MACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mc::math \- Namespace with various mathmatical functions\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "long double \fBpi\fP ()"
.br
.RI "\fICalculates the mathmatical constant \fCpi\fP\&. \fP"
.ti -1c
.RI "long double \fBtau\fP ()"
.br
.RI "\fICalculates the mathmatical constant \fCtau\fP\&. \fP"
.ti -1c
.RI "long double \fBgamma\fP ()"
.br
.RI "\fICalculates the mathmatical constant represented by \fCgamma\fP, or the `Euler–Mascheroni constant\&. \fP"
.ti -1c
.RI "long double \fBe\fP ()"
.br
.RI "\fICalculates the mathmatical constant known as \fCEulers Number,\fP or \fCe\fP\&. \fP"
.ti -1c
.RI "long double \fBroot2\fP ()"
.br
.RI "\fICalculates the square root of 2, also known as the \fCprincipal square root of 2\fP\&. \fP"
.ti -1c
.RI "long double \fBroot3\fP ()"
.br
.RI "\fICalculates the square root of 3, also known as the \fCprincipal square root of 3\fP\&. \fP"
.ti -1c
.RI "long double \fBroot5\fP ()"
.br
.RI "\fICalculates the square root of 5, also known as the \fCprincipal square root of 5\fP\&. \fP"
.ti -1c
.RI "long double \fBphi\fP ()"
.br
.RI "\fICalculates the golden ratio, also represented by \fCphi\fP\&. \fP"
.ti -1c
.RI "double \fBabs\fP (const double value)"
.br
.RI "\fIGets the absolute value of a number\&. \fP"
.ti -1c
.RI "int \fBceil\fP (const double value)"
.br
.RI "\fI'Ceils' a number, or rounds it up\&. \fP"
.ti -1c
.RI "int \fBfloor\fP (const double value)"
.br
.RI "\fI'Floors' a number, or rounds it down\&. \fP"
.ti -1c
.RI "bool \fBisPrime\fP (const int value)"
.br
.RI "\fIVerifies whether a number is prime\&. \fP"
.ti -1c
.RI "bool \fBisEven\fP (const int value)"
.br
.RI "\fIChecks if a number is even\&. \fP"
.ti -1c
.RI "bool \fBisOdd\fP (const int value)"
.br
.RI "\fIChecks if a number is odd\&. \fP"
.ti -1c
.RI "double \fBpow\fP (const double value, const int power)"
.br
.RI "\fICalculates a number to an exponenet, or \fCvalue^power\fP \fP"
.ti -1c
.RI "double \fBsqr\fP (const double value)"
.br
.RI "\fISquares a number\&. \fP"
.ti -1c
.RI "double \fBcube\fP (const double value)"
.br
.RI "\fICubes a number\&. \fP"
.ti -1c
.RI "double \fBtoRadians\fP (const double degrees)"
.br
.RI "\fIConversion of degreees to radians\&. \fP"
.ti -1c
.RI "double \fBtoDegrees\fP (const double radians)"
.br
.RI "\fIConversion of radians to degrees\&. \fP"
.ti -1c
.RI "template<typename T , Size N> \fBMatrix\fP< T, N, N > \fBinverse\fP (const \fBMatrix\fP< T, N, N > &matrix)"
.br
.RI "\fIInverses a \fCN\fP by \fCN\fP \fC\fBMatrix\fP\fP\&. \fP"
.ti -1c
.RI "template<typename T , Size W, Size H> \fBMatrix\fP< T, H, W > \fBtranspose\fP (const \fBMatrix\fP< T, W, H > &matrix)"
.br
.RI "\fITransposes a \fC\fBMatrix\fP\fP\&. \fP"
.ti -1c
.RI "template<typename T > T \fBdet\fP (const \fBMatrix\fP< T, 2, 2 > &matrix)"
.br
.RI "\fICalculates the determinate of a 2x2 \fC\fBMatrix\fP\fP\&. \fP"
.ti -1c
.RI "template<typename T , Size N> T \fBdet\fP (const \fBMatrix\fP< T, N, N > &matrix)"
.br
.RI "\fICalculates the determinate of a any sized \fC\fBMatrix\fP\fP\&. \fP"
.ti -1c
.RI "template<typename T , Size N> T \fBtr\fP (const \fBMatrix\fP< T, N, N > &m)"
.br
.RI "\fICalculates the trace of a \fBMatrix\fP\&. \fP"
.ti -1c
.RI "template<typename T , Size N> \fBMatrix\fP< T, N, N > \fBidentity\fP ()"
.br
.RI "\fICreates an indentity \fC\fBMatrix\fP\fP of a certain size\&. \fP"
.ti -1c
.RI "\fBMatrix\fP< float, 4, 4 > \fBrotate\fP (const float x, const float y, const float z)"
.br
.RI "\fICreates a rotation matrix, which when multiplied by a \fCVector4f\fP, rotates it\&. \fP"
.ti -1c
.RI "\fBMatrix\fP< float, 4, 4 > \fBrotate\fP (const \fBVector\fP< float, 3 > &v)"
.br
.RI "\fICreates a rotation matrix, which when multiplied by a \fCVector4f\fP, rotates it\&. \fP"
.ti -1c
.RI "\fBMatrix\fP< float, 4, 4 > \fBrotate\fP (const \fBMatrix\fP< float, 4, 4 > &m, const \fBVector\fP< float, 3 > &v)"
.br
.RI "\fIRotates an existing \fCMatrix4f\fP \fP"
.ti -1c
.RI "\fBMatrix\fP< float, 4, 4 > \fBrotate\fP (const \fBMatrix\fP< float, 4, 4 > &m, const float x, const float y, const float z)"
.br
.RI "\fIRotates an existing \fCMatrix4f\fP \fP"
.ti -1c
.RI "\fBMatrix\fP< float, 4, 4 > \fBscale\fP (const float x, const float y, const float z)"
.br
.RI "\fICreates a scaling matrix, that when multiplied by a vector, scales the X, Y, and Z values\&. \fP"
.ti -1c
.RI "\fBMatrix\fP< float, 4, 4 > \fBscale\fP (const \fBMatrix\fP< float, 4, 4 > &m, const float x, const float y, const float z)"
.br
.RI "\fIScales an existing transformation matrix\&. \fP"
.ti -1c
.RI "\fBMatrix\fP< float, 4, 4 > \fBtranslate\fP (const float x, const float y, const float z)"
.br
.RI "\fICreates a translation matrix, that when multiplied by a vector, translates the X, Y, and Z values\&. \fP"
.ti -1c
.RI "\fBMatrix\fP< float, 4, 4 > \fBtranslate\fP (const \fBMatrix\fP< float, 4, 4 > &m, const float x, const float y, const float z)"
.br
.RI "\fITranslates an existing transformation matrix\&. \fP"
.ti -1c
.RI "\fBMatrix\fP< float, 4, 4 > \fBprojection\fP (const float FOV, const float NEAR_PLANE, const float FAR_PLANE, const float aspectRatio)"
.br
.RI "\fIGenerates a projection matrix based on values\&. \fP"
.ti -1c
.RI "\fBMatrix\fP< float, 4, 4 > \fBortho\fP (const float left, const float right, const float bottom, const float top, const float near, const float far)"
.br
.RI "\fIGenerates an orthographic projection matrix\&. \fP"
.ti -1c
.RI "template<typename T > \fBVector\fP< T, 3 > \fBcross\fP (const \fBVector\fP< T, 3 > &a, const \fBVector\fP< T, 3 > &b)"
.br
.RI "\fICalculates the cross product of 2 \fCVectors\fP\&. \fP"
.ti -1c
.RI "template<typename T , Size N> T \fBdot\fP (const \fBVector\fP< T, N > &a, const \fBVector\fP< T, N > &b)"
.br
.RI "\fICalculates the dot product of 2 \fCVectors\fP \fP"
.ti -1c
.RI "template<typename T , Size N> T \fBmagnitude\fP (const \fBVector\fP< T, N > &a)"
.br
.RI "\fICalculates the magnitude of a \fC\fBVector\fP\fP, or how long it is\&. \fP"
.ti -1c
.RI "template<typename T , Size N> \fBVector\fP< T, N > \fBnormalize\fP (\fBVector\fP< T, N > &vector)"
.br
.RI "\fINormalize a \fC\fBVector\fP\fP\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Namespace with various mathmatical functions\&. 

Namespace that contains mathmathetics with vectors and functions relevant in graphics programming\&. 
.SH "Function Documentation"
.PP 
.SS "double mc::math::abs (const double value)"

.PP
Gets the absolute value of a number\&. The absolute value is the unsigned version of a number\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Number that is either negative or positive 
.RE
.PP
\fBReturns:\fP
.RS 4
\fC|value|\fP 
.RE
.PP

.SS "int mc::math::ceil (const double value)"

.PP
'Ceils' a number, or rounds it up\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Number to ceil 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCvalue,\fP but rounded up\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBfloor(const double)\fP 
.PP
round(const double) 
.RE
.PP

.SS "template<typename T > \fBVector\fP<T, 3> mc::math::cross (const \fBVector\fP< T, 3 > & a, const \fBVector\fP< T, 3 > & b)"

.PP
Calculates the cross product of 2 \fCVectors\fP\&. The \fC\fBVector\fP\fP must be 3-dimensional\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP First \fC\fBVector\fP\fP 
.br
\fIb\fP Second \fC\fBVector\fP\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
A vector calculated from the cross product of \fCa\fP and \fCb\fP 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBdot(const Vector&, const Vector&)\fP 
.PP
\fBmagnitude(const Vector&)\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Type of the \fCVectors\fP being calculated\&. This does not need to be explicitely set\&. 
.RE
.PP

.PP
Definition at line 552 of file Vector\&.h\&.
.SS "double mc::math::cube (const double value)"

.PP
Cubes a number\&. Cubing a number is equal to itself to the power of 3\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Number to cube 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCvalue^3\fP or \fCvalue*value*value\fP 
.RE
.PP
\fBSee also:\fP
.RS 4
pow(const double, const double) 
.PP
\fBsqr(const double)\fP 
.RE
.PP

.SS "template<typename T > T mc::math::det (const \fBMatrix\fP< T, 2, 2 > & matrix)"

.PP
Calculates the determinate of a 2x2 \fC\fBMatrix\fP\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fImatrix\fP A square 2x2 \fC\fBMatrix\fP\fP to find the determinate of 
.RE
.PP
\fBReturns:\fP
.RS 4
The determinate of \fCmatrix\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Type of the \fC\fBMatrix\fP\fP 
.RE
.PP

.PP
Definition at line 509 of file Matrix\&.h\&.
.SS "template<typename T , Size N> T mc::math::det (const \fBMatrix\fP< T, N, N > & matrix)"

.PP
Calculates the determinate of a any sized \fC\fBMatrix\fP\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fImatrix\fP A square \fC\fBMatrix\fP\fP to find the determinate of 
.RE
.PP
\fBReturns:\fP
.RS 4
The determinate of \fCmatrix\fP 
.RE
.PP
\fBBug\fP
.RS 4
Array subscript out of range with matrices bigger than 2x2 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Type of the \fC\fBMatrix\fP\fP 
.br
\fIN\fP Size of the \fC\fBMatrix\fP\fP 
.RE
.PP

.PP
Definition at line 522 of file Matrix\&.h\&.
.SS "template<typename T , Size N> T mc::math::dot (const \fBVector\fP< T, N > & a, const \fBVector\fP< T, N > & b)"

.PP
Calculates the dot product of 2 \fCVectors\fP 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP First \fC\fBVector\fP\fP to use 
.br
\fIb\fP Second \fC\fBVector\fP\fP to use 
.RE
.PP
\fBReturns:\fP
.RS 4
A scalar calculated from the dot product of \fCa\fP and \fCb\fP 
.RE
.PP
\fBSee also:\fP
.RS 4
cross(const Vector&, const Vector&) 
.PP
\fBmagnitude(const Vector&)\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Type of the \fCVectors\fP being calculated\&. This does not need to be explicitely set\&. 
.br
\fIN\fP Size of the \fCVectors\fP being calculated\&. This does not need to be explicitely set\&. 
.RE
.PP

.PP
Definition at line 568 of file Vector\&.h\&.
.SS "long double mc::math::e ()"

.PP
Calculates the mathmatical constant known as \fCEulers Number,\fP or \fCe\fP\&. \fCE\fP is used as the base for the natural logarithim\&. 
.PP
\fBReturns:\fP
.RS 4
\fCEulers Number\fP 
.RE
.PP
\fBSee also:\fP
.RS 4
logn(double); 
.RE
.PP

.SS "int mc::math::floor (const double value)"

.PP
'Floors' a number, or rounds it down\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Number to floor 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCvalue,\fP but rounded down\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBceil(const double)\fP 
.PP
round(const double) 
.RE
.PP

.SS "long double mc::math::gamma ()"

.PP
Calculates the mathmatical constant represented by \fCgamma\fP, or the `Euler–Mascheroni constant\&. \fCGamma is used in number theory and analysis\&. @return The\fPEuler–Mascheroni constant` 
.SS "template<typename T , Size N> \fBMatrix\fP<T, N, N> mc::math::identity ()"

.PP
Creates an indentity \fC\fBMatrix\fP\fP of a certain size\&. An identity \fC\fBMatrix\fP\fP times another \fC\fBMatrix\fP\fP equals the same \fC\fBMatrix\fP\fP 
.PP
\fBReturns:\fP
.RS 4
An indentity \fC\fBMatrix\fP\fP whose diagonal elements are \fC1\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Type of the identity \fC\fBMatrix\fP\fP 
.br
\fIN\fP Size of the identity \fC\fBMatrix\fP\fP 
.RE
.PP

.PP
Definition at line 583 of file Matrix\&.h\&.
.SS "template<typename T , Size N> \fBMatrix\fP< T, N, N > mc::math::inverse (const \fBMatrix\fP< T, N, N > & matrix)"

.PP
Inverses a \fCN\fP by \fCN\fP \fC\fBMatrix\fP\fP\&. An inversed \fC\fBMatrix\fP\fP times a normal \fC\fBMatrix\fP\fP equals the identity \fC\fBMatrix\fP\fP 
.PP
Not to be confused with \fC\fBtr()\fP\fP 
.PP
If \fCT\fP is not a floating point type, the output may not work, as it will round\&. 
.PP
The output is calculated via the Caley-Hamilton theorum (https://en.wikipedia.org/wiki/Cayley%E2%80%93Hamilton_theorem) 
.PP
\fBParameters:\fP
.RS 4
\fImatrix\fP The \fC\fBMatrix\fP\fP to invert 
.RE
.PP
\fBReturns:\fP
.RS 4
The inverse of \fCmatrix\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Type of the \fC\fBMatrix\fP\fP 
.br
\fIN\fP Order of the \fC\fBMatrix\fP\fP 
.RE
.PP
\fBBug\fP
.RS 4
Matrices bigger then 2x2 dont work 
.RE
.PP

.PP
Definition at line 612 of file Matrix\&.h\&.
.SS "bool mc::math::isEven (const int value)"

.PP
Checks if a number is even\&. An even number is one that is divisable by 2\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Number to check if even 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if the \fCvalue\fP is divisable by 2, \fCfalse\fP otherwise 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBisOdd(const int)\fP 
.RE
.PP

.SS "bool mc::math::isOdd (const int value)"

.PP
Checks if a number is odd\&. An odd number is one that is not divisable by 2\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Number to check if odd 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if the \fCvalue\fP is not divisable by 2, \fCfalse\fP otherwise 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBisEven(const int)\fP 
.RE
.PP

.SS "bool mc::math::isPrime (const int value)"

.PP
Verifies whether a number is prime\&. A prime number is one that's only factors are one and itself\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Number to check if prime 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCtrue\fP if the number is prime, \fCfalse\fP otherwise 
.RE
.PP

.SS "template<typename T , Size N> T mc::math::magnitude (const \fBVector\fP< T, N > & a)"

.PP
Calculates the magnitude of a \fC\fBVector\fP\fP, or how long it is\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP The \fC\fBVector\fP\fP to calculate from 
.RE
.PP
\fBReturns:\fP
.RS 4
The magnitude of \fC\fBVector\fP a\fP 
.RE
.PP
\fBSee also:\fP
.RS 4
cross(const Vector&, const Vector&) 
.PP
\fBdot(const Vector&, const Vector&)\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Type of the \fCVectors\fP being calculated\&. This does not need to be explicitely set\&. 
.br
\fIN\fP Size of the \fCVectors\fP being calculated\&. This does not need to be explicitely set\&. 
.RE
.PP

.PP
Definition at line 582 of file Vector\&.h\&.
.SS "template<typename T , Size N> \fBVector\fP<T, N> mc::math::normalize (\fBVector\fP< T, N > & vector)"

.PP
Normalize a \fC\fBVector\fP\fP\&. A normalized \fC\fBVector\fP\fP has a length of 1, and is also known as a unit vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvector\fP \fC\fBVector\fP\fP to normalize 
.RE
.PP
\fBReturns:\fP
.RS 4
A unit \fC\fBVector\fP\fP with a norm of ` 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBmagnitude(const Vector&)\fP 
.PP
\fBdot(const Vector&, const Vector&)\fP 
.PP
cross(const Vector&, const Vector&) 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Type of \fC\fBVector\fP\fP 
.br
\fIN\fP Size of the \fC\fBVector\fP\fP 
.RE
.PP

.PP
Definition at line 602 of file Vector\&.h\&.
.SS "\fBMatrix\fP<float, 4, 4> mc::math::ortho (const float left, const float right, const float bottom, const float top, const float near, const float far)"

.PP
Generates an orthographic projection matrix\&. As opposed to a standard projection matrix, vectors in an orthographic projection don't become smaller the farther away they are\&. When combined with a rotational matrix, it can create an isometric view, which is used extensively in games like Simcity\&. Isometric views are also used heavily in 3D modeling software to represent the dimensions of an object\&.In a 2D environment, an orthographic projection matrix can be used to scale the screen\&. 
.PP
\fBParameters:\fP
.RS 4
\fIleft\fP The left plane of the orthographic projection 
.br
\fIright\fP The right plane of the orthographic projection 
.br
\fIbottom\fP The bottom plane of the orthographic projection 
.br
\fItop\fP The top plane of the orthographic projection 
.br
\fInear\fP The near plane of the orthographic projection 
.br
\fIfar\fP The far plane of the orthographic projection 
.RE
.PP
\fBReturns:\fP
.RS 4
An ortographic projection matrix generated from the values\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBprojection(const float, const float, const float, const float)\fP 
.RE
.PP

.SS "long double mc::math::phi ()"

.PP
Calculates the golden ratio, also represented by \fCphi\fP\&. The golden ratio is referenced throughout many different parts of mathmatics, including geometery, trigonometry, pyramids, the fibonacci sequence, and algebra\&. 
.SS "long double mc::math::pi ()"

.PP
Calculates the mathmatical constant \fCpi\fP\&. \fCPi\fP is the ratio of a circle's circumfernce to it's diameter, always coming out to equal roughly 3\&.14, no matter the size of the circle\&. 
.PP
It is located here as a \fClong double\fP to have the most possible digits\&. 
.PP
\fBReturns:\fP
.RS 4
Pi 
.RE
.PP

.SS "double mc::math::pow (const double value, const int power)"

.PP
Calculates a number to an exponenet, or \fCvalue^power\fP 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Base number 
.br
\fIpower\fP The exponent 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCvalue^power\fP 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsqr(const double)\fP 
.PP
\fBcube(const double)\fP 
.RE
.PP

.SS "\fBMatrix\fP<float, 4, 4> mc::math::projection (const float FOV, const float NEAR_PLANE, const float FAR_PLANE, const float aspectRatio)"

.PP
Generates a projection matrix based on values\&. Each time the window changes size, you need to regenerate your projection matrix 
.PP
Projection matrices are used in 3D graphics\&. Vectors multiplied by a projection matrix are transformed to 'look' 3-dimensional\&. 
.PP
\fBParameters:\fP
.RS 4
\fIFOV\fP The field of vision, in degrees 
.br
\fINEAR_PLANE\fP A \fCfloat\fP representing the near clipping plane\&. Z values lower than this are not visible to the viewer 
.br
\fIFAR_PLANE\fP A \fCfloat\fP representing the far clipping plane\&. Z values higher than this are not visible to the viewer 
.br
\fIaspectRatio\fP The aspect ratio of the screen\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A projection matrix made from the specified settings 
.RE
.PP
\fBSee also:\fP
.RS 4
ortho(const float, const float, const float, const float, const float) 
.RE
.PP

.SS "long double mc::math::root2 ()"

.PP
Calculates the square root of 2, also known as the \fCprincipal square root of 2\fP\&. This number when multiplied by itself returns 2\&. It is used in trigonometry\&. 
.PP
\fBReturns:\fP
.RS 4
Square root of 2 
.RE
.PP

.SS "long double mc::math::root3 ()"

.PP
Calculates the square root of 3, also known as the \fCprincipal square root of 3\fP\&. This number when multiplied by itself returns 3\&. It is used in geometery and trigonometry\&. 
.PP
\fBReturns:\fP
.RS 4
Square root of 3 
.RE
.PP

.SS "long double mc::math::root5 ()"

.PP
Calculates the square root of 5, also known as the \fCprincipal square root of 5\fP\&. This number when multiplied by itself returns 5\&. It is used in geometery and trigonometry\&. 
.PP
\fBReturns:\fP
.RS 4
Square root of 5 
.RE
.PP

.SS "\fBMatrix\fP<float,4, 4> mc::math::rotate (const float x, const float y, const float z)"

.PP
Creates a rotation matrix, which when multiplied by a \fCVector4f\fP, rotates it\&. The base \fCMatrix4f\fP is an identity matrix 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Rotation in radians around the X axis 
.br
\fIy\fP Rotation in radians around the Y axis 
.br
\fIz\fP Rotation in radians around the Z axis 
.RE
.PP
\fBReturns:\fP
.RS 4
A rotation \fCMatrix4f\fP 
.RE
.PP

.SS "\fBMatrix\fP<float, 4, 4> mc::math::rotate (const \fBVector\fP< float, 3 > & v)"

.PP
Creates a rotation matrix, which when multiplied by a \fCVector4f\fP, rotates it\&. The base \fCMatrix4f\fP is an identity matrix 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP A quaternion representing a rotation 
.RE
.PP
\fBReturns:\fP
.RS 4
A rotated \fCMatrix4f\fP 
.RE
.PP

.SS "\fBMatrix\fP<float, 4, 4> mc::math::rotate (const \fBMatrix\fP< float, 4, 4 > & m, const \fBVector\fP< float, 3 > & v)"

.PP
Rotates an existing \fCMatrix4f\fP 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP A quaternion representing a rotation 
.br
\fIm\fP \fCMatrix4f\fP base to rotate 
.RE
.PP
\fBReturns:\fP
.RS 4
A rotated \fCMatrix4f\fP 
.RE
.PP

.SS "\fBMatrix\fP<float, 4, 4> mc::math::rotate (const \fBMatrix\fP< float, 4, 4 > & m, const float x, const float y, const float z)"

.PP
Rotates an existing \fCMatrix4f\fP 
.PP
\fBParameters:\fP
.RS 4
\fIm\fP A \fCMatrix4f\fP to rotate 
.br
\fIx\fP Rotation in radians around the X axis 
.br
\fIy\fP Rotation in radians around the Y axis 
.br
\fIz\fP Rotation in radians around the Z axis 
.RE
.PP
\fBReturns:\fP
.RS 4
A rotated \fCMatrix4f\fP 
.RE
.PP

.SS "\fBMatrix\fP<float, 4, 4> mc::math::scale (const float x, const float y, const float z)"

.PP
Creates a scaling matrix, that when multiplied by a vector, scales the X, Y, and Z values\&. The base \fCMatrix4f\fP is an identity matrix 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP How much to scale the X coordinate 
.br
\fIy\fP How much to scale the Y coordinate 
.br
\fIz\fP How much to scale the Z coordinate 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fCMatrix4f\fP that is scaled based on the supplied values 
.RE
.PP

.SS "\fBMatrix\fP<float, 4, 4> mc::math::scale (const \fBMatrix\fP< float, 4, 4 > & m, const float x, const float y, const float z)"

.PP
Scales an existing transformation matrix\&. 
.PP
\fBParameters:\fP
.RS 4
\fIm\fP The base \fCMatrix4f\fP to get scaled 
.br
\fIx\fP How much to scale the X coordinate 
.br
\fIy\fP How much to scale the Y coordinate 
.br
\fIz\fP How much to scale the Z coordinate 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fCMatrix4f\fP that is scaled based on the supplied values 
.RE
.PP

.SS "double mc::math::sqr (const double value)"

.PP
Squares a number\&. Squaring a number equals a number times iteslf\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Number to square 
.RE
.PP
\fBReturns:\fP
.RS 4
\fCvalue^2\fP or \fCvalue*value\fP 
.RE
.PP
\fBSee also:\fP
.RS 4
pow(const double, const double) 
.PP
\fBcube(const double)\fP 
.RE
.PP

.SS "long double mc::math::tau ()"

.PP
Calculates the mathmatical constant \fCtau\fP\&. \fCTau\fP is known as \fC2pi\fP and represents the full turn of a circle\&. It also represents 6\&.28 radians, a full circle, equal to 360 degrees\&. 
.PP
\fBReturns:\fP
.RS 4
Tau 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBtoRadians()\fP 
.RE
.PP

.SS "double mc::math::toDegrees (const double radians)"

.PP
Conversion of radians to degrees\&. 
.PP
\fBParameters:\fP
.RS 4
\fIradians\fP An angle in radians 
.RE
.PP
\fBReturns:\fP
.RS 4
The same number represented as degrees 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBpi()\fP 
.RE
.PP

.SS "double mc::math::toRadians (const double degrees)"

.PP
Conversion of degreees to radians\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdegrees\fP An angle in degrees 
.RE
.PP
\fBReturns:\fP
.RS 4
The same number represented as radians 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBpi()\fP 
.RE
.PP

.SS "template<typename T , Size N> T mc::math::tr (const \fBMatrix\fP< T, N, N > & m)"

.PP
Calculates the trace of a \fBMatrix\fP\&. The trace is the sum of all of the diagonal elements of a \fC\fBMatrix\fP\fP\&. 
.PP
The trace is related to the derivative of a \fBdeterminate\&.\fP 
.PP
Not to be confused with \fC\fBtranspose(const Matrix&)\fP)\fP 
.PP
\fBParameters:\fP
.RS 4
\fIm\fP \fC\fBMatrix\fP\fP to calculate the trace of 
.RE
.PP
\fBReturns:\fP
.RS 4
The sum of the diagonal elements of \fCm\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Type of the \fC\fBMatrix\fP\fP 
.br
\fIN\fP Size of the \fC\fBMatrix\fP\fP 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBinverse(const Matrix<T,N,N>&)\fP 
.RE
.PP

.PP
Definition at line 567 of file Matrix\&.h\&.
.SS "\fBMatrix\fP<float, 4, 4> mc::math::translate (const float x, const float y, const float z)"

.PP
Creates a translation matrix, that when multiplied by a vector, translates the X, Y, and Z values\&. The base \fCMatrix4f\fP is an identity matrix 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP How much to translate the X coordinate 
.br
\fIy\fP How much to translate the Y coordinate 
.br
\fIz\fP How much to translate the Z coordinate 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fCMatrix4f\fP that is translated based on the supplied values 
.RE
.PP

.SS "\fBMatrix\fP<float, 4, 4> mc::math::translate (const \fBMatrix\fP< float, 4, 4 > & m, const float x, const float y, const float z)"

.PP
Translates an existing transformation matrix\&. 
.PP
\fBParameters:\fP
.RS 4
\fIm\fP The base \fCMatrix4f\fP to get translated 
.br
\fIx\fP How much to translate the X coordinate 
.br
\fIy\fP How much to translate the Y coordinate 
.br
\fIz\fP How much to translate the Z coordinate 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fCMatrix4f\fP that is translated based on the supplied values 
.RE
.PP

.SS "template<typename T , Size W, Size H> \fBMatrix\fP<T, H, W> mc::math::transpose (const \fBMatrix\fP< T, W, H > & matrix)"

.PP
Transposes a \fC\fBMatrix\fP\fP\&. Transposing a \fC\fBMatrix\fP\fP creates a reflection of it, where every row is a column\&. 
.PP
\fBParameters:\fP
.RS 4
\fImatrix\fP What to transpose 
.RE
.PP
\fBReturns:\fP
.RS 4
A reflected \fCmatrix\fP 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Type of the \fC\fBMatrix\fP\fP 
.br
\fIW\fP Width of the \fC\fBMatrix\fP\fP 
.br
\fIH\fP Height of the \fC\fBMatrix\fP\fP 
.RE
.PP

.PP
Definition at line 492 of file Matrix\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for MACE from the source code\&.
