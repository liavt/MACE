.TH "mc::gfx::FrameBuffer" 3 "Sun Dec 11 2016" "Version Alpha" "MACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mc::gfx::FrameBuffer \- Represents an OpenGL Framebuffer \fBObject\fP which allows rendering to a non-screen location\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Buffer\&.h>\fP
.PP
Inherits \fBmc::gfx::Object\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBinit\fP () override"
.br
.RI "\fICalls the corresponding glCreate* function and assigns an ID\&. \fP"
.ti -1c
.RI "void \fBdestroy\fP () override"
.br
.RI "\fICalls the corresponding glDestroy* function and deletes the ID\&. \fP"
.ti -1c
.RI "void \fBattachTexture\fP (const GLenum &target, const GLenum &attachment, const GLuint &textureID, const GLint &level=0)"
.br
.RI "\fIAttaches a texture to this \fC\fBFrameBuffer\fP\fP \fP"
.ti -1c
.RI "void \fBattachTexture1D\fP (const GLenum &target, const GLenum &attachment, const GLenum &texTarget, const GLuint &textureID, const GLint &level=0)"
.br
.RI "\fIAttaches a texture to this \fC\fBFrameBuffer\fP\fP \fP"
.ti -1c
.RI "void \fBattachTexture2D\fP (const GLenum &target, const GLenum &attachment, const GLenum &texTarget, const GLuint &textureID, const GLint &level=0)"
.br
.RI "\fIAttaches a texture to this \fC\fBFrameBuffer\fP\fP \fP"
.ti -1c
.RI "void \fBattachTexture3D\fP (const GLenum &target, const GLenum &attachment, const GLenum &texTarget, const GLuint &textureID, const GLint &level=0, const GLint &layer=0)"
.br
.RI "\fIAttaches a texture to this \fC\fBFrameBuffer\fP\fP \fP"
.ti -1c
.RI "void \fBattachTextureLayer\fP (const GLenum &target, const GLenum &attachment, const GLuint &texture, const GLint &level=0, const GLint &layer=0)"
.br
.RI "\fIAttaches a single layer from a texture to this \fC\fBFrameBuffer\fP\fP \fP"
.ti -1c
.RI "void \fBattachRenderbuffer\fP (const GLenum &target, const GLenum &attachment, const \fBRenderBuffer\fP &buffer)"
.br
.RI "\fIAttaches a \fC\fBRenderBuffer\fP\fP to this \fC\fBFrameBuffer\fP\fP for rendering\&. \fP"
.ti -1c
.RI "void \fBsetDrawBuffers\fP (const \fBSize\fP &arrSize, const GLenum *buffers)"
.br
.RI "\fISpecifies what buffers to render to\&. \fP"
.ti -1c
.RI "void \fBsetReadBuffer\fP (const \fBEnum\fP &mode)"
.br
.RI "\fISelect which color buffer to use for reading via \fBFrameBuffer::readPixels(const int&, const int&, const Size&, const Size&, const Enum&, const Enum&, void*) const\fP\&. \fP"
.ti -1c
.RI "void \fBreadPixels\fP (const int &x, const int &y, const \fBSize\fP &width, const \fBSize\fP &height, const \fBEnum\fP &format, const \fBEnum\fP &type, void *data) const "
.br
.RI "\fIRead pixels from this \fC\fBFrameBuffer\fP\fP \fP"
.ti -1c
.RI "void \fBsetPixelStore\fP (const \fBEnum\fP &name, const float &param)"
.br
.RI "\fISet the pixel storage mode for this \fC\fBFrameBuffer\fP\fP for use in \fBFrameBuffer::readPixels(const int&, const int&, const Size&, const Size&, const Enum&, const Enum&, void*) const\fP\&. \fP"
.ti -1c
.RI "void \fBsetPixelStore\fP (const \fBEnum\fP &name, const int &param)"
.br
.RI "\fISet the pixel storage mode for this \fC\fBFrameBuffer\fP\fP for use in \fBFrameBuffer::readPixels(const int&, const int&, const Size&, const Size&, const Enum&, const Enum&, void*) const\fP\&. \fP"
.ti -1c
.RI "bool \fBisCreated\fP () const  override"
.br
.RI "\fIQueries OpenGL whether this \fBObject\fP's ID is a valid object\&. \fP"
.ti -1c
.RI "GLenum \fBcheckStatus\fP (const GLenum &target)"
.br
.RI "\fIQueries OpenGL for the status of this `FrameBuffer\&. \fP"
.ti -1c
.RI "virtual void \fBbind\fP () const "
.br
.RI "\fIBinds this \fC\fBObject\fP\fP to be used in an OpenGL function\&. \fP"
.ti -1c
.RI "virtual void \fBunbind\fP () const "
.br
.RI "\fIUnbinds this \fC\fBObject\fP\fP which is equivalent to binding ID 0\&. \fP"
.ti -1c
.RI "\fBIndex\fP \fBgetID\fP () const "
.br
.RI "\fIRetrieves the current ID that this \fC\fBObject\fP\fP represents\&. \fP"
.ti -1c
.RI "bool \fBoperator==\fP (const \fBObject\fP &other) const "
.br
.RI "\fICompares if 2 \fCObjects\fP are equal\&. \fP"
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBObject\fP &other) const "
.br
.RI "\fICompares if 2 \fCObjects\fP are not equal\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBIndex\fP \fBid\fP = 0"
.br
.RI "\fIThe ID of this `Object\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Represents an OpenGL Framebuffer \fBObject\fP which allows rendering to a non-screen location\&. 

This also allows rendering to a \fC\fBTexture\fP\fP or \fC\fBRenderBuffer\fP\fP object\&. 
.PP
This is not a subclass of the \fC\fBBuffer\fP\fP object as this is technically not an OpenGL buffer\&. The name is misleading\&.
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/Framebuffer_Object 
.PP
\fBRenderBuffer\fP 
.PP
\fBTexture\fP 
.RE
.PP

.PP
Definition at line 274 of file Buffer\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void mc::gfx::FrameBuffer::attachRenderbuffer (const GLenum & target, const GLenum & attachment, const \fBRenderBuffer\fP & buffer)"

.PP
Attaches a \fC\fBRenderBuffer\fP\fP to this \fC\fBFrameBuffer\fP\fP for rendering\&. 
.PP
\fBParameters:\fP
.RS 4
\fItarget\fP The framebuffer target\&. Must be \fCGL_DRAW_FRAMEBUFFER\fP, \fCGL_READ_FRAMEBUFFER\fP or \fCGL_FRAMEBUFFER\fP 
.br
\fIattachment\fP Which attachment port to use 
.br
\fIbuffer\fP The \fC\fBRenderBuffer\fP\fP to use\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/GLAPI/glFramebufferRenderbuffer 
.RE
.PP

.SS "void mc::gfx::FrameBuffer::attachTexture (const GLenum & target, const GLenum & attachment, const GLuint & textureID, const GLint & level = \fC0\fP)"

.PP
Attaches a texture to this \fC\fBFrameBuffer\fP\fP 
.PP
\fBParameters:\fP
.RS 4
\fItarget\fP The framebuffer target\&. Must be \fCGL_DRAW_FRAMEBUFFER\fP, \fCGL_READ_FRAMEBUFFER\fP or \fCGL_FRAMEBUFFER\fP 
.br
\fIattachment\fP Which attachment port to use\&. 
.br
\fItextureID\fP ID for the \fC\fBTexture\fP\fP to attach\&. See \fBTexture::getID() const\fP 
.br
\fIlevel\fP Mipmap level to attach\&. Is 0 by default\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/GLAPI/glFramebufferTexture 
.PP
\fBsetDrawBuffers(const Size&, const GLenum*)\fP 
.RE
.PP
\fBTodo\fP
.RS 4
Replace this with the actual \fBTexture\fP class 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::FrameBuffer::attachTexture1D (const GLenum & target, const GLenum & attachment, const GLenum & texTarget, const GLuint & textureID, const GLint & level = \fC0\fP)"

.PP
Attaches a texture to this \fC\fBFrameBuffer\fP\fP 
.PP
\fBParameters:\fP
.RS 4
\fItarget\fP The framebuffer target\&. Must be \fCGL_DRAW_FRAMEBUFFER\fP, \fCGL_READ_FRAMEBUFFER\fP or \fCGL_FRAMEBUFFER\fP 
.br
\fIattachment\fP Which attachment port to use\&. 
.br
\fItextureID\fP ID for the \fC\fBTexture\fP\fP to attach\&. See \fBTexture::getID() const\fP 
.br
\fIlevel\fP Mipmap level to attach\&. Is 0 by default\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/GLAPI/glFramebufferTexture 
.PP
\fBsetDrawBuffers(const Size&, const GLenum*)\fP 
.RE
.PP
\fBTodo\fP
.RS 4
Replace this with the actual \fBTexture\fP class 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBParameters:\fP
.RS 4
\fItexTarget\fP Target for the texture\&. If it is a cubemap, it must have a special target as specified in the OpenGL wiki link\&. 
.RE
.PP

.SS "void mc::gfx::FrameBuffer::attachTexture2D (const GLenum & target, const GLenum & attachment, const GLenum & texTarget, const GLuint & textureID, const GLint & level = \fC0\fP)"

.PP
Attaches a texture to this \fC\fBFrameBuffer\fP\fP 
.PP
\fBParameters:\fP
.RS 4
\fItarget\fP The framebuffer target\&. Must be \fCGL_DRAW_FRAMEBUFFER\fP, \fCGL_READ_FRAMEBUFFER\fP or \fCGL_FRAMEBUFFER\fP 
.br
\fIattachment\fP Which attachment port to use\&. 
.br
\fItextureID\fP ID for the \fC\fBTexture\fP\fP to attach\&. See \fBTexture::getID() const\fP 
.br
\fIlevel\fP Mipmap level to attach\&. Is 0 by default\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/GLAPI/glFramebufferTexture 
.PP
\fBsetDrawBuffers(const Size&, const GLenum*)\fP 
.RE
.PP
\fBTodo\fP
.RS 4
Replace this with the actual \fBTexture\fP class 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBParameters:\fP
.RS 4
\fItexTarget\fP Target for the texture\&. If it is a cubemap, it must have a special target as specified in the OpenGL wiki link\&. 
.RE
.PP

.SS "void mc::gfx::FrameBuffer::attachTexture3D (const GLenum & target, const GLenum & attachment, const GLenum & texTarget, const GLuint & textureID, const GLint & level = \fC0\fP, const GLint & layer = \fC0\fP)"

.PP
Attaches a texture to this \fC\fBFrameBuffer\fP\fP 
.PP
\fBParameters:\fP
.RS 4
\fItarget\fP The framebuffer target\&. Must be \fCGL_DRAW_FRAMEBUFFER\fP, \fCGL_READ_FRAMEBUFFER\fP or \fCGL_FRAMEBUFFER\fP 
.br
\fIattachment\fP Which attachment port to use\&. 
.br
\fItextureID\fP ID for the \fC\fBTexture\fP\fP to attach\&. See \fBTexture::getID() const\fP 
.br
\fIlevel\fP Mipmap level to attach\&. Is 0 by default\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/GLAPI/glFramebufferTexture 
.PP
\fBsetDrawBuffers(const Size&, const GLenum*)\fP 
.RE
.PP
\fBTodo\fP
.RS 4
Replace this with the actual \fBTexture\fP class 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBParameters:\fP
.RS 4
\fItexTarget\fP Target for the texture\&. If it is a cubemap, it must have a special target as specified in the OpenGL wiki link\&. 
.br
\fIlayer\fP Which layer of the 3-dimensional image to use\&. It is 0 by default\&. 
.RE
.PP

.SS "void mc::gfx::FrameBuffer::attachTextureLayer (const GLenum & target, const GLenum & attachment, const GLuint & texture, const GLint & level = \fC0\fP, const GLint & layer = \fC0\fP)"

.PP
Attaches a single layer from a texture to this \fC\fBFrameBuffer\fP\fP 
.PP
\fBParameters:\fP
.RS 4
\fItarget\fP The framebuffer target\&. Must be \fCGL_DRAW_FRAMEBUFFER\fP, \fCGL_READ_FRAMEBUFFER\fP or \fCGL_FRAMEBUFFER\fP 
.br
\fIattachment\fP Which attachment port to use\&. 
.br
\fItexture\fP ID for the \fC\fBTexture\fP\fP to attach\&. See \fBTexture::getID() const\fP 
.br
\fIlevel\fP Mipmap level to attach\&. Is 0 by default\&. 
.br
\fIlayer\fP Which layer of the texture to use\&. It is 0 by default\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/GLAPI/glFramebufferTextureLayer 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "virtual void mc::gfx::Object::bind () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Binds this \fC\fBObject\fP\fP to be used in an OpenGL function\&. 
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::unbind() const\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If this \fC\fBObject\fP\fP has not been created yet 
.RE
.PP

.SS "GLenum mc::gfx::FrameBuffer::checkStatus (const GLenum & target)"

.PP
Queries OpenGL for the status of this `FrameBuffer\&. \fCCan be used to detect whether this\fPFrameBuffer` encountered an error during creation\&. 
.PP
\fBParameters:\fP
.RS 4
\fItarget\fP The framebuffer target\&. Must be \fCGL_DRAW_FRAMEBUFFER\fP, \fCGL_READ_FRAMEBUFFER\fP or \fCGL_FRAMEBUFFER\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fC\fBFrameBuffer\fP\fP status\&. The full list of enums is described in the OpenGL specification\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/GLAPI/glCheckFramebufferStatus 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::FrameBuffer::destroy ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Calls the corresponding glDestroy* function and deletes the ID\&. 
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::init()\fP 
.PP
\fBObject::bind() const\fP 
.PP
\fBObject::unbind\fP const 
.PP
\fBObject::isCreated() const\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If this \fC\fBObject\fP\fP has not been created yet (\fBObject::init()\fP has not been called) 
.RE
.PP

.PP
Implements \fBmc::gfx::Object\fP\&.
.SS "\fBIndex\fP mc::gfx::Object::getID () const\fC [inherited]\fP"

.PP
Retrieves the current ID that this \fC\fBObject\fP\fP represents\&. The ID is an unsigned number that acts like a pointer to OpenGL memory\&. It is assigned when \fBObject::init()\fP is called\&. 
.PP
If it is 0, the \fC\fBObject\fP\fP is considered uncreated\&. 
.PP
When using \fBObject::bind() const \fPit will bind to this ID\&. \fBObject::unbind() const \fPwill bind to ID 0, which is the equivelant of a null pointer\&. 
.PP
\fBReturns:\fP
.RS 4
The ID represented by this \fC\fBObject\fP\fP 
.RE
.PP

.SS "void mc::gfx::FrameBuffer::init ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Calls the corresponding glCreate* function and assigns an ID\&. 
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::destroy()\fP 
.PP
\fBObject::bind() const\fP 
.PP
\fBObject::unbind\fP const 
.PP
\fBObject::isCreated() const\fP 
.RE
.PP

.PP
Implements \fBmc::gfx::Object\fP\&.
.SS "bool mc::gfx::FrameBuffer::isCreated () const\fC [override]\fP, \fC [virtual]\fP"

.PP
Queries OpenGL whether this \fBObject\fP's ID is a valid object\&. 
.PP
\fBReturns:\fP
.RS 4
Whether this \fC\fBObject\fP\fP represents memory 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::bind() const\fP 
.PP
\fBObject::init()\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.PP
Implements \fBmc::gfx::Object\fP\&.
.SS "bool mc::gfx::Object::operator!= (const \fBObject\fP & other) const\fC [inherited]\fP"

.PP
Compares if 2 \fCObjects\fP are not equal\&. Their ID is compared\&. 
.PP
\fBSee also:\fP
.RS 4
\fBObject::getID() const\fP 
.PP
\fBObject::operator==(const Object&) const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether \fCthis\fP and \fCother\fP are different 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP What to compare with 
.RE
.PP

.SS "bool mc::gfx::Object::operator== (const \fBObject\fP & other) const\fC [inherited]\fP"

.PP
Compares if 2 \fCObjects\fP are equal\&. Their ID is compared\&. 
.PP
\fBSee also:\fP
.RS 4
\fBObject::getID() const\fP 
.PP
\fBObject::operator!=(const Object&) const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether \fCthis\fP and \fCother\fP are the same 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP What to compare with 
.RE
.PP

.SS "void mc::gfx::FrameBuffer::readPixels (const int & x, const int & y, const \fBSize\fP & width, const \fBSize\fP & height, const \fBEnum\fP & format, const \fBEnum\fP & type, void * data) const"

.PP
Read pixels from this \fC\fBFrameBuffer\fP\fP 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP The x-coordinate of the lower-left pixel block you want to read\&. The origin is the lower left corner of the framebuffer 
.br
\fIy\fP The y-coordinate of the lower-left pixel block you want to read\&. The origin is the lower left corner of the framebuffer 
.br
\fIwidth\fP The width of the pixel block you want to read\&. A width and height of 1 means a single pixel 
.br
\fIheight\fP The height of the pixel block you want to read\&. A width and height of 1 means a single pixel 
.br
\fIformat\fP The format of the pixel data\&. Must be one of GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA\&. 
.br
\fItype\fP The type of the pixel data 
.br
\fIdata\fP Pointer to where you want the data to be written to\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/sdk/docs/man/html/glReadPixels.xhtml 
.PP
\fBFrameBuffer::setPixelStore(const Enum&, const float&)\fP 
.PP
\fBFrameBuffer::setReadBuffer(const Enum&)\fP; 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::FrameBuffer::setDrawBuffers (const \fBSize\fP & arrSize, const GLenum * buffers)"

.PP
Specifies what buffers to render to\&. Takes in an array of attachments\&. A \fC\fBRenderBuffer\fP\fP or \fC\fBTexture\fP\fP can be attached to act as a draw buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIarrSize\fP Size of the array of render buffers 
.br
\fIbuffers\fP Pointer to the first element of the array 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/GLAPI/glDrawBuffers 
.PP
FrameBuffer::attachTexture(const GLenum&, const GLenum&, const GLenum&, const GLuint&) 
.PP
\fBFrameBuffer::attachTexture1D(const GLenum&, const GLenum&, const GLenum&, const GLuint&, const GLint&)\fP 
.PP
\fBFrameBuffer::attachTexture2D(const GLenum&, const GLenum&, const GLenum&, const GLuint&, const GLint&)\fP 
.PP
FrameBuffer::attachTexture2D(const GLenum&, const GLenum&, const GLenum&, const GLuint&, const GLint&, const GLint&) 
.PP
FrameBuffer::attachTextureLayer(const GLenum&, const GLenum&, const GLuint&, const GLint&) 
.PP
\fBFrameBuffer::attachRenderbuffer(const GLenum&, const GLenum&, const RenderBuffer&)\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::FrameBuffer::setPixelStore (const \fBEnum\fP & name, const float & param)"

.PP
Set the pixel storage mode for this \fC\fBFrameBuffer\fP\fP for use in \fBFrameBuffer::readPixels(const int&, const int&, const Size&, const Size&, const Enum&, const Enum&, void*) const\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The parameter to change 
.br
\fIparam\fP What to change it to 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/sdk/docs/man/html/glPixelStore.xhtml 
.PP
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::FrameBuffer::setPixelStore (const \fBEnum\fP & name, const int & param)"

.PP
Set the pixel storage mode for this \fC\fBFrameBuffer\fP\fP for use in \fBFrameBuffer::readPixels(const int&, const int&, const Size&, const Size&, const Enum&, const Enum&, void*) const\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The parameter to change 
.br
\fIparam\fP What to change it to 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/sdk/docs/man/html/glPixelStore.xhtml 
.PP
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::FrameBuffer::setReadBuffer (const \fBEnum\fP & mode)"

.PP
Select which color buffer to use for reading via \fBFrameBuffer::readPixels(const int&, const int&, const Size&, const Size&, const Enum&, const Enum&, void*) const\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fImode\fP Which attachment to use 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBFrameBuffer::setPixelStore(const Enum&, const float&)\fP 
.PP
https://www.opengl.org/sdk/docs/man/html/glReadBuffer.xhtml 
.PP
FrameBuffer::attachTexture(const GLenum&, const GLenum&, const GLenum&, const GLuint&) 
.PP
\fBFrameBuffer::attachTexture1D(const GLenum&, const GLenum&, const GLenum&, const GLuint&, const GLint&)\fP 
.PP
\fBFrameBuffer::attachTexture2D(const GLenum&, const GLenum&, const GLenum&, const GLuint&, const GLint&)\fP 
.PP
FrameBuffer::attachTexture2D(const GLenum&, const GLenum&, const GLenum&, const GLuint&, const GLint&, const GLint&) 
.PP
FrameBuffer::attachTextureLayer(const GLenum&, const GLenum&, const GLuint&, const GLint&) 
.PP
\fBFrameBuffer::attachRenderbuffer(const GLenum&, const GLenum&, const RenderBuffer&)\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "virtual void mc::gfx::Object::unbind () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Unbinds this \fC\fBObject\fP\fP which is equivalent to binding ID 0\&. 
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::bind() const\fP 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBIndex\fP mc::gfx::Object::id = 0\fC [protected]\fP, \fC [inherited]\fP"

.PP
The ID of this `Object\&. ` Should be set in \fBObject::init()\fP and become 0 in \fBObject::destroy()\fP 
.PP
\fBObject::getID() const \fPreturns this\&. 
.PP
Definition at line 123 of file Buffer\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MACE from the source code\&.
