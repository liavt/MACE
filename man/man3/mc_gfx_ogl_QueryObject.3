.TH "mc::gfx::ogl::QueryObject" 3 "Sat Dec 17 2016" "Version Alpha" "MACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mc::gfx::ogl::QueryObject \- Special object that is used for asynchronous queries of information from the GPU\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <OGL\&.h>\fP
.PP
Inherits \fBmc::gfx::ogl::Object\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbegin\fP (const \fBEnum\fP &target)"
.br
.RI "\fIThis \fC\fBQueryObject\fP\fP will begin querying data for a specified target\&. \fP"
.ti -1c
.RI "void \fBend\fP (const \fBEnum\fP &target)"
.br
.RI "\fIStops querying data for a certain target\&. \fP"
.ti -1c
.RI "void \fBget\fP (const \fBEnum\fP &name, int *data) const "
.br
.RI "\fIRetrieves data from a begin/end pair\&. \fP"
.ti -1c
.RI "void \fBget\fP (const \fBEnum\fP &name, unsigned int *data) const "
.br
.RI "\fIRetrieves data from a begin/end pair\&. \fP"
.ti -1c
.RI "void \fBget\fP (const \fBEnum\fP &name, int64_t *data) const "
.br
.RI "\fIRetrieves data from a begin/end pair\&. \fP"
.ti -1c
.RI "void \fBget\fP (const \fBEnum\fP &name, uint64_t *data) const "
.br
.RI "\fIRetrieves data from a begin/end pair\&. \fP"
.ti -1c
.RI "void \fBcounter\fP ()"
.br
.RI "\fIRecords the current GPU time into this `QueryObject\&. \fP"
.ti -1c
.RI "void \fBinit\fP () final"
.br
.RI "\fICalls the corresponding glCreate* function and assigns an ID\&. \fP"
.ti -1c
.RI "void \fBdestroy\fP () final"
.br
.RI "\fICalls the corresponding glDestroy* function and deletes the ID\&. \fP"
.ti -1c
.RI "bool \fBisCreated\fP () const  final"
.br
.RI "\fIQueries OpenGL whether this \fBObject\fP's ID is a valid object\&. \fP"
.ti -1c
.RI "\fBIndex\fP \fBgetID\fP () const "
.br
.RI "\fIRetrieves the current ID that this \fC\fBObject\fP\fP represents\&. \fP"
.ti -1c
.RI "bool \fBoperator==\fP (const \fBObject\fP &other) const "
.br
.RI "\fICompares if 2 \fCObjects\fP are equal\&. \fP"
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBObject\fP &other) const "
.br
.RI "\fICompares if 2 \fCObjects\fP are not equal\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBIndex\fP \fBid\fP = 0"
.br
.RI "\fIThe ID of this `Object\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Special object that is used for asynchronous queries of information from the GPU\&. 

Even though it extends \fC\fBObject\fP\fP it does not implement the \fBObject::bind() const \fPor \fCunbind()\fP functions\&. Instead, the \fC\fBQueryObject\fP\fP uses the \fBQueryObject::begin(const Enum&)\fP and \fBQueryObject::end(const Enum&)\fP functions\&. 
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/Query_Object 
.RE
.PP

.PP
Definition at line 188 of file OGL\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void mc::gfx::ogl::QueryObject::begin (const \fBEnum\fP & target)"

.PP
This \fC\fBQueryObject\fP\fP will begin querying data for a specified target\&. Replacement for the \fBObject::bind() const \fPfunction\&. 
.PP
The results can be queried with one of the \fC\fBQueryObject::get\fP\fP funcitons\&. 
.PP
\fBParameters:\fP
.RS 4
\fItarget\fP THe kind of data to query\&. Can not be GL_TIMESTAMP\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/GLAPI/glBeginQuery 
.PP
\fBQueryObject::counter()\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
When you use this function make sure to also call \fBQueryObject::end(const Enum&)\fP eventually 
.PP
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::ogl::QueryObject::counter ()"

.PP
Records the current GPU time into this `QueryObject\&. ` This returns immediately\&. 
.PP
Can be used in conjunction with \fBQueryObject::begin(const Enum&)\fP with a target of \fCGL_TIME_ELAPSED\fP 
.PP
\fBSee also:\fP
.RS 4
\fBQueryObject::end(const Enum&)\fP 
.PP
\fBQueryObject::get(const Enum&, uint64_t*) const\fP 
.PP
https://www.opengl.org/wiki/GLAPI/glQueryCounter 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::ogl::QueryObject::destroy ()\fC [final]\fP, \fC [virtual]\fP"

.PP
Calls the corresponding glDestroy* function and deletes the ID\&. 
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::init()\fP 
.PP
\fBObject::bind() const\fP 
.PP
\fBObject::unbind\fP const 
.PP
\fBObject::isCreated() const\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If this \fC\fBObject\fP\fP has not been created yet (\fBObject::init()\fP has not been called) 
.RE
.PP

.PP
Implements \fBmc::gfx::ogl::Object\fP\&.
.SS "void mc::gfx::ogl::QueryObject::end (const \fBEnum\fP & target)"

.PP
Stops querying data for a certain target\&. Replacement for the \fBObject::unbind() const \fPfunction 
.PP
The results can be queried with one of the \fC\fBQueryObject::get\fP\fP funcitons\&. 
.PP
\fBParameters:\fP
.RS 4
\fItarget\fP The kind of data being queried\&. Can not be GL_TIMESTAMP 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/GLAPI/glBeginQuery 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If QueryObject::begin(const Enum& was never called) 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::ogl::QueryObject::get (const \fBEnum\fP & name, int * data) const"

.PP
Retrieves data from a begin/end pair\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the results you want to retrieve\&. Must be GL_QUERY_RESULT, GL_QUERY_RESULT_NO_WAIT​, or GL_QUERY_RESULT_AVAILABLE 
.br
\fIdata\fP Where to put the data into\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQueryObject::begin(const Enum&)\fP 
.PP
\fBQueryObject::end(const Enum&)\fP 
.PP
\fBQueryObject::counter()\fP 
.PP
https://www.opengl.org/wiki/GLAPI/glGetQueryObject 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::ogl::QueryObject::get (const \fBEnum\fP & name, unsigned int * data) const"

.PP
Retrieves data from a begin/end pair\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the results you want to retrieve\&. Must be GL_QUERY_RESULT, GL_QUERY_RESULT_NO_WAIT​, or GL_QUERY_RESULT_AVAILABLE 
.br
\fIdata\fP Where to put the data into\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQueryObject::begin(const Enum&)\fP 
.PP
\fBQueryObject::end(const Enum&)\fP 
.PP
\fBQueryObject::counter()\fP 
.PP
https://www.opengl.org/wiki/GLAPI/glGetQueryObject 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::ogl::QueryObject::get (const \fBEnum\fP & name, int64_t * data) const"

.PP
Retrieves data from a begin/end pair\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the results you want to retrieve\&. Must be GL_QUERY_RESULT, GL_QUERY_RESULT_NO_WAIT​, or GL_QUERY_RESULT_AVAILABLE 
.br
\fIdata\fP Where to put the data into\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQueryObject::begin(const Enum&)\fP 
.PP
\fBQueryObject::end(const Enum&)\fP 
.PP
\fBQueryObject::counter()\fP 
.PP
https://www.opengl.org/wiki/GLAPI/glGetQueryObject 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::ogl::QueryObject::get (const \fBEnum\fP & name, uint64_t * data) const"

.PP
Retrieves data from a begin/end pair\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The name of the results you want to retrieve\&. Must be GL_QUERY_RESULT, GL_QUERY_RESULT_NO_WAIT​, or GL_QUERY_RESULT_AVAILABLE 
.br
\fIdata\fP Where to put the data into\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQueryObject::begin(const Enum&)\fP 
.PP
\fBQueryObject::end(const Enum&)\fP 
.PP
\fBQueryObject::counter()\fP 
.PP
https://www.opengl.org/wiki/GLAPI/glGetQueryObject 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "\fBIndex\fP mc::gfx::ogl::Object::getID () const\fC [inherited]\fP"

.PP
Retrieves the current ID that this \fC\fBObject\fP\fP represents\&. The ID is an unsigned number that acts like a pointer to OpenGL memory\&. It is assigned when \fBObject::init()\fP is called\&. 
.PP
If it is 0, the \fC\fBObject\fP\fP is considered uncreated\&. 
.PP
When using \fBObject::bind() const \fPit will bind to this ID\&. \fBObject::unbind() const \fPwill bind to ID 0, which is the equivelant of a null pointer\&. 
.PP
\fBReturns:\fP
.RS 4
The ID represented by this \fC\fBObject\fP\fP 
.RE
.PP

.SS "void mc::gfx::ogl::QueryObject::init ()\fC [final]\fP, \fC [virtual]\fP"

.PP
Calls the corresponding glCreate* function and assigns an ID\&. 
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::destroy()\fP 
.PP
\fBObject::bind() const\fP 
.PP
\fBObject::unbind\fP const 
.PP
\fBObject::isCreated() const\fP 
.RE
.PP

.PP
Implements \fBmc::gfx::ogl::Object\fP\&.
.SS "bool mc::gfx::ogl::QueryObject::isCreated () const\fC [final]\fP, \fC [virtual]\fP"

.PP
Queries OpenGL whether this \fBObject\fP's ID is a valid object\&. 
.PP
\fBReturns:\fP
.RS 4
Whether this \fC\fBObject\fP\fP represents memory 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::bind() const\fP 
.PP
\fBObject::init()\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.PP
Implements \fBmc::gfx::ogl::Object\fP\&.
.SS "bool mc::gfx::ogl::Object::operator!= (const \fBObject\fP & other) const\fC [inherited]\fP"

.PP
Compares if 2 \fCObjects\fP are not equal\&. 
.PP
\fBSee also:\fP
.RS 4
\fBObject::getID() const\fP 
.PP
\fBObject::operator==(const Object&) const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether \fCthis\fP and \fCother\fP are different 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP What to compare with 
.RE
.PP

.SS "bool mc::gfx::ogl::Object::operator== (const \fBObject\fP & other) const\fC [inherited]\fP"

.PP
Compares if 2 \fCObjects\fP are equal\&. 
.PP
\fBSee also:\fP
.RS 4
\fBObject::getID() const\fP 
.PP
\fBObject::operator!=(const Object&) const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether \fCthis\fP and \fCother\fP are the same 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP What to compare with 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBIndex\fP mc::gfx::ogl::Object::id = 0\fC [protected]\fP, \fC [inherited]\fP"

.PP
The ID of this `Object\&. ` Should be set in \fBObject::init()\fP and become 0 in \fBObject::destroy()\fP 
.PP
\fBObject::getID() const \fPreturns this\&. 
.PP
Definition at line 169 of file OGL\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MACE from the source code\&.
