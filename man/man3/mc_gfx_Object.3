.TH "mc::gfx::Object" 3 "Sat Dec 10 2016" "Version Alpha" "MACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mc::gfx::Object \- Represents a OpenGL object in memory\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Buffer\&.h>\fP
.PP
Inherited by \fBmc::gfx::Buffer\fP, \fBmc::gfx::FrameBuffer\fP, \fBmc::gfx::RenderBuffer\fP, \fBmc::gfx::Texture\fP, and \fBmc::gfx::VertexArray\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~Object\fP ()=default"
.br
.RI "\fIVirtual destructor for subclasses and safety\&. \fP"
.ti -1c
.RI "virtual void \fBinit\fP ()=0"
.br
.RI "\fICalls the corresponding glCreate* function and assigns an ID\&. \fP"
.ti -1c
.RI "virtual void \fBdestroy\fP ()=0"
.br
.RI "\fICalls the corresponding glDestroy* function and deletes the ID\&. \fP"
.ti -1c
.RI "void \fBbind\fP () const "
.br
.RI "\fIBinds this \fC\fBObject\fP\fP to be used in an OpenGL function\&. \fP"
.ti -1c
.RI "void \fBunbind\fP () const "
.br
.RI "\fIUnbinds this \fC\fBObject\fP\fP which is equivalent to binding ID 0\&. \fP"
.ti -1c
.RI "virtual bool \fBisCreated\fP () const  =0"
.br
.RI "\fIQueries OpenGL whether this \fBObject\fP's ID is a valid object\&. \fP"
.ti -1c
.RI "\fBIndex\fP \fBgetID\fP () const "
.br
.RI "\fIRetrieves the current ID that this \fC\fBObject\fP\fP represents\&. \fP"
.ti -1c
.RI "bool \fBoperator==\fP (const \fBObject\fP &other) const "
.br
.RI "\fICompares if 2 \fCObjects\fP are equal\&. \fP"
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBObject\fP &other) const "
.br
.RI "\fICompares if 2 \fCObjects\fP are not equal\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBbindIndex\fP (const \fBIndex\fP &\fBid\fP) const  =0"
.br
.RI "\fIIntended to be overloaded to bind to a certain index\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBIndex\fP \fBid\fP = 0"
.br
.RI "\fIThe ID of this `Object\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Represents a OpenGL object in memory\&. 

All abstractions for OpenGL objects override this\&. 
.PP
Due to how the OpenGL model works, using an OpenGL function outside of a thread with a context will throw an error\&. Thus, this class does not follow the RAII model\&. 
.PP
A subclass of \fC\fBObject\fP\fP will observe the following rules:
.IP "\(bu" 2
The constructor and destructor will do nothing, as there is no guarantee that the \fC\fBObject\fP\fP will be declared in a OpenGL thread\&.
.IP "\(bu" 2
The \fBinit()\fP and \fBdestroy()\fP functions must be called in an OpenGL thread and will call the coressponding glCreate* and glDestroy* functions
.IP "\(bu" 2
The \fBbind()\fP and \fBunbind()\fP functions must be called in an OpenGL thread and will call the coressponding glBind* functions\&.
.IP "\(bu" 2
It will have an ID generated by glCreate* and be deleted in glDelete*\&.
.IP "\(bu" 2
\fBbind()\fP will use the ID created by glCreate* and no other
.IP "\(bu" 2
\fBisCreated()\fP has to be called in an OpenGL thread
.IP "\(bu" 2
It will override == and != 
.PP
\fBSee also:\fP
.RS 4
\fBBuffer\fP 
.PP
https://www.opengl.org/wiki/OpenGL_Object 
.RE
.PP

.PP

.PP
Definition at line 39 of file Buffer\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "virtual mc::gfx::Object::~Object ()\fC [virtual]\fP, \fC [default]\fP"

.PP
Virtual destructor for subclasses and safety\&. 
.SH "Member Function Documentation"
.PP 
.SS "void mc::gfx::Object::bind () const"

.PP
Binds this \fC\fBObject\fP\fP to be used in an OpenGL function\&. 
.PP
\fBNote:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::unbind() const\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If this \fC\fBObject\fP\fP has not been created yet 
.RE
.PP

.SS "virtual void mc::gfx::Object::bindIndex (const \fBIndex\fP & id) const\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Intended to be overloaded to bind to a certain index\&. \fBObject::bind() const \fPand \fBObject::unbind() const \fPboth use this function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP Index to bind to\&. If it is 0, it needs to be unbinded\&. 
.RE
.PP
\fBNote:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBWarning:\fP
.RS 4
This should only be used internally or by advanced users\&. Misuse can cause undefined behavior 
.RE
.PP

.SS "virtual void mc::gfx::Object::destroy ()\fC [pure virtual]\fP"

.PP
Calls the corresponding glDestroy* function and deletes the ID\&. 
.PP
\fBNote:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::init()\fP 
.PP
\fBObject::bind() const\fP 
.PP
\fBObject::unbind\fP const 
.PP
\fBObject::isCreated() const\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If this \fC\fBObject\fP\fP has not been created yet 
.RE
.PP

.PP
Implemented in \fBmc::gfx::Buffer\fP, \fBmc::gfx::VertexArray\fP, \fBmc::gfx::Texture\fP, \fBmc::gfx::FrameBuffer\fP, and \fBmc::gfx::RenderBuffer\fP\&.
.SS "\fBIndex\fP mc::gfx::Object::getID () const"

.PP
Retrieves the current ID that this \fC\fBObject\fP\fP represents\&. The ID is an unsigned number that acts like a pointer to OpenGL memory\&. It is assigned when \fBObject::init()\fP is called\&. 
.PP
If it is 0, the \fC\fBObject\fP\fP is considered uncreated\&. 
.PP
When using \fBObject::bind() const \fPit will bind to this ID\&. \fBObject::unbind() const \fPwill bind to ID 0, which is the equivelant of a null pointer\&. 
.PP
\fBReturns:\fP
.RS 4
The ID represented by this \fC\fBObject\fP\fP 
.RE
.PP

.SS "virtual void mc::gfx::Object::init ()\fC [pure virtual]\fP"

.PP
Calls the corresponding glCreate* function and assigns an ID\&. 
.PP
\fBNote:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::destroy()\fP 
.PP
\fBObject::bind() const\fP 
.PP
\fBObject::unbind\fP const 
.PP
\fBObject::isCreated() const\fP 
.RE
.PP

.PP
Implemented in \fBmc::gfx::Buffer\fP, \fBmc::gfx::VertexArray\fP, \fBmc::gfx::Texture\fP, \fBmc::gfx::FrameBuffer\fP, and \fBmc::gfx::RenderBuffer\fP\&.
.SS "virtual bool mc::gfx::Object::isCreated () const\fC [pure virtual]\fP"

.PP
Queries OpenGL whether this \fBObject\fP's ID is a valid object\&. 
.PP
\fBReturns:\fP
.RS 4
Whether this \fC\fBObject\fP\fP represents memory 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::bind() const\fP 
.PP
\fBObject::init()\fP 
.RE
.PP
\fBNote:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.PP
Implemented in \fBmc::gfx::Buffer\fP, \fBmc::gfx::VertexArray\fP, \fBmc::gfx::Texture\fP, \fBmc::gfx::FrameBuffer\fP, and \fBmc::gfx::RenderBuffer\fP\&.
.SS "bool mc::gfx::Object::operator!= (const \fBObject\fP & other) const"

.PP
Compares if 2 \fCObjects\fP are not equal\&. Their ID is compared\&. 
.PP
\fBSee also:\fP
.RS 4
\fBObject::getID() const\fP 
.PP
\fBObject::operator==(const Object&) const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether \fCthis\fP and \fCother\fP are different 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP What to compare with 
.RE
.PP

.SS "bool mc::gfx::Object::operator== (const \fBObject\fP & other) const"

.PP
Compares if 2 \fCObjects\fP are equal\&. Their ID is compared\&. 
.PP
\fBSee also:\fP
.RS 4
\fBObject::getID() const\fP 
.PP
\fBObject::operator!=(const Object&) const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether \fCthis\fP and \fCother\fP are the same 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP What to compare with 
.RE
.PP

.SS "void mc::gfx::Object::unbind () const"

.PP
Unbinds this \fC\fBObject\fP\fP which is equivalent to binding ID 0\&. 
.PP
\fBNote:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::bind() const\fP 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBIndex\fP mc::gfx::Object::id = 0\fC [protected]\fP"

.PP
The ID of this `Object\&. ` Should be set in \fBObject::init()\fP and become 0 in \fBObject::destroy()\fP 
.PP
\fBObject::getID() const \fPreturns this\&. 
.PP
Definition at line 123 of file Buffer\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MACE from the source code\&.
