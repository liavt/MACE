.TH "mc::gfx" 3 "Sun Apr 9 2017" "Version Alpha" "MACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mc::gfx \- Namespace containing classes used for Graphics in \fBMACE\fP\&.  

.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBogl\fP"
.br
.RI "\fIContains various abstractions for OpenGL\&. \fP"
.ti -1c
.RI " \fBssl\fP"
.br
.RI "\fIHolds resources for the Standard Shader Library (SSL\&.) SSL makes it easy to interact with \fBMACE\fP entities from shaders through special header files\&. \fP"
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAlignmentComponent\fP"
.br
.ti -1c
.RI "class \fBButton\fP"
.br
.ti -1c
.RI "class \fBCallbackComponent\fP"
.br
.ti -1c
.RI "class \fBColorAttachment\fP"
.br
.ti -1c
.RI "class \fBComponent\fP"
.br
.RI "\fICan be plugged into an \fC\fBEntity\fP\fP to allow for additional functionality by listening to events\&. \fP"
.ti -1c
.RI "class \fBEntity\fP"
.br
.RI "\fIAbstract superclass for all graphical objects\&. \fP"
.ti -1c
.RI "class \fBEntity2D\fP"
.br
.ti -1c
.RI "class \fBFont\fP"
.br
.ti -1c
.RI "class \fBFPSComponent\fP"
.br
.ti -1c
.RI "class \fBGraphicsEntity\fP"
.br
.ti -1c
.RI "class \fBGroup\fP"
.br
.ti -1c
.RI "class \fBImage\fP"
.br
.ti -1c
.RI "class \fBLetter\fP"
.br
.ti -1c
.RI "class \fBProgressBar\fP"
.br
.ti -1c
.RI "class \fBRenderer\fP"
.br
.ti -1c
.RI "class \fBRenderImpl\fP"
.br
.ti -1c
.RI "class \fBRenderProtocol\fP"
.br
.ti -1c
.RI "class \fBRenderProtocol< Button >\fP"
.br
.ti -1c
.RI "class \fBRenderProtocol< Image >\fP"
.br
.ti -1c
.RI "class \fBRenderProtocol< Letter >\fP"
.br
.ti -1c
.RI "class \fBRenderProtocol< ProgressBar >\fP"
.br
.ti -1c
.RI "class \fBSelectable\fP"
.br
.ti -1c
.RI "class \fBSimpleQuadRenderer\fP"
.br
.ti -1c
.RI "class \fBText\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "using \fBEntityProperties\fP = \fBBitField\fP"
.br
.ti -1c
.RI "using \fBRenderQueue\fP = std::deque< std::pair< \fBIndex\fP, \fBGraphicsEntity\fP * >>"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBVerticalAlign\fP : Byte { \fBVerticalAlign::TOP\fP, \fBVerticalAlign::CENTER\fP, \fBVerticalAlign::BOTTOM\fP }"
.br
.ti -1c
.RI "enum \fBHorizontalAlign\fP : Byte { \fBHorizontalAlign::LEFT\fP, \fBHorizontalAlign::CENTER\fP, \fBHorizontalAlign::RIGHT\fP }"
.br
.ti -1c
.RI "enum \fBEaseFunction\fP : Byte { \fBEaseFunction::SINUSOIDAL\fP, \fBEaseFunction::COSINE\fP, \fBEaseFunction::CUBIC\fP, \fBEaseFunction::QUADRATIC\fP, \fBEaseFunction::QUARTIC\fP, \fBEaseFunction::QUINTIC\fP, \fBEaseFunction::SQUARE_ROOT\fP, \fBEaseFunction::CUBE_ROOT\fP, \fBEaseFunction::LINEAR\fP }"
.br
.ti -1c
.RI "enum \fBFonts\fP : Byte { \fBFonts::CODE\fP, \fBFonts::SANS\fP, \fBFonts::SERIF\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fB_MACE_DECLARE_ERROR\fP (BadImage)"
.br
.RI "\fIThrown when an error occured trying to read or write an image\&. \fP"
.ti -1c
.RI "\fB_MACE_DECLARE_ERROR\fP (\fBFont\fP)"
.br
.RI "\fIThrown when something relate to Freetype or fonts fails\&. \fP"
.ti -1c
.RI "\fBRenderer\fP * \fBgetRenderer\fP ()"
.br
.ti -1c
.RI "void \fBsetRenderer\fP (\fBRenderer\fP *r)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Namespace containing classes used for Graphics in \fBMACE\fP\&. 
.SH "Typedef Documentation"
.PP 
.SS "using \fBmc::gfx::EntityProperties\fP = typedef \fBBitField\fP"

.PP
Definition at line 36 of file Entity\&.h\&.
.SS "using \fBmc::gfx::RenderQueue\fP = typedef std::deque<std::pair<\fBIndex\fP, \fBGraphicsEntity\fP*>>"

.PP
Definition at line 27 of file Renderer\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBmc::gfx::EaseFunction\fP : \fBByte\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISINUSOIDAL \fP\fP
.TP
\fB\fICOSINE \fP\fP
.TP
\fB\fICUBIC \fP\fP
.TP
\fB\fIQUADRATIC \fP\fP
.TP
\fB\fIQUARTIC \fP\fP
.TP
\fB\fIQUINTIC \fP\fP
.TP
\fB\fISQUARE_ROOT \fP\fP
.TP
\fB\fICUBE_ROOT \fP\fP
.TP
\fB\fILINEAR \fP\fP
.PP
Definition at line 28 of file Entity2D\&.h\&.
.SS "enum \fBmc::gfx::Fonts\fP : \fBByte\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fICODE \fP\fP
.TP
\fB\fISANS \fP\fP
.TP
\fB\fISERIF \fP\fP
.PP
Definition at line 246 of file Entity2D\&.h\&.
.SS "enum \fBmc::gfx::HorizontalAlign\fP : \fBByte\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILEFT \fP\fP
.TP
\fB\fICENTER \fP\fP
.TP
\fB\fIRIGHT \fP\fP
.PP
Definition at line 24 of file Components\&.h\&.
.SS "enum \fBmc::gfx::VerticalAlign\fP : \fBByte\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITOP \fP\fP
.TP
\fB\fICENTER \fP\fP
.TP
\fB\fIBOTTOM \fP\fP
.PP
Definition at line 18 of file Components\&.h\&.
.SH "Function Documentation"
.PP 
.SS "mc::gfx::_MACE_DECLARE_ERROR (\fBFont\fP)"

.PP
Thrown when something relate to Freetype or fonts fails\&. 
.SS "mc::gfx::_MACE_DECLARE_ERROR (BadImage)"

.PP
Thrown when an error occured trying to read or write an image\&. 
.SS "\fBRenderer\fP* mc::gfx::getRenderer ()"

.SS "void mc::gfx::setRenderer (\fBRenderer\fP * r)"

.SH "Author"
.PP 
Generated automatically by Doxygen for MACE from the source code\&.
