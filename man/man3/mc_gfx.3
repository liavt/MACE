.TH "mc::gfx" 3 "Sat Dec 10 2016" "Version Alpha" "MACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mc::gfx \- Namespace containing classes used for Graphics in MACE\&.  

.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBssl\fP"
.br
.RI "\fIHolds resources for the Standard Shader Library (SSL\&.) SSL makes it easy to interact with MACE entities from shaders through special header files\&. \fP"
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBBuffer\fP"
.br
.ti -1c
.RI "class \fBCallbackEntity\fP"
.br
.ti -1c
.RI "class \fBComponent\fP"
.br
.ti -1c
.RI "class \fBEntity\fP"
.br
.RI "\fIAbstract superclass for all graphical objects\&. \fP"
.ti -1c
.RI "class \fBEntity2D\fP"
.br
.ti -1c
.RI "class \fBFrameBuffer\fP"
.br
.RI "\fIRepresents an OpenGL Framebuffer \fBObject\fP which allows rendering to a non-screen location\&. \fP"
.ti -1c
.RI "class \fBGraphicsEntity\fP"
.br
.ti -1c
.RI "class \fBGroup\fP"
.br
.ti -1c
.RI "class \fBImage\fP"
.br
.ti -1c
.RI "class \fBObject\fP"
.br
.RI "\fIRepresents a OpenGL object in memory\&. \fP"
.ti -1c
.RI "class \fBRenderBuffer\fP"
.br
.RI "\fIRepresents a render buffer for use with a `FrameBuffer\&. \fP"
.ti -1c
.RI "class \fBRenderer\fP"
.br
.ti -1c
.RI "class \fBRenderImpl\fP"
.br
.ti -1c
.RI "class \fBRenderProtocol\fP"
.br
.ti -1c
.RI "class \fBRenderProtocol< Entity2D >\fP"
.br
.ti -1c
.RI "class \fBShaderProgram\fP"
.br
.ti -1c
.RI "class \fBTexture\fP"
.br
.ti -1c
.RI "class \fBUniformBuffer\fP"
.br
.ti -1c
.RI "class \fBVertexArray\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "using \fBEntityProperties\fP = \fBBitField\fP"
.br
.ti -1c
.RI "using \fBGLError\fP = \fBException\fP"
.br
.ti -1c
.RI "using \fBShaderError\fP = \fBException\fP"
.br
.ti -1c
.RI "using \fBRenderQueue\fP = std::deque< std::pair< \fBIndex\fP, \fBGraphicsEntity\fP * >>"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBcheckGLError\fP ()"
.br
.ti -1c
.RI "void \fBthrowShaderError\fP (const \fBIndex\fP &shaderId, const \fBEnum\fP &type, const std::string &message)"
.br
.ti -1c
.RI "void \fBthrowShaderError\fP (const \fBIndex\fP &shaderId, const \fBEnum\fP &type)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Namespace containing classes used for Graphics in MACE\&. 
.SH "Typedef Documentation"
.PP 
.SS "using \fBmc::gfx::EntityProperties\fP = typedef \fBBitField\fP"

.PP
Definition at line 22 of file Entity\&.h\&.
.SS "using \fBmc::gfx::GLError\fP = typedef \fBException\fP"

.PP
Definition at line 20 of file GraphicsConstants\&.h\&.
.SS "using \fBmc::gfx::RenderQueue\fP = typedef std::deque<std::pair<\fBIndex\fP, \fBGraphicsEntity\fP*>>"

.PP
Definition at line 27 of file Renderer\&.h\&.
.SS "using \fBmc::gfx::ShaderError\fP = typedef \fBException\fP"

.PP
Definition at line 22 of file GraphicsConstants\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void mc::gfx::checkGLError ()"

.PP
\fBNote:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::throwShaderError (const \fBIndex\fP & shaderId, const \fBEnum\fP & type, const std::string & message)"

.PP
\fBNote:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::throwShaderError (const \fBIndex\fP & shaderId, const \fBEnum\fP & type)"

.PP
\fBNote:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for MACE from the source code\&.
