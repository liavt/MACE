.TH "mc::gfx" 3 "Fri Nov 25 2016" "Version Alpha" "MACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mc::gfx \- Namespace containing classes used for Graphics in MACE\&.  

.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBssl\fP"
.br
.RI "\fIHolds resources for the Standard Shader Library (SSL\&.) SSL makes it easy to interact with MACE entities from shaders through special header files\&. \fP"
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBBuffer\fP"
.br
.ti -1c
.RI "class \fBCallbackEntity\fP"
.br
.ti -1c
.RI "class \fBComponent\fP"
.br
.ti -1c
.RI "class \fBEntity\fP"
.br
.RI "\fIAbstract superclass for all graphical objects\&. \fP"
.ti -1c
.RI "class \fBEntity2D\fP"
.br
.ti -1c
.RI "class \fBFrameBuffer\fP"
.br
.ti -1c
.RI "class \fBGraphicsEntity\fP"
.br
.ti -1c
.RI "class \fBGroup\fP"
.br
.ti -1c
.RI "class \fBImage\fP"
.br
.ti -1c
.RI "class \fBObject\fP"
.br
.ti -1c
.RI "class \fBOpenGLContext\fP"
.br
.ti -1c
.RI "class \fBRenderBuffer\fP"
.br
.ti -1c
.RI "class \fBRenderer\fP"
.br
.ti -1c
.RI "class \fBRenderImpl\fP"
.br
.ti -1c
.RI "class \fBRenderProtocol\fP"
.br
.ti -1c
.RI "class \fBRenderProtocol< Entity2D >\fP"
.br
.ti -1c
.RI "class \fBShaderProgram\fP"
.br
.ti -1c
.RI "class \fBTexture\fP"
.br
.ti -1c
.RI "class \fBUniformBuffer\fP"
.br
.ti -1c
.RI "class \fBVertexArray\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "using \fBEntityProperties\fP = \fBBitField\fP"
.br
.ti -1c
.RI "using \fBGLError\fP = \fBException\fP"
.br
.ti -1c
.RI "using \fBShaderError\fP = \fBException\fP"
.br
.ti -1c
.RI "using \fBRenderQueue\fP = std::deque< std::pair< \fBIndex\fP, \fBEntity\fP * >>"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBEntityProperty\fP : Byte { \fBENTITY_DEAD\fP = 0, \fBENTITY_UPDATE_DISABLED\fP = 1, \fBENTITY_RENDER_DISABLED\fP = 2, \fBENTITY_INIT\fP = 3, \fBENTITY_STRETCH_X\fP = 4, \fBENTITY_STRETCH_Y\fP = 5, \fBENTITY_HOVERED\fP = 6, \fBENTITY_DIRTY\fP = 7 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBcheckGLError\fP ()"
.br
.ti -1c
.RI "void \fBthrowShaderError\fP (const \fBIndex\fP &shaderId, const \fBEnum\fP &type, const std::string &message)"
.br
.ti -1c
.RI "void \fBthrowShaderError\fP (const \fBIndex\fP &shaderId, const \fBEnum\fP &type)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Namespace containing classes used for Graphics in MACE\&. 
.SH "Typedef Documentation"
.PP 
.SS "using \fBmc::gfx::EntityProperties\fP = typedef \fBBitField\fP"

.PP
Definition at line 22 of file Entity\&.h\&.
.SS "using \fBmc::gfx::GLError\fP = typedef \fBException\fP"

.PP
Definition at line 20 of file GraphicsConstants\&.h\&.
.SS "using \fBmc::gfx::RenderQueue\fP = typedef std::deque<std::pair<\fBIndex\fP, \fBEntity\fP*>>"

.PP
Definition at line 27 of file Renderer\&.h\&.
.SS "using \fBmc::gfx::ShaderError\fP = typedef \fBException\fP"

.PP
Definition at line 22 of file GraphicsConstants\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBmc::gfx::EntityProperty\fP : \fBByte\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIENTITY_DEAD \fP\fP
Bit location representing whether an \fC\fBEntity\fP\fP is dead\&. If \fCtrue,\fP any \fBEntity\fP holding it will remove it and call \fCkill()\fP 
.PP
\fBSee also:\fP
.RS 4
Entity::getProperty(unsigned int) 
.RE
.PP

.TP
\fB\fIENTITY_UPDATE_DISABLED \fP\fP
Property defining if an \fC\fBEntity\fP\fP can be updated\&. If this is \fCtrue\fP, \fCupdate()\fP will be called by it's parent\&. 
.PP
\fBSee also:\fP
.RS 4
Entity::getProperty(unsigned int) 
.RE
.PP

.TP
\fB\fIENTITY_RENDER_DISABLED \fP\fP
Property defining if an \fC\fBEntity\fP\fP can be rendered\&. If this is \fCtrue\fP, \fCrender()\fP will be called by it's parent\&. 
.PP
\fBSee also:\fP
.RS 4
Entity::getProperty(unsigned int) 
.RE
.PP

.TP
\fB\fIENTITY_INIT \fP\fP
Flag representing whether an \fBEntity\fP's init() function has been called\&. If destroy() or update() is called and this is \fCfalse\fP, an \fCInitializationError\fP is thrown\&. 
.PP
If init() is called and this is \fCtrue\fP, an \fCInitializationError\fP is thrown\&. 
.PP
\fBSee also:\fP
.RS 4
Entity::getProperty(unsigned int) 
.RE
.PP

.TP
\fB\fIENTITY_STRETCH_X \fP\fP
Flag representing whether an \fBEntity\fP's X position should move when it's parent is resized\&. 
.PP
\fBSee also:\fP
.RS 4
\fBENTITY_STRETCH_Y\fP 
.RE
.PP

.TP
\fB\fIENTITY_STRETCH_Y \fP\fP
Flag representing whether an \fBEntity\fP's X position should move when it's parent is resized\&. 
.PP
\fBSee also:\fP
.RS 4
\fBENTITY_STRETCH_X\fP 
.RE
.PP

.TP
\fB\fIENTITY_HOVERED \fP\fP
Flag representing whether this \fC\fBEntity\fP\fP has been hovered over\&. The \fC\fBRenderProtocol\fP\fP used to render the \fC\fBEntity\fP\fP must set this\&. 
.PP
\fBSee also:\fP
.RS 4
ssl::bindEntity(Entity*) 
.RE
.PP

.TP
\fB\fIENTITY_DIRTY \fP\fP
Flag representing whether this \fC\fBEntity\fP\fP is dirty and it's positions needs to be recalculated\&. This will become true under the following conditions:
.IP "\(bu" 2
The \fC\fBEntity\fP\fP has been changed\&. Assume that any non-const function other than render() and update() will trigger this condition\&.
.IP "\(bu" 2
The window is resized, moved, or created 
.PP
.PP
Other classes that inherit \fC\fBEntity\fP\fP can also set this to true via \fBEntity::setProperty(Byte, bool)\fP 
.PP
When an \fC\fBEntity\fP\fP becomes dirty, it will propogate up the tree\&. It's parent will become dirty, it's parent will become dirty, etc\&. This will continue until it reaches the highest level \fC\fBEntity\fP\fP, which is usually the \fCGraphicsContext\fP\&. From there, it will decide what to do based on it's \fCENTITY_DIRTY\fP flag\&. 
.PP
Certain \fCGraphicsContexts\fP may only render when something is dirty, heavily increasing performance in applications with little moving objects\&. 
.PP
Additionally, an \fC\fBEntity\fP\fP that is considered dirty will have it's buffer updated on the GPU side\&. 
.PP
Definition at line 25 of file Entity\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void mc::gfx::checkGLError ()"

.SS "void mc::gfx::throwShaderError (const \fBIndex\fP & shaderId, const \fBEnum\fP & type, const std::string & message)"

.SS "void mc::gfx::throwShaderError (const \fBIndex\fP & shaderId, const \fBEnum\fP & type)"

.SH "Author"
.PP 
Generated automatically by Doxygen for MACE from the source code\&.
