.TH "mc::gfx::SimpleQuadRenderer" 3 "Wed Feb 1 2017" "Version Alpha" "MACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mc::gfx::SimpleQuadRenderer \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Renderer\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSimpleQuadRenderer\fP (const bool ssl=true)"
.br
.ti -1c
.RI "void \fBinit\fP (const char *vertexShader, const char *fragShader)"
.br
.ti -1c
.RI "void \fBinit\fP (const char *vertexShader, const std::string &fragShader)"
.br
.ti -1c
.RI "void \fBinit\fP (const std::string &vertexShader, const char *fragShader)"
.br
.ti -1c
.RI "void \fBinit\fP (const std::string &vertexShader, const std::string &fragShader)"
.br
.ti -1c
.RI "void \fBdestroy\fP ()"
.br
.ti -1c
.RI "void \fBbind\fP () const "
.br
.ti -1c
.RI "void \fBdraw\fP (const \fBGraphicsEntity\fP *en=nullptr)"
.br
.ti -1c
.RI "void \fBsetShader\fP (const \fBogl::ShaderProgram\fP &shader)"
.br
.ti -1c
.RI "\fBogl::ShaderProgram\fP & \fBgetShader\fP ()"
.br
.ti -1c
.RI "const \fBogl::ShaderProgram\fP & \fBgetShader\fP () const "
.br
.ti -1c
.RI "void \fBsetVertexArray\fP (const \fBogl::VertexArray\fP &vertices)"
.br
.ti -1c
.RI "\fBogl::VertexArray\fP & \fBgetVertexArray\fP ()"
.br
.ti -1c
.RI "const \fBogl::VertexArray\fP & \fBgetVertexArray\fP () const "
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBSimpleQuadRenderer\fP &other) const "
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBSimpleQuadRenderer\fP &other) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 299 of file Renderer\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "mc::gfx::SimpleQuadRenderer::SimpleQuadRenderer (const bool ssl = \fCtrue\fP)"

.SH "Member Function Documentation"
.PP 
.SS "void mc::gfx::SimpleQuadRenderer::bind () const"

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::SimpleQuadRenderer::destroy ()"

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::SimpleQuadRenderer::draw (const \fBGraphicsEntity\fP * en = \fCnullptr\fP)"

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "\fBogl::ShaderProgram\fP& mc::gfx::SimpleQuadRenderer::getShader ()"

.SS "const \fBogl::ShaderProgram\fP& mc::gfx::SimpleQuadRenderer::getShader () const"

.SS "\fBogl::VertexArray\fP& mc::gfx::SimpleQuadRenderer::getVertexArray ()"

.SS "const \fBogl::VertexArray\fP& mc::gfx::SimpleQuadRenderer::getVertexArray () const"

.SS "void mc::gfx::SimpleQuadRenderer::init (const char * vertexShader, const char * fragShader)"

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::SimpleQuadRenderer::init (const char * vertexShader, const std::string & fragShader)"

.PP

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::SimpleQuadRenderer::init (const std::string & vertexShader, const char * fragShader)"

.PP

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "void mc::gfx::SimpleQuadRenderer::init (const std::string & vertexShader, const std::string & fragShader)"

.PP

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "bool mc::gfx::SimpleQuadRenderer::operator!= (const \fBSimpleQuadRenderer\fP & other) const"

.SS "bool mc::gfx::SimpleQuadRenderer::operator== (const \fBSimpleQuadRenderer\fP & other) const"

.SS "void mc::gfx::SimpleQuadRenderer::setShader (const \fBogl::ShaderProgram\fP & shader)"

.SS "void mc::gfx::SimpleQuadRenderer::setVertexArray (const \fBogl::VertexArray\fP & vertices)"


.SH "Author"
.PP 
Generated automatically by Doxygen for MACE from the source code\&.
