.TH "mc::gfx::VertexArray" 3 "Sat Dec 17 2016" "Version Alpha" "MACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mc::gfx::VertexArray \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <OGL\&.h>\fP
.PP
Inherits \fBmc::gfx::Object\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBinit\fP () override"
.br
.RI "\fICalls the corresponding glCreate* function and assigns an ID\&. \fP"
.ti -1c
.RI "void \fBdestroy\fP () override"
.br
.RI "\fICalls the corresponding glDestroy* function and deletes the ID\&. \fP"
.ti -1c
.RI "bool \fBisCreated\fP () const  override"
.br
.RI "\fIQueries OpenGL whether this \fBObject\fP's ID is a valid object\&. \fP"
.ti -1c
.RI "void \fBdraw\fP (const GLenum type=GL_TRIANGLES) const "
.br
.ti -1c
.RI "void \fBloadVertices\fP (const \fBSize\fP &&verticeSize, const GLfloat vertices[], const \fBIndex\fP &&location=15, const \fBSize\fP &&attributeSize=3)"
.br
.ti -1c
.RI "void \fBloadIndices\fP (const \fBSize\fP &indiceNum, const unsigned int *indiceData)"
.br
.ti -1c
.RI "void \fBstoreDataInAttributeList\fP (const \fBSize\fP &&dataSize, const GLvoid *data, const \fBIndex\fP &&location=0, const \fBSize\fP &&attributeSize=3)"
.br
.ti -1c
.RI "void \fBaddBuffer\fP (const \fBVertexBuffer\fP &newBuffer)"
.br
.ti -1c
.RI "void \fBsetVertexNumber\fP (const \fBSize\fP &vertexNum)"
.br
.ti -1c
.RI "\fBSize\fP & \fBgetVertexNumber\fP ()"
.br
.ti -1c
.RI "const \fBSize\fP & \fBgetVertexNumber\fP () const "
.br
.ti -1c
.RI "void \fBsetIndices\fP (const \fBElementBuffer\fP &buffer)"
.br
.ti -1c
.RI "\fBElementBuffer\fP & \fBgetIndices\fP ()"
.br
.ti -1c
.RI "const \fBElementBuffer\fP & \fBgetIndices\fP () const "
.br
.ti -1c
.RI "void \fBsetBuffers\fP (const std::vector< \fBVertexBuffer\fP > &newBuffers)"
.br
.ti -1c
.RI "std::vector< \fBVertexBuffer\fP > & \fBgetBuffers\fP ()"
.br
.ti -1c
.RI "const std::vector< \fBVertexBuffer\fP > & \fBgetBuffers\fP () const "
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBVertexArray\fP &other) const "
.br
.RI "\fICompares if 2 \fCObjects\fP are equal\&. \fP"
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBVertexArray\fP &other) const "
.br
.RI "\fICompares if 2 \fCObjects\fP are not equal\&. \fP"
.ti -1c
.RI "virtual void \fBbind\fP () const "
.br
.RI "\fIBinds this \fC\fBObject\fP\fP to be used in an OpenGL function\&. \fP"
.ti -1c
.RI "virtual void \fBunbind\fP () const "
.br
.RI "\fIUnbinds this \fC\fBObject\fP\fP which is equivalent to binding ID 0\&. \fP"
.ti -1c
.RI "\fBIndex\fP \fBgetID\fP () const "
.br
.RI "\fIRetrieves the current ID that this \fC\fBObject\fP\fP represents\&. \fP"
.ti -1c
.RI "bool \fBoperator==\fP (const \fBObject\fP &other) const "
.br
.RI "\fICompares if 2 \fCObjects\fP are equal\&. \fP"
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBObject\fP &other) const "
.br
.RI "\fICompares if 2 \fCObjects\fP are not equal\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBIndex\fP \fBid\fP = 0"
.br
.RI "\fIThe ID of this `Object\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/Vertex_Specification#Vertex_Array_Object 
.PP
\fBVertexBuffer\fP 
.RE
.PP
\fBTodo\fP
.RS 4
figure out what to do with the storeDataInAttributeList and loadIndices function 
.RE
.PP

.PP
Definition at line 791 of file OGL\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void mc::gfx::VertexArray::addBuffer (const \fBVertexBuffer\fP & newBuffer)"

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "virtual void mc::gfx::Object::bind () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Binds this \fC\fBObject\fP\fP to be used in an OpenGL function\&. 
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::unbind() const\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If this \fC\fBObject\fP\fP has not been created yet 
.RE
.PP

.SS "void mc::gfx::VertexArray::destroy ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Calls the corresponding glDestroy* function and deletes the ID\&. 
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::init()\fP 
.PP
\fBObject::bind() const\fP 
.PP
\fBObject::unbind\fP const 
.PP
\fBObject::isCreated() const\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If this \fC\fBObject\fP\fP has not been created yet (\fBObject::init()\fP has not been called) 
.RE
.PP

.PP
Implements \fBmc::gfx::Object\fP\&.
.SS "void mc::gfx::VertexArray::draw (const GLenum type = \fCGL_TRIANGLES\fP) const"

.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/GLAPI/glDrawElements 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.SS "std::vector<\fBVertexBuffer\fP>& mc::gfx::VertexArray::getBuffers ()"

.SS "const std::vector<\fBVertexBuffer\fP>& mc::gfx::VertexArray::getBuffers () const"

.SS "\fBIndex\fP mc::gfx::Object::getID () const\fC [inherited]\fP"

.PP
Retrieves the current ID that this \fC\fBObject\fP\fP represents\&. The ID is an unsigned number that acts like a pointer to OpenGL memory\&. It is assigned when \fBObject::init()\fP is called\&. 
.PP
If it is 0, the \fC\fBObject\fP\fP is considered uncreated\&. 
.PP
When using \fBObject::bind() const \fPit will bind to this ID\&. \fBObject::unbind() const \fPwill bind to ID 0, which is the equivelant of a null pointer\&. 
.PP
\fBReturns:\fP
.RS 4
The ID represented by this \fC\fBObject\fP\fP 
.RE
.PP

.SS "\fBElementBuffer\fP& mc::gfx::VertexArray::getIndices ()"

.SS "const \fBElementBuffer\fP& mc::gfx::VertexArray::getIndices () const"

.SS "\fBSize\fP& mc::gfx::VertexArray::getVertexNumber ()"

.SS "const \fBSize\fP& mc::gfx::VertexArray::getVertexNumber () const"

.SS "void mc::gfx::VertexArray::init ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Calls the corresponding glCreate* function and assigns an ID\&. 
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::destroy()\fP 
.PP
\fBObject::bind() const\fP 
.PP
\fBObject::unbind\fP const 
.PP
\fBObject::isCreated() const\fP 
.RE
.PP

.PP
Implements \fBmc::gfx::Object\fP\&.
.SS "bool mc::gfx::VertexArray::isCreated () const\fC [override]\fP, \fC [virtual]\fP"

.PP
Queries OpenGL whether this \fBObject\fP's ID is a valid object\&. 
.PP
\fBReturns:\fP
.RS 4
Whether this \fC\fBObject\fP\fP represents memory 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::bind() const\fP 
.PP
\fBObject::init()\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.PP
Implements \fBmc::gfx::Object\fP\&.
.SS "void mc::gfx::VertexArray::loadIndices (const \fBSize\fP & indiceNum, const unsigned int * indiceData)"

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBVertexBuffer\fP 
.RE
.PP

.SS "void mc::gfx::VertexArray::loadVertices (const \fBSize\fP && verticeSize, const GLfloat vertices[], const \fBIndex\fP && location = \fC15\fP, const \fBSize\fP && attributeSize = \fC3\fP)"

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBVertexBuffer\fP 
.RE
.PP

.SS "bool mc::gfx::Object::operator!= (const \fBObject\fP & other) const\fC [inherited]\fP"

.PP
Compares if 2 \fCObjects\fP are not equal\&. 
.PP
\fBSee also:\fP
.RS 4
\fBObject::getID() const\fP 
.PP
\fBObject::operator==(const Object&) const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether \fCthis\fP and \fCother\fP are different 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP What to compare with 
.RE
.PP

.SS "bool mc::gfx::VertexArray::operator!= (const \fBVertexArray\fP & other) const"

.PP
Compares if 2 \fCObjects\fP are not equal\&. 
.PP
\fBSee also:\fP
.RS 4
\fBObject::getID() const\fP 
.PP
\fBObject::operator==(const Object&) const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether \fCthis\fP and \fCother\fP are different 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP What to compare with 
.RE
.PP

.SS "bool mc::gfx::Object::operator== (const \fBObject\fP & other) const\fC [inherited]\fP"

.PP
Compares if 2 \fCObjects\fP are equal\&. 
.PP
\fBSee also:\fP
.RS 4
\fBObject::getID() const\fP 
.PP
\fBObject::operator!=(const Object&) const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether \fCthis\fP and \fCother\fP are the same 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP What to compare with 
.RE
.PP

.SS "bool mc::gfx::VertexArray::operator== (const \fBVertexArray\fP & other) const"

.PP
Compares if 2 \fCObjects\fP are equal\&. 
.PP
\fBSee also:\fP
.RS 4
\fBObject::getID() const\fP 
.PP
\fBObject::operator!=(const Object&) const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether \fCthis\fP and \fCother\fP are the same 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP What to compare with 
.RE
.PP

.SS "void mc::gfx::VertexArray::setBuffers (const std::vector< \fBVertexBuffer\fP > & newBuffers)"

.SS "void mc::gfx::VertexArray::setIndices (const \fBElementBuffer\fP & buffer)"

.SS "void mc::gfx::VertexArray::setVertexNumber (const \fBSize\fP & vertexNum)"

.SS "void mc::gfx::VertexArray::storeDataInAttributeList (const \fBSize\fP && dataSize, const GLvoid * data, const \fBIndex\fP && location = \fC0\fP, const \fBSize\fP && attributeSize = \fC3\fP)"

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBVertexBuffer\fP 
.RE
.PP

.SS "virtual void mc::gfx::Object::unbind () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Unbinds this \fC\fBObject\fP\fP which is equivalent to binding ID 0\&. 
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::bind() const\fP 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBIndex\fP mc::gfx::Object::id = 0\fC [protected]\fP, \fC [inherited]\fP"

.PP
The ID of this `Object\&. ` Should be set in \fBObject::init()\fP and become 0 in \fBObject::destroy()\fP 
.PP
\fBObject::getID() const \fPreturns this\&. 
.PP
Definition at line 135 of file OGL\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MACE from the source code\&.
