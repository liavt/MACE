.TH "mc::gfx::ColorAttachment" 3 "Sun Apr 9 2017" "Version Alpha" "MACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mc::gfx::ColorAttachment \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Entity\&.h>\fP
.PP
Inherits \fBmc::gfx::ogl::Texture2D\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBColorAttachment\fP ()"
.br
.ti -1c
.RI "\fBColorAttachment\fP (const \fBColor\fP &col)"
.br
.ti -1c
.RI "\fBColorAttachment\fP (const \fBogl::Texture2D\fP &tex, const \fBColor\fP &col=\fBColor\fP(0\&.0f, 0\&.0f, 0\&.0f, 0\&.0f))"
.br
.ti -1c
.RI "\fBColorAttachment\fP (const char *file)"
.br
.ti -1c
.RI "\fBColorAttachment\fP (const std::string &file)"
.br
.ti -1c
.RI "void \fBload\fP (cv::Mat mat)"
.br
.ti -1c
.RI "\fBColorAttachment\fP (cv::Mat mat)"
.br
.ti -1c
.RI "cv::Mat \fBtoMat\fP (const \fBSize\fP width, const \fBSize\fP height)"
.br
.ti -1c
.RI "void \fBload\fP (const char *file)"
.br
.ti -1c
.RI "void \fBload\fP (const std::string &file)"
.br
.ti -1c
.RI "void \fBload\fP (const \fBColor\fP &c)"
.br
.ti -1c
.RI "void \fBload\fP (const unsigned char *c, const \fBSize\fP size)"
.br
.ti -1c
.RI "template<std::size_t S> void \fBload\fP (const unsigned char c[S])"
.br
.ti -1c
.RI "\fBColor\fP & \fBgetPaint\fP ()"
.br
.ti -1c
.RI "const \fBColor\fP & \fBgetPaint\fP () const "
.br
.ti -1c
.RI "void \fBsetPaint\fP (const \fBColor\fP &col)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBColorAttachment\fP &other) const "
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBColorAttachment\fP &other) const "
.br
.ti -1c
.RI "void \fBinit\fP () override"
.br
.RI "\fICalls the corresponding glCreate* function and assigns an ID\&. \fP"
.ti -1c
.RI "void \fBdestroy\fP () override"
.br
.RI "\fICalls the corresponding glDestroy* function and deletes the ID\&. \fP"
.ti -1c
.RI "void \fBbind\fP () const  override"
.br
.RI "\fIBinds this \fC\fBObject\fP\fP to be used in an OpenGL function\&. \fP"
.ti -1c
.RI "void \fBbind\fP (const \fBIndex\fP location) const "
.br
.ti -1c
.RI "void \fBsetData\fP (const void *data, const \fBSize\fP width, const \fBSize\fP height, const \fBEnum\fP type=GL_FLOAT, const \fBEnum\fP format=GL_RGB, const \fBEnum\fP internalFormat=GL_RGB, const \fBIndex\fP mipmapLevel=0)"
.br
.ti -1c
.RI "void \fBsetMultisampledData\fP (const \fBSize\fP samples, const \fBSize\fP width, const \fBSize\fP height, const \fBEnum\fP internalFormat, const bool fixedSamples=true)"
.br
.ti -1c
.RI "void \fBsetPixelStorage\fP (const \fBEnum\fP alignment, const int number)"
.br
.ti -1c
.RI "void \fBsetPixelStorage\fP (const \fBEnum\fP alignment, const float number)"
.br
.ti -1c
.RI "void \fBsetPixelStorage\fP (const \fBEnum\fP alignment, const bool value)"
.br
.ti -1c
.RI "void \fBresetPixelStorage\fP ()"
.br
.ti -1c
.RI "void \fBgenerateMipmap\fP ()"
.br
.ti -1c
.RI "void \fBsetTarget\fP (const \fBEnum\fP target)"
.br
.ti -1c
.RI "\fBEnum\fP & \fBgetTarget\fP ()"
.br
.ti -1c
.RI "const \fBEnum\fP & \fBgetTarget\fP () const "
.br
.ti -1c
.RI "bool \fBisCreated\fP () const  override"
.br
.RI "\fIQueries OpenGL whether this \fBObject\fP's ID is a valid object\&. \fP"
.ti -1c
.RI "void \fBsetParameter\fP (const \fBEnum\fP name, const int value)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBTexture2D\fP &other) const "
.br
.RI "\fICompares if 2 \fCObjects\fP are equal\&. \fP"
.ti -1c
.RI "bool \fBoperator==\fP (const Object &other) const "
.br
.RI "\fICompares if 2 \fCObjects\fP are equal\&. \fP"
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBTexture2D\fP &other) const "
.br
.RI "\fICompares if 2 \fCObjects\fP are not equal\&. \fP"
.ti -1c
.RI "bool \fBoperator!=\fP (const Object &other) const "
.br
.RI "\fICompares if 2 \fCObjects\fP are not equal\&. \fP"
.ti -1c
.RI "virtual void \fBunbind\fP () const "
.br
.RI "\fIUnbinds this \fC\fBObject\fP\fP which is equivalent to binding ID 0\&. \fP"
.ti -1c
.RI "\fBIndex\fP \fBgetID\fP () const "
.br
.RI "\fIRetrieves the current ID that this \fC\fBObject\fP\fP represents\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBIndex\fP \fBid\fP = 0"
.br
.RI "\fIThe ID of this `Object\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 119 of file Entity\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "mc::gfx::ColorAttachment::ColorAttachment ()"

.SS "mc::gfx::ColorAttachment::ColorAttachment (const \fBColor\fP & col)"

.SS "mc::gfx::ColorAttachment::ColorAttachment (const \fBogl::Texture2D\fP & tex, const \fBColor\fP & col = \fC\fBColor\fP(0\&.0f, 0\&.0f, 0\&.0f, 0\&.0f)\fP)"

.SS "mc::gfx::ColorAttachment::ColorAttachment (const char * file)"

.SS "mc::gfx::ColorAttachment::ColorAttachment (const std::string & file)"

.SS "mc::gfx::ColorAttachment::ColorAttachment (cv::Mat mat)\fC [inline]\fP"

.PP
Definition at line 165 of file Entity\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void mc::gfx::ogl::Texture2D::bind () const\fC [override]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Binds this \fC\fBObject\fP\fP to be used in an OpenGL function\&. 
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::unbind() const\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If this \fC\fBObject\fP\fP has not been created yet 
.RE
.PP

.PP
Reimplemented from \fBmc::gfx::ogl::Object\fP\&.
.SS "void mc::gfx::ogl::Texture2D::bind (const \fBIndex\fP location) const\fC [inherited]\fP"

.SS "void mc::gfx::ogl::Texture2D::destroy ()\fC [override]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Calls the corresponding glDestroy* function and deletes the ID\&. 
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::init()\fP 
.PP
\fBObject::bind() const\fP 
.PP
\fBObject::unbind\fP const 
.PP
\fBObject::isCreated() const\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If this \fC\fBObject\fP\fP has not been created yet (\fBObject::init()\fP has not been called) 
.RE
.PP

.PP
Implements \fBmc::gfx::ogl::Object\fP\&.
.SS "void mc::gfx::ogl::Texture2D::generateMipmap ()\fC [inherited]\fP"

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glGenerateMipmap.xhtml 
.RE
.PP

.SS "\fBIndex\fP mc::gfx::ogl::Object::getID () const\fC [inherited]\fP"

.PP
Retrieves the current ID that this \fC\fBObject\fP\fP represents\&. The ID is an unsigned number that acts like a pointer to OpenGL memory\&. It is assigned when \fBObject::init()\fP is called\&. 
.PP
If it is 0, the \fC\fBObject\fP\fP is considered uncreated\&. 
.PP
When using \fBObject::bind() const \fPit will bind to this ID\&. \fBObject::unbind() const \fPwill bind to ID 0, which is the equivelant of a null pointer\&. 
.PP
\fBReturns:\fP
.RS 4
The ID represented by this \fC\fBObject\fP\fP 
.RE
.PP

.SS "\fBColor\fP& mc::gfx::ColorAttachment::getPaint ()"

.SS "const \fBColor\fP& mc::gfx::ColorAttachment::getPaint () const"

.SS "\fBEnum\fP& mc::gfx::ogl::Texture2D::getTarget ()\fC [inherited]\fP"

.SS "const \fBEnum\fP& mc::gfx::ogl::Texture2D::getTarget () const\fC [inherited]\fP"

.SS "void mc::gfx::ogl::Texture2D::init ()\fC [override]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Calls the corresponding glCreate* function and assigns an ID\&. 
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::destroy()\fP 
.PP
\fBObject::bind() const\fP 
.PP
\fBObject::unbind\fP const 
.PP
\fBObject::isCreated() const\fP 
.RE
.PP

.PP
Implements \fBmc::gfx::ogl::Object\fP\&.
.SS "bool mc::gfx::ogl::Texture2D::isCreated () const\fC [override]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Queries OpenGL whether this \fBObject\fP's ID is a valid object\&. 
.PP
\fBReturns:\fP
.RS 4
Whether this \fC\fBObject\fP\fP represents memory 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::bind() const\fP 
.PP
\fBObject::init()\fP 
.RE
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP

.PP
Implements \fBmc::gfx::ogl::Object\fP\&.
.SS "void mc::gfx::ColorAttachment::load (cv::Mat mat)\fC [inline]\fP"

.PP
Definition at line 129 of file Entity\&.h\&.
.SS "void mc::gfx::ColorAttachment::load (const char * file)"

.SS "void mc::gfx::ColorAttachment::load (const std::string & file)"

.SS "void mc::gfx::ColorAttachment::load (const \fBColor\fP & c)"

.SS "void mc::gfx::ColorAttachment::load (const unsigned char * c, const \fBSize\fP size)"

.SS "template<std::size_t S> void mc::gfx::ColorAttachment::load (const unsigned char c[S])\fC [inline]\fP"

.PP
Definition at line 192 of file Entity\&.h\&.
.SS "bool mc::gfx::ogl::Object::operator!= (const \fBObject\fP & other) const\fC [inherited]\fP"

.PP
Compares if 2 \fCObjects\fP are not equal\&. 
.PP
\fBSee also:\fP
.RS 4
\fBObject::getID() const\fP 
.PP
\fBObject::operator==(const Object&) const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether \fCthis\fP and \fCother\fP are different 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP What to compare with 
.RE
.PP

.SS "bool mc::gfx::ColorAttachment::operator!= (const \fBColorAttachment\fP & other) const"

.SS "bool mc::gfx::ogl::Texture2D::operator!= (const \fBTexture2D\fP & other) const\fC [inherited]\fP"

.PP
Compares if 2 \fCObjects\fP are not equal\&. 
.PP
\fBSee also:\fP
.RS 4
\fBObject::getID() const\fP 
.PP
\fBObject::operator==(const Object&) const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether \fCthis\fP and \fCother\fP are different 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP What to compare with 
.RE
.PP

.SS "bool mc::gfx::ogl::Object::operator== (const \fBObject\fP & other) const\fC [inherited]\fP"

.PP
Compares if 2 \fCObjects\fP are equal\&. 
.PP
\fBSee also:\fP
.RS 4
\fBObject::getID() const\fP 
.PP
\fBObject::operator!=(const Object&) const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether \fCthis\fP and \fCother\fP are the same 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP What to compare with 
.RE
.PP

.SS "bool mc::gfx::ColorAttachment::operator== (const \fBColorAttachment\fP & other) const"

.SS "bool mc::gfx::ogl::Texture2D::operator== (const \fBTexture2D\fP & other) const\fC [inherited]\fP"

.PP
Compares if 2 \fCObjects\fP are equal\&. 
.PP
\fBSee also:\fP
.RS 4
\fBObject::getID() const\fP 
.PP
\fBObject::operator!=(const Object&) const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Whether \fCthis\fP and \fCother\fP are the same 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIother\fP What to compare with 
.RE
.PP

.SS "void mc::gfx::ogl::Texture2D::resetPixelStorage ()\fC [inherited]\fP"

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBTexture2D::setPixelStorage(const Enum, const int)\fP 
.PP
https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glPixelStore.xhtml 
.RE
.PP

.SS "void mc::gfx::ogl::Texture2D::setData (const void * data, const \fBSize\fP width, const \fBSize\fP height, const \fBEnum\fP type = \fCGL_FLOAT\fP, const \fBEnum\fP format = \fCGL_RGB\fP, const \fBEnum\fP internalFormat = \fCGL_RGB\fP, const \fBIndex\fP mipmapLevel = \fC0\fP)\fC [inherited]\fP"

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/GLAPI/glTexImage2D 
.RE
.PP

.SS "void mc::gfx::ogl::Texture2D::setMultisampledData (const \fBSize\fP samples, const \fBSize\fP width, const \fBSize\fP height, const \fBEnum\fP internalFormat, const bool fixedSamples = \fCtrue\fP)\fC [inherited]\fP"

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexImage2DMultisample.xhtml 
.RE
.PP

.SS "void mc::gfx::ColorAttachment::setPaint (const \fBColor\fP & col)"

.SS "void mc::gfx::ogl::Texture2D::setParameter (const \fBEnum\fP name, const int value)\fC [inherited]\fP"

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.opengl.org/wiki/GLAPI/glTexParameter 
.RE
.PP

.SS "void mc::gfx::ogl::Texture2D::setPixelStorage (const \fBEnum\fP alignment, const int number)\fC [inherited]\fP"

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glPixelStore.xhtml 
.RE
.PP

.SS "void mc::gfx::ogl::Texture2D::setPixelStorage (const \fBEnum\fP alignment, const float number)\fC [inherited]\fP"

.PP

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glPixelStore.xhtml 
.RE
.PP

.SS "void mc::gfx::ogl::Texture2D::setPixelStorage (const \fBEnum\fP alignment, const bool value)\fC [inherited]\fP"

.PP

.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glPixelStore.xhtml 
.RE
.PP

.SS "void mc::gfx::ogl::Texture2D::setTarget (const \fBEnum\fP target)\fC [inherited]\fP"

.SS "cv::Mat mc::gfx::ColorAttachment::toMat (const \fBSize\fP width, const \fBSize\fP height)\fC [inline]\fP"

.PP
Definition at line 170 of file Entity\&.h\&.
.SS "virtual void mc::gfx::ogl::Object::unbind () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Unbinds this \fC\fBObject\fP\fP which is equivalent to binding ID 0\&. 
.PP
\fBAttention:\fP
.RS 4
This uses an OpenGL function and must be called in a thread with an OpenGL context\&. Otherwise, an error will be thrown\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIGL_INVALID_OPERATION\fP If the current thread does not have an OpenGL context 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBObject::bind() const\fP 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBIndex\fP mc::gfx::ogl::Object::id = 0\fC [protected]\fP, \fC [inherited]\fP"

.PP
The ID of this `Object\&. ` Should be set in \fBObject::init()\fP and become 0 in \fBObject::destroy()\fP 
.PP
\fBObject::getID() const \fPreturns this\&. 
.PP
Definition at line 197 of file OGL\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MACE from the source code\&.
